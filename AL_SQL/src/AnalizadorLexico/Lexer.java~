/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import static AnalizadorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/Compiladores/AL-xicoDeSQL/AL_SQL/src/AnalizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\31\1\62\1\62\1\31\22\0\1\4\1\17\1\0"+
    "\1\30\1\0\1\15\1\20\1\32\1\24\1\25\1\15\1\14\1\4"+
    "\1\12\1\13\1\15\2\6\10\3\1\0\1\15\1\17\1\16\1\17"+
    "\1\0\1\15\1\33\1\46\1\43\1\34\1\35\1\44\1\52\1\45"+
    "\1\47\1\60\1\54\1\11\1\55\1\7\1\42\1\41\1\61\1\40"+
    "\1\50\1\37\1\10\1\57\1\56\1\36\1\51\1\53\1\22\1\0"+
    "\1\23\1\0\1\2\1\0\4\1\1\5\25\1\1\26\1\21\1\27"+
    "\7\0\1\62\u1fa2\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\2\5\6"+
    "\2\1\4\6\1\1\25\2\1\7\3\2\1\10\10\2"+
    "\1\0\1\11\1\0\1\12\1\13\1\0\1\13\4\2"+
    "\1\10\3\2\1\10\20\2\1\10\17\2\1\10\1\2"+
    "\1\10\2\2\1\10\26\2\1\10\1\2\1\10\21\2"+
    "\1\10\17\2\1\12\14\2\1\10\7\2\1\12\1\14"+
    "\1\2\1\10\7\2\1\10\7\2\1\10\50\2\1\10"+
    "\26\2\1\10\13\2\1\10\1\2\1\10\11\2\1\10"+
    "\12\2\1\10\4\2\1\10\7\2\1\7\1\12\1\10"+
    "\12\2\1\12\14\2\1\10\3\2\1\0\11\2\1\10"+
    "\3\2\1\10\3\2\1\10\17\2\1\10\2\2\1\10"+
    "\2\2\1\10\17\2\1\10\42\2\2\10\22\2\1\0"+
    "\1\2\1\10\46\2\1\10\30\2\1\10\5\2\1\0"+
    "\1\10\46\2\1\0\11\2\1\10\1\2\1\10\11\2"+
    "\1\10\5\2\1\10\6\2\1\10\3\2\1\10\34\2"+
    "\1\10\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\231\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\63\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u01cb\0\u0af5\0\u0396\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\146\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae"+
    "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\63\0\u24a8\0\u24db"+
    "\0\u250e\0\u2541\0\u2574\0\u1056\0\u25a7\0\u25da\0\u260d\0\u2640"+
    "\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8"+
    "\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970"+
    "\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38"+
    "\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0"+
    "\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168"+
    "\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300"+
    "\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498"+
    "\0\u34cb\0\u34fe\0\u3531\0\u22dd\0\u3564\0\u3597\0\u35ca\0\u35fd"+
    "\0\u3630\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795"+
    "\0\u37c8\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d"+
    "\0\u3960\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5"+
    "\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d"+
    "\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5"+
    "\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a"+
    "\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2"+
    "\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257\0\u428a"+
    "\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389\0\u43bc\0\u43ef\0\u4422"+
    "\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba"+
    "\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752"+
    "\0\u4785\0\u47b8\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea"+
    "\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82"+
    "\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a"+
    "\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2"+
    "\0\u4de5\0\u4e18\0\u4e4b\0\u3c5d\0\u4e7e\0\u4eb1\0\u4ee4\0\u4f17"+
    "\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af"+
    "\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae\0\u51e1\0\u5214\0\u5247"+
    "\0\u527a\0\u52ad\0\u52e0\0\u5313\0\u5346\0\u5379\0\u53ac\0\u53df"+
    "\0\u5412\0\u5445\0\u5478\0\u54ab\0\u54de\0\u5511\0\u5544\0\u5577"+
    "\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676\0\u56a9\0\u56dc\0\u570f"+
    "\0\u5742\0\u5775\0\u57a8\0\u24db\0\u57db\0\u580e\0\u5841\0\u5874"+
    "\0\u58a7\0\u58da\0\u590d\0\u5940\0\u5973\0\u59a6\0\u59d9\0\u5a0c"+
    "\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71\0\u5ba4"+
    "\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3\0\u5cd6\0\u5d09\0\u5d3c"+
    "\0\u5d6f\0\u5da2\0\u5dd5\0\u5e08\0\u5e3b\0\u5e6e\0\u5ea1\0\u36c9"+
    "\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d\0\u5fa0\0\u5fd3\0\u6006\0\u6039"+
    "\0\u606c\0\u609f\0\u60d2\0\u6105\0\u6138\0\u616b\0\u619e\0\u61d1"+
    "\0\u6204\0\u6237\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336\0\u6369"+
    "\0\u639c\0\u63cf\0\u6402\0\u6435\0\u6468\0\u649b\0\u64ce\0\u6501"+
    "\0\u6534\0\u6567\0\u659a\0\u65cd\0\u6600\0\u6633\0\u3ef4\0\u6666"+
    "\0\u6699\0\u66cc\0\u66ff\0\u6732\0\u6765\0\u250e\0\u6798\0\u67cb"+
    "\0\u67fe\0\u6831\0\u6864\0\u6897\0\u68ca\0\u68fd\0\u6930\0\u6963"+
    "\0\u6996\0\u69c9\0\u69fc\0\u6a2f\0\u6a62\0\u6a95\0\u6ac8\0\u6afb"+
    "\0\u6b2e\0\u6b61\0\u6b94\0\u6bc7\0\u6bfa\0\u6c2d\0\u6c60\0\u6c93"+
    "\0\u6cc6\0\u6cf9\0\u6d2c\0\u6d5f\0\u6d92\0\u6dc5\0\u6df8\0\u6e2b"+
    "\0\u6e5e\0\u6e91\0\u6ec4\0\u6ef7\0\u6f2a\0\u6f5d\0\u6f90\0\u6fc3"+
    "\0\u6ff6\0\u7029\0\u705c\0\u708f\0\u70c2\0\u70f5\0\u7128\0\u715b"+
    "\0\u23dc\0\u718e\0\u71c1\0\u71f4\0\u7227\0\u725a\0\u728d\0\u1386"+
    "\0\u72c0\0\u72f3\0\u6e2b\0\u7326\0\u7359\0\u392d\0\u738c\0\u73bf"+
    "\0\63\0\u73f2\0\u7425\0\u7458\0\u748b\0\u74be\0\u74f1\0\u7524"+
    "\0\u7557\0\u758a\0\u75bd\0\u75f0\0\u7623\0\u7656\0\u7689\0\u76bc"+
    "\0\u76ef\0\u7722\0\u7755\0\u7788\0\u77bb\0\u77ee\0\u7821\0\u7854"+
    "\0\u7887\0\u78ba\0\u78ed\0\u7920\0\u7953\0\u7986\0\u79b9\0\u79ec"+
    "\0\u7a1f\0\u7a52\0\u7a85\0\u7ab8\0\u7aeb\0\u7b1e\0\u7b51\0\u7b84"+
    "\0\u7bb7\0\u7bea\0\u7c1d\0\u7c50\0\u7c83\0\u7cb6\0\u7ce9\0\u7d1c"+
    "\0\u7d4f\0\u7d82\0\u7db5\0\u7de8\0\u7524\0\u7e1b\0\u7e4e\0\u7e81"+
    "\0\u7eb4\0\u7ee7\0\u7f1a\0\u7f4d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\15\1\22\1\15\1\23\1\15\1\24"+
    "\1\5\1\25\1\26\1\27\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\3\65\0\3\3\1\0\5\3\21\0\27\3\4\0"+
    "\1\4\2\0\1\4\4\0\1\53\53\0\1\5\24\0"+
    "\1\5\32\0\3\3\1\0\3\3\1\54\1\3\21\0"+
    "\1\55\1\3\1\56\4\3\1\57\1\60\16\3\2\0"+
    "\3\3\1\0\2\3\1\61\2\3\21\0\6\3\1\62"+
    "\6\3\1\63\11\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\64\1\3\1\65\4\3\1\66\4\3\1\67\12\3"+
    "\4\0\1\70\2\0\1\70\3\0\1\71\1\72\52\0"+
    "\1\73\2\0\1\73\57\0\1\70\2\0\1\70\4\0"+
    "\1\72\65\0\1\15\64\0\1\15\63\0\1\15\64\0"+
    "\1\15\64\0\1\15\64\0\1\15\63\0\1\15\32\0"+
    "\31\74\1\75\1\76\30\74\1\0\3\3\1\0\2\3"+
    "\1\77\1\100\1\101\21\0\1\3\1\102\2\3\1\103"+
    "\1\104\2\3\1\105\2\3\1\106\1\3\1\107\6\3"+
    "\1\110\2\3\2\0\3\3\1\0\3\3\1\111\1\3"+
    "\21\0\1\112\1\3\1\113\2\3\1\114\1\3\1\115"+
    "\3\3\1\116\1\117\12\3\2\0\3\3\1\0\2\3"+
    "\1\120\1\3\1\121\21\0\3\3\1\122\1\3\1\123"+
    "\7\3\1\124\11\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\125\1\3\1\126\2\3\1\127\1\3\1\130\2\3"+
    "\1\131\1\3\1\132\1\133\11\3\2\0\3\3\1\0"+
    "\3\3\1\134\1\3\21\0\1\135\1\3\1\136\4\3"+
    "\1\137\4\3\1\140\12\3\2\0\3\3\1\0\3\3"+
    "\1\141\1\142\21\0\1\143\1\3\1\144\2\3\1\145"+
    "\1\3\1\146\4\3\1\147\12\3\2\0\3\3\1\0"+
    "\2\3\1\150\1\151\1\3\21\0\5\3\1\152\1\153"+
    "\1\3\1\154\1\155\12\3\1\156\2\3\2\0\3\3"+
    "\1\0\3\3\1\157\1\160\21\0\1\161\4\3\1\162"+
    "\1\3\1\163\2\3\1\164\14\3\2\0\3\3\1\0"+
    "\3\3\1\165\1\166\21\0\1\167\1\3\1\170\2\3"+
    "\1\171\1\3\1\172\4\3\1\173\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\174\6\3\1\175\17\3\2\0"+
    "\3\3\1\0\3\3\1\176\1\3\21\0\1\177\1\3"+
    "\1\200\2\3\1\201\1\3\1\202\4\3\1\203\1\3"+
    "\1\103\10\3\2\0\3\3\1\0\2\3\1\204\2\3"+
    "\21\0\1\3\1\205\7\3\1\103\3\3\1\206\4\3"+
    "\1\207\4\3\2\0\3\3\1\0\3\3\1\210\1\3"+
    "\21\0\1\211\1\3\1\212\1\3\1\213\1\3\1\214"+
    "\1\215\1\216\1\3\1\217\1\3\1\220\1\3\1\221"+
    "\3\3\1\222\3\3\1\223\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\224\24\3\2\0\3\3\1\0\4\3"+
    "\1\225\21\0\2\3\1\226\2\3\1\227\1\3\1\230"+
    "\17\3\2\0\3\3\1\0\5\3\21\0\7\3\1\231"+
    "\17\3\2\0\3\3\1\0\5\3\21\0\2\3\1\232"+
    "\11\3\1\233\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\234\1\3\1\235\4\3\1\236\4\3\1\237\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\240\4\3\1\241"+
    "\1\3\1\242\2\3\1\243\1\3\1\244\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\245\13\3\1\246\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\247\17\3"+
    "\4\0\1\53\1\0\1\250\1\53\26\0\1\250\26\0"+
    "\3\3\1\0\4\3\1\251\21\0\22\3\1\252\4\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\253\15\3"+
    "\1\254\4\3\2\0\3\3\1\0\5\3\21\0\3\3"+
    "\1\226\23\3\2\0\3\3\1\0\2\3\1\255\2\3"+
    "\21\0\4\3\1\103\3\3\1\256\16\3\2\0\3\3"+
    "\1\0\5\3\21\0\12\3\1\224\14\3\2\0\3\3"+
    "\1\0\5\3\21\0\6\3\1\257\5\3\1\260\4\3"+
    "\1\261\5\3\2\0\3\3\1\0\5\3\21\0\1\3"+
    "\1\262\4\3\1\263\20\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\264\1\3\1\265\11\3\1\266\12\3\2\0"+
    "\3\3\1\0\2\3\1\267\2\3\21\0\15\3\1\226"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\1\270\10\3"+
    "\1\226\12\3\1\271\2\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\272\7\3\1\273\12\3\1\263\3\3\2\0"+
    "\3\3\1\0\2\3\1\274\2\3\21\0\21\3\1\104"+
    "\5\3\4\0\1\70\2\0\1\70\4\0\1\53\47\0"+
    "\31\71\1\0\31\71\3\0\1\73\1\0\1\275\1\73"+
    "\26\0\1\275\25\0\32\75\1\276\30\75\31\76\1\0"+
    "\31\76\1\0\3\3\1\0\5\3\21\0\1\3\1\103"+
    "\14\3\1\103\10\3\2\0\3\3\1\0\5\3\21\0"+
    "\4\3\1\277\22\3\2\0\3\3\1\0\4\3\1\300"+
    "\21\0\4\3\1\263\22\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\103\25\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\103\24\3\2\0\3\3\1\0\5\3\21\0"+
    "\4\3\1\301\22\3\2\0\3\3\1\0\5\3\21\0"+
    "\15\3\1\302\11\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\103\4\3\1\303\11\3\2\0\3\3\1\0"+
    "\5\3\21\0\17\3\1\103\7\3\2\0\3\3\1\0"+
    "\5\3\21\0\22\3\1\304\4\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\305\11\3\1\103\10\3\2\0"+
    "\3\3\1\0\2\3\1\232\1\3\1\306\21\0\1\307"+
    "\7\3\1\310\1\311\3\3\1\312\11\3\2\0\3\3"+
    "\1\0\5\3\21\0\7\3\1\304\17\3\2\0\3\3"+
    "\1\0\3\3\1\313\1\3\21\0\22\3\1\314\4\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\315\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\316\14\3\1\317"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\1\3\1\320"+
    "\25\3\2\0\3\3\1\0\5\3\21\0\15\3\1\104"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\2\3\1\321"+
    "\1\3\1\322\3\3\1\323\3\3\1\324\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\5\3\1\325\21\3\2\0"+
    "\3\3\1\0\5\3\21\0\10\3\1\326\16\3\2\0"+
    "\3\3\1\0\5\3\21\0\13\3\1\327\13\3\2\0"+
    "\3\3\1\0\5\3\21\0\3\3\1\330\16\3\1\331"+
    "\4\3\2\0\3\3\1\0\3\3\1\332\1\3\21\0"+
    "\1\333\13\3\1\334\1\3\1\335\10\3\2\0\3\3"+
    "\1\0\5\3\21\0\6\3\1\103\20\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\336\24\3\2\0\3\3"+
    "\1\0\5\3\21\0\22\3\1\337\4\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\340\24\3\2\0\3\3"+
    "\1\0\4\3\1\104\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\341\12\3\2\0\3\3\1\0"+
    "\4\3\1\342\21\0\1\343\3\3\1\344\1\3\1\345"+
    "\1\3\1\346\1\347\3\3\1\350\6\3\1\351\2\3"+
    "\2\0\3\3\1\0\4\3\1\352\21\0\23\3\1\353"+
    "\3\3\2\0\3\3\1\0\5\3\21\0\17\3\1\354"+
    "\7\3\2\0\3\3\1\0\5\3\21\0\13\3\1\355"+
    "\13\3\2\0\3\3\1\0\5\3\21\0\1\336\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\3\1\103\3\3"+
    "\1\356\7\3\1\357\11\3\2\0\3\3\1\0\5\3"+
    "\21\0\5\3\1\360\21\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\361\4\3\1\362\4\3\1\363\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\364\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\24\3\1\365\2\3"+
    "\2\0\3\3\1\0\4\3\1\232\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\366\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\3\1\263\25\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\367\1\3\1\301"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\4\3\1\370"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\11\3\1\371"+
    "\15\3\2\0\3\3\1\0\5\3\21\0\2\3\1\372"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\5\3\1\373"+
    "\21\3\2\0\3\3\1\0\3\3\1\374\1\3\21\0"+
    "\7\3\1\121\17\3\2\0\3\3\1\0\5\3\21\0"+
    "\4\3\1\375\10\3\1\376\11\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\377\4\3\1\u0100\17\3\2\0"+
    "\3\3\1\0\2\3\1\u0101\1\u0102\1\u0103\21\0\1\u0104"+
    "\4\3\1\u0105\14\3\1\u0106\4\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\u0107\1\3\1\u0108\24\3\2\0\3\3"+
    "\1\0\2\3\1\u0109\1\3\1\u010a\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u010b\17\3\2\0"+
    "\3\3\1\0\4\3\1\121\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u010c\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u010d\4\3\1\u010e\17\3"+
    "\2\0\3\3\1\0\3\3\1\u010f\1\3\21\0\5\3"+
    "\1\u0110\21\3\2\0\3\3\1\0\4\3\1\u0111\21\0"+
    "\5\3\1\u0112\21\3\2\0\3\3\1\0\5\3\21\0"+
    "\24\3\1\u0113\2\3\2\0\3\3\1\0\3\3\1\u0114"+
    "\1\u0115\21\0\27\3\2\0\3\3\1\0\4\3\1\u0116"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\10\3"+
    "\1\u0117\16\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u0118\12\3\1\247\7\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u0119\4\3\1\u011a\17\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u011b\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u011c\22\3\2\0\3\3"+
    "\1\0\2\3\1\263\2\3\21\0\1\3\1\u011d\2\3"+
    "\1\u011e\1\3\1\u011f\1\3\1\u0120\3\3\1\u0121\1\u0122"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0123"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\7\3\1\u0124"+
    "\17\3\2\0\3\3\1\0\5\3\21\0\22\3\1\u0125"+
    "\4\3\2\0\3\3\1\0\5\3\21\0\13\3\1\u0126"+
    "\6\3\1\103\4\3\2\0\3\3\1\0\5\3\21\0"+
    "\24\3\1\104\2\3\2\0\3\3\1\0\4\3\1\u0127"+
    "\21\0\4\3\1\u0128\3\3\1\u0129\4\3\1\u012a\4\3"+
    "\1\u012b\4\3\2\0\3\3\1\0\5\3\21\0\1\u012c"+
    "\26\3\2\0\3\3\1\0\5\3\21\0\1\u012d\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\22\3\1\104\4\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u012e\4\3"+
    "\1\u012f\14\3\2\0\3\3\1\0\3\3\1\u0130\1\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\20\3"+
    "\1\104\6\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u0131\11\3\2\0\3\3\1\0\5\3\21\0\1\u0132"+
    "\26\3\2\0\3\3\1\0\4\3\1\u0133\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u0114\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u0134\17\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\103\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\u0102\6\3\1\u0135\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u0136\22\3"+
    "\2\0\3\3\1\0\2\3\1\104\2\3\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\16\3\1\103\10\3"+
    "\2\0\3\3\1\0\4\3\1\u010a\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\3\3\1\103\1\u010c\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\264\21\3"+
    "\2\0\3\3\1\0\2\3\1\202\2\3\21\0\1\3"+
    "\1\u0137\25\3\2\0\3\3\1\0\2\3\1\u0138\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0139\12\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u013a\12\3\2\0\3\3\1\0\5\3\21\0\5\3"+
    "\1\u0116\21\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\u013b\11\3\1\134\12\3\2\0\3\3\1\0\5\3"+
    "\21\0\4\3\1\u013c\22\3\2\0\3\3\1\0\4\3"+
    "\1\u013d\21\0\5\3\1\u013e\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u013f\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\336\12\3\4\0\1\u0140\2\0"+
    "\1\u0140\3\0\1\u0141\1\0\1\u0141\47\0\3\3\1\0"+
    "\4\3\1\u0142\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u0143\24\3\2\0\3\3\1\0\3\3"+
    "\1\u0144\1\3\21\0\14\3\1\u0145\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u0146\24\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\103\5\3\1\u0147\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\12\3\1\u0148\14\3"+
    "\2\0\3\3\1\0\5\3\21\0\14\3\1\147\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\336\16\3"+
    "\1\u0149\2\0\3\3\1\0\2\3\1\u014a\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\1\u013a\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0114\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\17\3\1\104\7\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\103\21\3"+
    "\2\0\3\3\1\0\2\3\1\110\2\3\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\17\3\1\u014b\7\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\3\1\u0113\25\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u010a\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\3\1\103\25\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u010a\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u014c\24\3\4\0"+
    "\1\u014d\2\0\1\u014d\3\0\1\u014d\1\0\1\u014d\47\0"+
    "\3\3\1\0\5\3\21\0\12\3\1\u014e\14\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u014f\17\3\2\0"+
    "\3\3\1\0\5\3\21\0\14\3\1\u0150\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u0151\17\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u0152\24\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\u0153\1\3\1\103\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0154\24\3"+
    "\2\0\3\3\1\0\4\3\1\u0155\21\0\27\3\2\0"+
    "\3\3\1\0\4\3\1\u0156\21\0\14\3\1\u0157\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u0158\1\3\1\u0159"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\10\3\1\u015a"+
    "\16\3\2\0\3\3\1\0\5\3\21\0\13\3\1\134"+
    "\13\3\2\0\3\3\1\0\5\3\21\0\1\247\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\103\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\17\3\1\u015b\7\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u015c\3\3"+
    "\1\u015d\10\3\1\103\5\3\2\0\3\3\1\0\5\3"+
    "\1\u015e\20\0\27\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\u0138\16\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u015f\2\3\1\u0160\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u0161\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\103\10\3\1\u0162\11\3\2\0"+
    "\3\3\1\0\4\3\1\u0163\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\u0164\26\3\2\0\3\3\1\0"+
    "\4\3\1\u0165\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\4\3\1\u0166\22\3\2\0\3\3\1\0\5\3"+
    "\21\0\6\3\1\u0167\20\3\2\0\3\3\1\0\2\3"+
    "\1\u014f\2\3\21\0\2\3\1\103\24\3\2\0\3\3"+
    "\1\0\2\3\1\u0168\2\3\21\0\14\3\1\u0169\12\3"+
    "\2\0\3\3\1\0\5\3\21\0\17\3\1\u016a\2\3"+
    "\1\103\4\3\2\0\1\3\1\u016b\1\3\1\0\5\3"+
    "\21\0\27\3\2\0\3\3\1\0\2\3\1\103\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\u016c\24\3\2\0\3\3\1\0\5\3\21\0\26\3"+
    "\1\u016d\2\0\3\3\1\0\5\3\21\0\15\3\1\u016e"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\1\u016f\26\3"+
    "\2\0\3\3\1\0\4\3\1\103\21\0\1\3\1\u0170"+
    "\25\3\2\0\3\3\1\0\3\3\1\u0171\1\3\21\0"+
    "\27\3\2\0\3\3\1\0\4\3\1\u0172\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\u0173\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0174\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u0175\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0176\4\3"+
    "\1\u0177\17\3\2\0\3\3\1\0\4\3\1\u0178\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\10\3\1\u0179"+
    "\4\3\1\103\1\3\1\u017a\7\3\2\0\3\3\1\0"+
    "\5\3\21\0\12\3\1\226\14\3\2\0\3\3\1\0"+
    "\4\3\1\u017b\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\4\3\1\u017c\22\3\2\0\3\3\1\0\5\3"+
    "\21\0\10\3\1\273\16\3\2\0\3\3\1\0\5\3"+
    "\21\0\10\3\1\u017d\16\3\2\0\3\3\1\0\5\3"+
    "\21\0\6\3\1\u0156\1\3\1\u017e\4\3\1\u017f\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\u0180\16\3"+
    "\2\0\3\3\1\0\2\3\1\226\2\3\21\0\7\3"+
    "\1\u0114\12\3\1\u0181\1\3\1\u0182\2\3\2\0\3\3"+
    "\1\0\5\3\21\0\14\3\1\105\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\7\3\1\226\17\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u0114\3\3\1\u011f\20\3"+
    "\2\0\3\3\1\0\2\3\1\u0183\2\3\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0184\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\u0185\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u0186\21\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u0187\7\3"+
    "\1\u0188\11\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u0189\11\3\2\0\3\3\1\0\5\3\21\0\1\u018a"+
    "\26\3\2\0\3\3\1\0\5\3\21\0\2\3\1\103"+
    "\1\3\1\103\3\3\1\u018b\16\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\u0154\26\3\2\0\3\3\1\0\5\3"+
    "\21\0\15\3\1\u0146\11\3\2\0\3\3\1\0\2\3"+
    "\1\u018c\2\3\21\0\4\3\1\u018d\10\3\1\u018e\6\3"+
    "\1\u018f\2\3\2\0\3\3\1\0\2\3\1\226\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\3\3\1\u0190\1\u0191"+
    "\21\0\27\3\2\0\3\3\1\0\4\3\1\u0192\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\5\3\1\u0193"+
    "\21\3\2\0\3\3\1\0\5\3\21\0\6\3\1\u0194"+
    "\13\3\1\u0195\4\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\u0196\21\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\u0197\16\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\105\16\3\2\0\3\3\1\0\4\3\1\103"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\1\226"+
    "\26\3\2\0\3\3\1\0\5\3\21\0\10\3\1\u011b"+
    "\16\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0198"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\22\3\1\103"+
    "\4\3\2\0\3\3\1\0\2\3\1\272\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0199"+
    "\1\3\1\u019a\22\3\2\0\3\3\1\0\4\3\1\u019b"+
    "\21\0\2\3\1\103\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\15\3\1\226\11\3\2\0\3\3\1\0\5\3"+
    "\21\0\14\3\1\266\12\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\3\1\u019c\25\3\2\0\3\3\1\0\5\3"+
    "\21\0\21\3\1\103\5\3\2\0\3\3\1\0\5\3"+
    "\21\0\21\3\1\u0135\5\3\2\0\3\3\1\0\5\3"+
    "\21\0\23\3\1\u019d\3\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\u0116\26\3\2\0\3\3\1\0\5\3\21\0"+
    "\23\3\1\121\3\3\2\0\3\3\1\0\5\3\21\0"+
    "\12\3\1\103\14\3\2\0\1\3\1\u019e\1\3\1\0"+
    "\5\3\21\0\27\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u019f\11\3\1\u01a0\12\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u01a1\4\3\1\103\17\3\2\0"+
    "\3\3\1\0\3\3\1\226\1\3\21\0\27\3\2\0"+
    "\3\3\1\0\4\3\1\u01a2\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u01a3\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u01a4\24\3\2\0\3\3"+
    "\1\0\2\3\1\u01a5\2\3\21\0\27\3\2\0\3\3"+
    "\1\0\4\3\1\u01a6\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u01a7\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\15\3\1\u01a8\11\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u01a9\24\3\2\0\3\3\1\0"+
    "\3\3\1\u01aa\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\3\3\1\u01ab\1\3\21\0\4\3\1\301\2\3\1\u010f"+
    "\17\3\2\0\3\3\1\0\5\3\21\0\15\3\1\u01ac"+
    "\11\3\2\0\3\3\1\0\5\3\21\0\1\u01ad\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u01ae\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\104\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\233\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u01af\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u01b0\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u01b1\22\3"+
    "\2\0\3\3\1\0\4\3\1\u01b2\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u01b3\5\3\1\u01b4"+
    "\4\3\1\u01b5\5\3\1\u01b6\3\3\2\0\3\3\1\0"+
    "\5\3\21\0\13\3\1\273\13\3\2\0\3\3\1\0"+
    "\3\3\1\304\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\7\3\1\103\17\3\2\0\3\3\1\0"+
    "\3\3\1\134\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\3\3\1\u0154\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\u01b7\22\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\u01b8\22\3\2\0\3\3\1\0"+
    "\2\3\1\u01b9\2\3\21\0\5\3\1\104\21\3\2\0"+
    "\3\3\1\0\5\3\21\0\12\3\1\u01ba\14\3\2\0"+
    "\3\3\1\0\3\3\1\u01bb\1\3\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\10\3\1\60\5\3\1\u0113"+
    "\10\3\2\0\3\3\1\0\5\3\21\0\23\3\1\103"+
    "\3\3\4\0\1\u0140\2\0\1\u0140\55\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\u01bc\12\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\u017b\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\273\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\7\3\1\u01bd\17\3\2\0\3\3\1\0"+
    "\5\3\21\0\15\3\1\103\11\3\2\0\3\3\1\0"+
    "\4\3\1\u01be\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u01bf\24\3\2\0\3\3\1\0\3\3"+
    "\1\104\1\3\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\7\3\1\u01c0\17\3\2\0\3\3\1\0\3\3"+
    "\1\u01c1\1\3\21\0\27\3\2\0\3\3\1\0\2\3"+
    "\1\u0136\2\3\21\0\27\3\4\0\1\u014d\2\0\1\u014d"+
    "\55\0\3\3\1\0\5\3\21\0\7\3\1\u01c2\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\377\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\336\17\3"+
    "\2\0\3\3\1\0\4\3\1\u0194\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\5\3\1\105\21\3\2\0"+
    "\3\3\1\0\5\3\21\0\13\3\1\u01c3\13\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\104\22\3\2\0"+
    "\3\3\1\0\4\3\1\u01c4\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\u01c5\26\3\2\0\3\3\1\0"+
    "\5\3\21\0\22\3\1\273\4\3\2\0\3\3\1\0"+
    "\3\3\1\u01c6\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\u01c7\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\u01c8\21\3\2\0\3\3\1\0"+
    "\2\3\1\u01c9\2\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\u01ca\6\3\1\u01cb\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u01cc\17\3\36\0"+
    "\1\u01cd\26\0\3\3\1\0\5\3\21\0\5\3\1\u01bd"+
    "\21\3\2\0\3\3\1\0\5\3\21\0\1\u01a9\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\6\3\1\u01ce\20\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u0146\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\24\3\1\u010a\2\3"+
    "\2\0\3\3\1\0\5\3\21\0\6\3\1\104\20\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u01cf\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\u01d0\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\u01d1\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\u01d2\11\3"+
    "\2\0\3\3\1\0\4\3\1\u0113\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\17\3\1\263\7\3\2\0"+
    "\3\3\1\0\5\3\21\0\10\3\1\u01d3\16\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u01d4\2\3\1\u01d5"+
    "\6\3\2\0\3\3\1\0\3\3\1\273\1\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u01b3"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u01d6"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u01d7"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\5\3\1\336"+
    "\21\3\2\0\3\3\1\0\5\3\21\0\14\3\1\u01d8"+
    "\12\3\2\0\3\3\1\0\2\3\1\u01d9\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\5\3\1\u01da"+
    "\21\3\2\0\3\3\1\0\5\3\21\0\5\3\1\u01db"+
    "\1\3\1\u01c5\17\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\226\21\3\2\0\3\3\1\0\5\3\21\0"+
    "\21\3\1\104\5\3\2\0\3\3\1\0\5\3\21\0"+
    "\13\3\1\u01dc\13\3\2\0\3\3\1\0\5\3\21\0"+
    "\7\3\1\u01dd\17\3\2\0\3\3\1\0\3\3\1\u01de"+
    "\1\3\21\0\27\3\2\0\3\3\1\0\5\3\21\0"+
    "\14\3\1\315\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\14\3\1\273\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u0102\24\3\2\0\3\3\1\0\5\3\21\0"+
    "\14\3\1\u01df\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u01e0\24\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u01e1\24\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\u01e2\26\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u01e3\12\3\2\0\3\3\1\0\5\3\21\0\1\3"+
    "\1\u01e4\1\3\1\u01e5\1\3\1\u01e6\20\3\1\u01e7\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\u01e8\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u0162\24\3\2\0"+
    "\3\3\1\0\4\3\1\u01e9\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u01ea\24\3\2\0\3\3"+
    "\1\0\5\3\21\0\7\3\1\u0114\17\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u01eb\22\3\2\0\3\3"+
    "\1\0\4\3\1\u01ec\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\u01ed\26\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u01ee\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\u01ef\13\3\1\u01f0\12\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\u01f1\22\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u0176\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\22\3\1\336\4\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\u01f2\26\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u01f3\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u01f4\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\14\3\1\226\12\3\2\0\1\3\1\u019e\1\3"+
    "\1\0\5\3\21\0\1\u01f5\26\3\2\0\3\3\1\0"+
    "\5\3\21\0\21\3\1\u01f6\5\3\2\0\3\3\1\0"+
    "\5\3\21\0\4\3\1\u01f7\22\3\2\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\u01f8\12\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\142\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\11\3\1\u01f9\15\3\2\0\3\3\1\0"+
    "\4\3\1\u01fa\21\0\27\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\131\24\3\2\0\3\3\1\0\4\3"+
    "\1\u01fb\21\0\27\3\2\0\3\3\1\0\5\3\21\0"+
    "\3\3\1\103\23\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\u01fc\16\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\u01fd\11\3\1\263\7\3\2\0\3\3\1\0"+
    "\3\3\1\u01fe\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\u01ff\12\3\2\0\3\3\1\0"+
    "\2\3\1\u0200\2\3\21\0\5\3\1\226\21\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\u0201\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\105\26\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\3\1\u0202\25\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u0203\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\10\3\1\226\16\3\2\0\3\3"+
    "\1\0\5\3\21\0\15\3\1\263\11\3\2\0\3\3"+
    "\1\0\5\3\21\0\5\3\1\u0204\21\3\2\0\3\3"+
    "\1\0\5\3\21\0\14\3\1\u0205\12\3\2\0\3\3"+
    "\1\0\2\3\1\u0206\2\3\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\14\3\1\u0207\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\22\3\1\u0208\4\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\3\1\u014a\25\3\2\0\3\3"+
    "\1\0\5\3\21\0\2\3\1\u0209\24\3\2\0\3\3"+
    "\1\0\4\3\1\u020a\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\5\3\1\u020b\21\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\103\6\3\1\u01fe\17\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\377\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\u020c\26\3\2\0\3\3\1\0"+
    "\5\3\21\0\11\3\1\u0188\15\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u0170\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u020d\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\14\3\1\u020e\12\3\2\0\3\3\1\0"+
    "\5\3\21\0\2\3\1\u020f\24\3\2\0\3\3\1\0"+
    "\5\3\21\0\11\3\1\103\15\3\2\0\3\3\1\0"+
    "\2\3\1\273\2\3\21\0\27\3\2\0\3\3\1\0"+
    "\3\3\1\374\1\3\21\0\27\3\2\0\3\3\1\0"+
    "\5\3\21\0\10\3\1\u0116\16\3\2\0\3\3\1\0"+
    "\5\3\21\0\23\3\1\336\3\3\2\0\3\3\1\0"+
    "\5\3\21\0\1\264\26\3\2\0\3\3\1\0\5\3"+
    "\21\0\5\3\1\u0210\21\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\121\26\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\104\21\3\2\0\3\3\1\0\4\3\1\226"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\5\3"+
    "\1\u0211\21\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0212\12\3\2\0\3\3\1\0\5\3\21\0\7\3"+
    "\1\u0207\17\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0213\12\3\2\0\3\3\1\0\2\3\1\u01a9\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\2\3\1\u0214\2\3"+
    "\21\0\27\3\37\0\1\u0215\25\0\3\3\1\0\5\3"+
    "\21\0\4\3\1\u0216\22\3\2\0\3\3\1\0\5\3"+
    "\21\0\15\3\1\u0217\11\3\2\0\3\3\1\0\5\3"+
    "\21\0\14\3\1\220\12\3\2\0\3\3\1\0\5\3"+
    "\21\0\5\3\1\u0181\21\3\2\0\3\3\1\0\4\3"+
    "\1\u0191\21\0\1\u0109\26\3\2\0\3\3\1\0\5\3"+
    "\21\0\7\3\1\u0218\17\3\2\0\3\3\1\0\5\3"+
    "\21\0\4\3\1\u0219\22\3\2\0\3\3\1\0\5\3"+
    "\21\0\7\3\1\u021a\17\3\2\0\3\3\1\0\5\3"+
    "\21\0\14\3\1\211\12\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\56\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\10\3\1\u01a6\16\3\2\0\3\3\1\0\5\3"+
    "\21\0\11\3\1\u021b\15\3\2\0\3\3\1\0\5\3"+
    "\21\0\2\3\1\u021c\24\3\2\0\3\3\1\0\5\3"+
    "\21\0\14\3\1\u01a9\12\3\2\0\3\3\1\0\5\3"+
    "\21\0\1\u01bf\26\3\2\0\3\3\1\0\3\3\1\u0102"+
    "\1\3\21\0\27\3\2\0\3\3\1\0\5\3\21\0"+
    "\14\3\1\u021d\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\15\3\1\301\11\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\211\21\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\3\1\u021e\25\3\2\0\3\3\1\0\5\3\21\0"+
    "\5\3\1\232\21\3\2\0\3\3\1\0\4\3\1\u021f"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\1\u0220"+
    "\26\3\2\0\3\3\1\0\5\3\21\0\22\3\1\u010a"+
    "\4\3\2\0\3\3\1\0\5\3\21\0\7\3\1\u0221"+
    "\17\3\2\0\3\3\1\0\3\3\1\u0222\1\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\1\u0223\26\3"+
    "\2\0\3\3\1\0\2\3\1\u0224\2\3\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u0225\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\7\3\1\110\17\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\3\1\u0226\25\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\u01ce\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\14\3\1\u0227\12\3"+
    "\2\0\3\3\1\0\2\3\1\u0149\2\3\21\0\27\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u0228\21\3"+
    "\2\0\3\3\1\0\5\3\21\0\4\3\1\u0229\22\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\u012d\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\15\3\1\u022a\11\3"+
    "\2\0\3\3\1\0\5\3\21\0\10\3\1\u022b\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\6\3\1\u022c\20\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\u022d\24\3"+
    "\2\0\3\3\1\0\5\3\21\0\17\3\1\336\7\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u022e\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u01bf\17\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u022f\24\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\u0230\26\3\2\0\3\3"+
    "\1\0\5\3\21\0\15\3\1\u0127\6\3\1\273\2\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\3\1\104\25\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u0231\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u0232\11\3\2\0"+
    "\3\3\1\0\5\3\21\0\14\3\1\u0233\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\14\3\1\377\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\5\3\1\u0113\21\3\2\0"+
    "\3\3\1\0\5\3\21\0\14\3\1\u0234\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\7\3\1\u0235\17\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\u0236\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u0237\11\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\103\26\3\2\0\3\3"+
    "\1\0\5\3\21\0\22\3\1\u0238\4\3\2\0\3\3"+
    "\1\0\5\3\21\0\14\3\1\u0102\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\5\3\1\u0188\21\3\2\0\3\3"+
    "\1\0\5\3\21\0\5\3\1\u0239\21\3\2\0\3\3"+
    "\1\0\5\3\21\0\24\3\1\263\2\3\2\0\3\3"+
    "\1\0\2\3\1\u023a\2\3\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\14\3\1\u023b\12\3\2\0\3\3"+
    "\1\0\5\3\21\0\1\313\1\3\1\272\24\3\2\0"+
    "\3\3\1\0\5\3\21\0\6\3\1\u0230\4\3\1\104"+
    "\13\3\2\0\3\3\1\0\5\3\21\0\13\3\1\u023c"+
    "\13\3\2\0\3\3\1\0\2\3\1\u0127\2\3\21\0"+
    "\27\3\36\0\1\u023d\26\0\3\3\1\0\5\3\21\0"+
    "\1\u023e\26\3\2\0\3\3\1\0\2\3\1\u023f\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\1\111"+
    "\26\3\2\0\3\3\1\0\2\3\1\u0240\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\14\3\1\u0241"+
    "\12\3\2\0\3\3\1\0\2\3\1\u0242\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\1\3\1\u0243"+
    "\25\3\2\0\3\3\1\0\3\3\1\u01c5\1\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0244"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0245"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\23\3\1\u0246"+
    "\3\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u01e2"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\6\3\1\u0146"+
    "\20\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0247"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\5\3\1\u0248"+
    "\21\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0249"+
    "\24\3\2\0\3\3\1\0\2\3\1\u024a\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\1\u024b\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\2\3\1\103\11\3"+
    "\1\u0150\12\3\2\0\3\3\1\0\5\3\21\0\6\3"+
    "\1\u024c\20\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u024d\22\3\2\0\3\3\1\0\5\3\21\0\7\3"+
    "\1\u020a\17\3\2\0\3\3\1\0\5\3\21\0\3\3"+
    "\1\u024e\23\3\2\0\3\3\1\0\5\3\21\0\10\3"+
    "\1\u0230\16\3\2\0\3\3\1\0\2\3\1\u024f\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u0188\22\3\2\0\3\3\1\0\4\3\1\u0250\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\14\3\1\u016f"+
    "\12\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0251"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0252"+
    "\22\3\2\0\3\3\1\0\2\3\1\u0253\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\14\3\1\u0254"+
    "\12\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0255"+
    "\22\3\2\0\1\3\1\u0256\1\3\1\0\5\3\21\0"+
    "\27\3\2\0\3\3\1\0\2\3\1\u0113\2\3\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\17\3\1\u0257"+
    "\7\3\2\0\3\3\1\0\5\3\21\0\20\3\1\u01a6"+
    "\6\3\2\0\3\3\1\0\3\3\1\u0258\1\3\21\0"+
    "\27\3\44\0\1\u0259\20\0\3\3\1\0\5\3\21\0"+
    "\22\3\1\u025a\4\3\2\0\3\3\1\0\5\3\21\0"+
    "\24\3\1\u018f\2\3\2\0\3\3\1\0\5\3\21\0"+
    "\2\3\1\u025b\24\3\2\0\3\3\1\0\5\3\21\0"+
    "\17\3\1\u021e\7\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\254\16\3\2\0\3\3\1\0\5\3\21\0"+
    "\10\3\1\u025c\16\3\2\0\3\3\1\0\5\3\21\0"+
    "\17\3\1\254\7\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\u025d\26\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u025e\11\3\2\0\1\3\1\u025f\1\3\1\0\5\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\272\24\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u0260\11\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0261\12\3\2\0\3\3\1\0\5\3\21\0\7\3"+
    "\1\u0262\17\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\u0263\24\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u0260\22\3\2\0\3\3\1\0\5\3\21\0\17\3"+
    "\1\202\7\3\2\0\3\3\1\0\5\3\21\0\16\3"+
    "\1\u0264\10\3\2\0\3\3\1\0\5\3\21\0\16\3"+
    "\1\u0265\10\3\2\0\3\3\1\0\5\3\21\0\10\3"+
    "\1\u0266\16\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0267\12\3\2\0\3\3\1\0\5\3\21\0\5\3"+
    "\1\u0268\21\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u0248\22\3\2\0\3\3\1\0\5\3\21\0\6\3"+
    "\1\134\20\3\2\0\1\3\1\u0269\1\3\1\0\5\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\7\3"+
    "\1\u010a\17\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u026a\11\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\226\24\3\2\0\3\3\1\0\3\3\1\u01aa\1\3"+
    "\21\0\1\3\1\377\2\3\1\u026b\22\3\2\0\3\3"+
    "\1\0\5\3\21\0\4\3\1\u026c\22\3\2\0\3\3"+
    "\1\0\2\3\1\u026d\2\3\21\0\27\3\2\0\3\3"+
    "\1\0\2\3\1\270\2\3\21\0\27\3\2\0\3\3"+
    "\1\0\5\3\21\0\5\3\1\u011c\21\3\2\0\1\3"+
    "\1\u026e\1\3\1\0\5\3\21\0\10\3\1\u025c\16\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u026f\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u0270\3\3\1\u0271"+
    "\5\3\2\0\3\3\1\0\5\3\21\0\10\3\1\u0146"+
    "\16\3\2\0\3\3\1\0\5\3\21\0\7\3\1\u0135"+
    "\17\3\2\0\3\3\1\0\5\3\21\0\12\3\1\u0272"+
    "\7\3\1\u0273\4\3\2\0\3\3\1\0\5\3\21\0"+
    "\7\3\1\u0274\17\3\2\0\3\3\1\0\5\3\21\0"+
    "\14\3\1\u0275\12\3\2\0\3\3\1\0\5\3\21\0"+
    "\1\313\26\3\2\0\3\3\1\0\5\3\21\0\4\3"+
    "\1\u020f\22\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0276\12\3\2\0\3\3\1\0\3\3\1\u0277\1\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0278\12\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\u0279\24\3\2\0\3\3\1\0\5\3\21\0\7\3"+
    "\1\u027a\17\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u027b\12\3\2\0\3\3\1\0\3\3\1\u027c\1\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\22\3"+
    "\1\u027d\4\3\2\0\3\3\1\0\2\3\1\u027e\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\1\3"+
    "\1\u0195\25\3\2\0\3\3\1\0\5\3\21\0\22\3"+
    "\1\u027f\4\3\2\0\3\3\1\0\5\3\21\0\16\3"+
    "\1\u0280\10\3\2\0\3\3\1\0\3\3\1\u0114\1\3"+
    "\21\0\27\3\2\0\3\3\1\0\2\3\1\u0194\2\3"+
    "\21\0\27\3\2\0\3\3\1\0\5\3\21\0\5\3"+
    "\1\u012d\21\3\2\0\3\3\1\0\5\3\21\0\2\3"+
    "\1\u0281\24\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u018f\11\3\2\0\3\3\1\0\5\3\21\0\14\3"+
    "\1\u0282\12\3\2\0\3\3\1\0\5\3\21\0\6\3"+
    "\1\u0283\20\3\2\0\3\3\1\0\5\3\21\0\15\3"+
    "\1\u01d4\11\3\2\0\3\3\1\0\4\3\1\u0284\21\0"+
    "\27\3\2\0\3\3\1\0\5\3\21\0\12\3\1\u0285"+
    "\14\3\2\0\3\3\1\0\5\3\21\0\1\u0286\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u0287\21\3"+
    "\2\0\3\3\1\0\5\3\21\0\5\3\1\u0288\21\3"+
    "\2\0\3\3\1\0\5\3\21\0\1\u0289\26\3\2\0"+
    "\3\3\1\0\5\3\21\0\14\3\1\u028a\12\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u028b\11\3\2\0"+
    "\3\3\1\0\5\3\21\0\4\3\1\u028c\22\3\2\0"+
    "\3\3\1\0\5\3\21\0\2\3\1\u028d\24\3\2\0"+
    "\3\3\1\0\5\3\21\0\16\3\1\u028e\10\3\2\0"+
    "\3\3\1\0\5\3\21\0\1\3\1\u028f\2\3\1\u026c"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\2\3\1\u0290"+
    "\24\3\2\0\3\3\1\0\5\3\21\0\4\3\1\u0291"+
    "\22\3\2\0\3\3\1\0\5\3\21\0\1\u0292\26\3"+
    "\2\0\3\3\1\0\5\3\21\0\14\3\1\u0293\12\3"+
    "\2\0\3\3\1\0\4\3\1\u0294\21\0\27\3\2\0"+
    "\3\3\1\0\5\3\21\0\15\3\1\u028d\11\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\52\1\1\0\1\1\1\0"+
    "\2\1\1\0\200\1\1\11\237\1\1\0\156\1\1\0"+
    "\107\1\1\0\47\1\1\0\33\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 13: break;
          case 2: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn +1 ; UltimaColumna=yycolumn+yylength(); return Identificador;
            } 
            // fall through
          case 14: break;
          case 3: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Int;
            } 
            // fall through
          case 15: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 16: break;
          case 5: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Bit;
            } 
            // fall through
          case 17: break;
          case 6: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Simbolo;
            } 
            // fall through
          case 18: break;
          case 7: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Float;
            } 
            // fall through
          case 19: break;
          case 8: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn +1; UltimaColumna=yycolumn+yylength(); return Palabra_Reservada;
            } 
            // fall through
          case 20: break;
          case 9: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioSimple;
            } 
            // fall through
          case 21: break;
          case 10: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return FloatError;
            } 
            // fall through
          case 22: break;
          case 11: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return StringError;
            } 
            // fall through
          case 23: break;
          case 12: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return String;
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
