/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import static AnalizadorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/Compiladores/AL-xicoDeSQL/AL_SQL/src/AnalizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\35\1\65\1\65\1\33\22\0\1\4\1\21\1\0"+
    "\1\32\1\0\1\17\1\22\1\34\1\26\1\27\1\15\1\14\1\4"+
    "\1\12\1\13\1\16\2\6\10\3\1\0\1\17\1\21\1\20\1\21"+
    "\1\0\1\17\1\36\1\51\1\46\1\37\1\40\1\47\1\55\1\50"+
    "\1\52\1\63\1\57\1\11\1\60\1\7\1\45\1\44\1\64\1\43"+
    "\1\53\1\42\1\10\1\62\1\61\1\41\1\54\1\56\1\24\1\0"+
    "\1\25\1\0\1\2\1\0\4\1\1\5\25\1\1\30\1\23\1\31"+
    "\7\0\1\65\u1fa2\0\1\65\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\2\6\6"+
    "\2\1\4\6\1\1\25\2\1\7\3\2\1\10\10\2"+
    "\1\0\1\11\1\0\1\12\1\13\2\0\1\14\1\15"+
    "\4\2\1\10\3\2\1\10\20\2\1\10\17\2\1\10"+
    "\1\2\1\10\2\2\1\10\26\2\1\10\1\2\1\10"+
    "\21\2\1\10\17\2\1\12\14\2\1\10\7\2\1\11"+
    "\1\12\3\0\1\2\1\10\7\2\1\10\7\2\1\10"+
    "\50\2\1\10\26\2\1\10\13\2\1\10\1\2\1\10"+
    "\11\2\1\10\12\2\1\10\4\2\1\10\7\2\1\7"+
    "\1\12\1\10\12\2\1\12\1\16\14\2\1\10\3\2"+
    "\1\0\11\2\1\10\3\2\1\10\3\2\1\10\17\2"+
    "\1\10\2\2\1\10\2\2\1\10\17\2\1\10\42\2"+
    "\2\10\22\2\1\0\1\2\1\10\46\2\1\10\30\2"+
    "\1\10\5\2\1\0\1\10\46\2\1\0\11\2\1\10"+
    "\1\2\1\10\11\2\1\10\5\2\1\10\6\2\1\10"+
    "\3\2\1\10\34\2\1\10\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\242\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\66\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u01e6\0\u0bd0\0\u0c06\0\u0402\0\u0c3c\0\u0c72"+
    "\0\u0c3c\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\154\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\u0c06\0\u2772\0\u0c72\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u11b8\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234"+
    "\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4"+
    "\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594"+
    "\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744"+
    "\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4"+
    "\0\u392a\0\u2556\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e"+
    "\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e"+
    "\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce"+
    "\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e"+
    "\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e"+
    "\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u4272\0\u42a8"+
    "\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458"+
    "\0\u448e\0\u44c4\0\u44fa\0\66\0\u4530\0\u4566\0\u459c\0\u45d2"+
    "\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782"+
    "\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932"+
    "\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2"+
    "\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92"+
    "\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42"+
    "\0\u4e78\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2"+
    "\0\u5028\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2"+
    "\0\u51d8\0\u520e\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352"+
    "\0\u5388\0\u53be\0\u40c2\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc"+
    "\0\u5502\0\u5538\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c"+
    "\0\u56b2\0\u56e8\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c"+
    "\0\u5862\0\u5898\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc"+
    "\0\u5a12\0\u5a48\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c"+
    "\0\u5d72\0\u5da8\0\u27de\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066"+
    "\0\u609c\0\u60d2\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216"+
    "\0\u624c\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390\0\u63c6"+
    "\0\u63fc\0\u6432\0\u6468\0\u649e\0\u64d4\0\u650a\0\u3ada\0\u6540"+
    "\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e\0\u6684\0\u66ba\0\u66f0"+
    "\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0"+
    "\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50"+
    "\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u6b5e\0\u6b94\0\u6bca\0\u6c00"+
    "\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e\0\u4380\0\u6d44\0\u6d7a"+
    "\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u2814\0\u6e88\0\u6ebe\0\u6ef4"+
    "\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e\0\u70a4"+
    "\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u7254"+
    "\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce\0\u7404"+
    "\0\u743a\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e\0\u75b4"+
    "\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e\0\u7764"+
    "\0\u779a\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de\0\u2664"+
    "\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec\0\u7a22\0\u1518\0\u7a58"+
    "\0\u7a8e\0\u757e\0\u7ac4\0\u7afa\0\u3d62\0\u7b30\0\u7b66\0\66"+
    "\0\u7b9c\0\u7bd2\0\u7c08\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u7d16"+
    "\0\u7d4c\0\u7d82\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6"+
    "\0\u7efc\0\u7f32\0\u7f68\0\u7f9e\0\u7fd4\0\u800a\0\u8040\0\u8076"+
    "\0\u80ac\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0\0\u8226"+
    "\0\u825c\0\u8292\0\u82c8\0\u82fe\0\u8334\0\u836a\0\u83a0\0\u83d6"+
    "\0\u840c\0\u8442\0\u8478\0\u84ae\0\u84e4\0\u851a\0\u8550\0\u8586"+
    "\0\u85bc\0\u85f2\0\u8628\0\u7ce0\0\u865e\0\u8694\0\u86ca\0\u8700"+
    "\0\u8736\0\u876c\0\u87a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\2\17\1\20\1\21\1\22\1\15\1\23\1\15\1\24"+
    "\1\15\1\25\1\5\1\26\1\5\1\27\1\30\1\31"+
    "\1\3\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\3\70\0\3\3\1\0\5\3"+
    "\24\0\27\3\4\0\1\4\2\0\1\4\4\0\1\54"+
    "\56\0\1\5\26\0\1\5\1\0\1\5\31\0\3\3"+
    "\1\0\3\3\1\55\1\3\24\0\1\56\1\3\1\57"+
    "\4\3\1\60\1\61\16\3\2\0\3\3\1\0\2\3"+
    "\1\62\2\3\24\0\6\3\1\63\6\3\1\64\11\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\65\1\3\1\66"+
    "\4\3\1\67\4\3\1\70\12\3\4\0\1\71\2\0"+
    "\1\71\3\0\1\72\1\73\55\0\1\74\2\0\1\74"+
    "\62\0\1\71\2\0\1\71\4\0\1\73\67\0\1\75"+
    "\70\0\1\15\67\0\1\15\66\0\1\15\67\0\1\15"+
    "\67\0\1\15\67\0\1\15\66\0\1\15\33\0\33\76"+
    "\1\77\1\100\1\101\30\76\1\0\3\3\1\0\2\3"+
    "\1\102\1\103\1\104\24\0\1\3\1\105\2\3\1\106"+
    "\1\107\2\3\1\110\2\3\1\111\1\3\1\112\6\3"+
    "\1\113\2\3\2\0\3\3\1\0\3\3\1\114\1\3"+
    "\24\0\1\115\1\3\1\116\2\3\1\117\1\3\1\120"+
    "\3\3\1\121\1\122\12\3\2\0\3\3\1\0\2\3"+
    "\1\123\1\3\1\124\24\0\3\3\1\125\1\3\1\126"+
    "\7\3\1\127\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\130\1\3\1\131\2\3\1\132\1\3\1\133\2\3"+
    "\1\134\1\3\1\135\1\136\11\3\2\0\3\3\1\0"+
    "\3\3\1\137\1\3\24\0\1\140\1\3\1\141\4\3"+
    "\1\142\4\3\1\143\12\3\2\0\3\3\1\0\3\3"+
    "\1\144\1\145\24\0\1\146\1\3\1\147\2\3\1\150"+
    "\1\3\1\151\4\3\1\152\12\3\2\0\3\3\1\0"+
    "\2\3\1\153\1\154\1\3\24\0\5\3\1\155\1\156"+
    "\1\3\1\157\1\160\12\3\1\161\2\3\2\0\3\3"+
    "\1\0\3\3\1\162\1\163\24\0\1\164\4\3\1\165"+
    "\1\3\1\166\2\3\1\167\14\3\2\0\3\3\1\0"+
    "\3\3\1\170\1\171\24\0\1\172\1\3\1\173\2\3"+
    "\1\174\1\3\1\175\4\3\1\176\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\177\6\3\1\200\17\3\2\0"+
    "\3\3\1\0\3\3\1\201\1\3\24\0\1\202\1\3"+
    "\1\203\2\3\1\204\1\3\1\205\4\3\1\206\1\3"+
    "\1\106\10\3\2\0\3\3\1\0\2\3\1\207\2\3"+
    "\24\0\1\3\1\210\7\3\1\106\3\3\1\211\4\3"+
    "\1\212\4\3\2\0\3\3\1\0\3\3\1\213\1\3"+
    "\24\0\1\214\1\3\1\215\1\3\1\216\1\3\1\217"+
    "\1\220\1\221\1\3\1\222\1\3\1\223\1\3\1\224"+
    "\3\3\1\225\3\3\1\226\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\227\24\3\2\0\3\3\1\0\4\3"+
    "\1\230\24\0\2\3\1\231\2\3\1\232\1\3\1\233"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\7\3\1\234"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\2\3\1\235"+
    "\11\3\1\236\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\237\1\3\1\240\4\3\1\241\4\3\1\242\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\243\4\3\1\244"+
    "\1\3\1\245\2\3\1\246\1\3\1\247\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\250\13\3\1\251\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\252\17\3"+
    "\4\0\1\54\1\0\1\253\1\54\31\0\1\253\26\0"+
    "\3\3\1\0\4\3\1\254\24\0\22\3\1\255\4\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\256\15\3"+
    "\1\257\4\3\2\0\3\3\1\0\5\3\24\0\3\3"+
    "\1\231\23\3\2\0\3\3\1\0\2\3\1\260\2\3"+
    "\24\0\4\3\1\106\3\3\1\261\16\3\2\0\3\3"+
    "\1\0\5\3\24\0\12\3\1\227\14\3\2\0\3\3"+
    "\1\0\5\3\24\0\6\3\1\262\5\3\1\263\4\3"+
    "\1\264\5\3\2\0\3\3\1\0\5\3\24\0\1\3"+
    "\1\265\4\3\1\266\20\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\267\1\3\1\270\11\3\1\271\12\3\2\0"+
    "\3\3\1\0\2\3\1\272\2\3\24\0\15\3\1\231"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\1\273\10\3"+
    "\1\231\12\3\1\274\2\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\275\7\3\1\276\12\3\1\266\3\3\2\0"+
    "\3\3\1\0\2\3\1\277\2\3\24\0\21\3\1\107"+
    "\5\3\4\0\1\71\2\0\1\71\4\0\1\54\52\0"+
    "\33\72\1\300\1\72\1\300\30\72\3\0\1\74\1\0"+
    "\1\301\1\74\31\0\1\301\25\0\15\302\1\303\50\302"+
    "\34\77\1\0\1\101\30\77\33\304\1\0\1\100\1\0"+
    "\30\304\1\0\3\3\1\0\5\3\24\0\1\3\1\106"+
    "\14\3\1\106\10\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\305\22\3\2\0\3\3\1\0\4\3\1\306"+
    "\24\0\4\3\1\266\22\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\106\25\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\106\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\307\22\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\310\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\10\3\1\106\4\3\1\311\11\3\2\0\3\3\1\0"+
    "\5\3\24\0\17\3\1\106\7\3\2\0\3\3\1\0"+
    "\5\3\24\0\22\3\1\312\4\3\2\0\3\3\1\0"+
    "\5\3\24\0\4\3\1\313\11\3\1\106\10\3\2\0"+
    "\3\3\1\0\2\3\1\235\1\3\1\314\24\0\1\315"+
    "\7\3\1\316\1\317\3\3\1\320\11\3\2\0\3\3"+
    "\1\0\5\3\24\0\7\3\1\312\17\3\2\0\3\3"+
    "\1\0\3\3\1\321\1\3\24\0\22\3\1\322\4\3"+
    "\2\0\3\3\1\0\5\3\24\0\10\3\1\323\16\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\324\14\3\1\325"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\1\3\1\326"+
    "\25\3\2\0\3\3\1\0\5\3\24\0\15\3\1\107"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\2\3\1\327"+
    "\1\3\1\330\3\3\1\331\3\3\1\332\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\5\3\1\333\21\3\2\0"+
    "\3\3\1\0\5\3\24\0\10\3\1\334\16\3\2\0"+
    "\3\3\1\0\5\3\24\0\13\3\1\335\13\3\2\0"+
    "\3\3\1\0\5\3\24\0\3\3\1\336\16\3\1\337"+
    "\4\3\2\0\3\3\1\0\3\3\1\340\1\3\24\0"+
    "\1\341\13\3\1\342\1\3\1\343\10\3\2\0\3\3"+
    "\1\0\5\3\24\0\6\3\1\106\20\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\344\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\22\3\1\345\4\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\346\24\3\2\0\3\3"+
    "\1\0\4\3\1\107\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\347\12\3\2\0\3\3\1\0"+
    "\4\3\1\350\24\0\1\351\3\3\1\352\1\3\1\353"+
    "\1\3\1\354\1\355\3\3\1\356\6\3\1\357\2\3"+
    "\2\0\3\3\1\0\4\3\1\360\24\0\23\3\1\361"+
    "\3\3\2\0\3\3\1\0\5\3\24\0\17\3\1\362"+
    "\7\3\2\0\3\3\1\0\5\3\24\0\13\3\1\363"+
    "\13\3\2\0\3\3\1\0\5\3\24\0\1\344\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\3\1\106\3\3"+
    "\1\364\7\3\1\365\11\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\366\21\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\367\4\3\1\370\4\3\1\371\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\372\11\3"+
    "\2\0\3\3\1\0\5\3\24\0\24\3\1\373\2\3"+
    "\2\0\3\3\1\0\4\3\1\235\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\374\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\3\1\266\25\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\375\1\3\1\307"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\4\3\1\376"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\11\3\1\377"+
    "\15\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u0100"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u0101"+
    "\21\3\2\0\3\3\1\0\3\3\1\u0102\1\3\24\0"+
    "\7\3\1\124\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u0103\10\3\1\u0104\11\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u0105\4\3\1\u0106\17\3\2\0"+
    "\3\3\1\0\2\3\1\u0107\1\u0108\1\u0109\24\0\1\u010a"+
    "\4\3\1\u010b\14\3\1\u010c\4\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\u010d\1\3\1\u010e\24\3\2\0\3\3"+
    "\1\0\2\3\1\u010f\1\3\1\u0110\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\7\3\1\u0111\17\3\2\0"+
    "\3\3\1\0\4\3\1\124\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u0112\22\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u0113\4\3\1\u0114\17\3"+
    "\2\0\3\3\1\0\3\3\1\u0115\1\3\24\0\5\3"+
    "\1\u0116\21\3\2\0\3\3\1\0\4\3\1\u0117\24\0"+
    "\5\3\1\u0118\21\3\2\0\3\3\1\0\5\3\24\0"+
    "\24\3\1\u0119\2\3\2\0\3\3\1\0\3\3\1\u011a"+
    "\1\u011b\24\0\27\3\2\0\3\3\1\0\4\3\1\u011c"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\10\3"+
    "\1\u011d\16\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u011e\12\3\1\252\7\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u011f\4\3\1\u0120\17\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u0121\22\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u0122\22\3\2\0\3\3"+
    "\1\0\2\3\1\266\2\3\24\0\1\3\1\u0123\2\3"+
    "\1\u0124\1\3\1\u0125\1\3\1\u0126\3\3\1\u0127\1\u0128"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u0129"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\7\3\1\u012a"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\22\3\1\u012b"+
    "\4\3\2\0\3\3\1\0\5\3\24\0\13\3\1\u012c"+
    "\6\3\1\106\4\3\2\0\3\3\1\0\5\3\24\0"+
    "\24\3\1\107\2\3\2\0\3\3\1\0\4\3\1\u012d"+
    "\24\0\4\3\1\u012e\3\3\1\u012f\4\3\1\u0130\4\3"+
    "\1\u0131\4\3\2\0\3\3\1\0\5\3\24\0\1\u0132"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\1\u0133\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\22\3\1\107\4\3"+
    "\2\0\3\3\1\0\5\3\24\0\5\3\1\u0134\4\3"+
    "\1\u0135\14\3\2\0\3\3\1\0\3\3\1\u0136\1\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\20\3"+
    "\1\107\6\3\2\0\3\3\1\0\5\3\24\0\15\3"+
    "\1\u0137\11\3\2\0\3\3\1\0\5\3\24\0\1\u0138"+
    "\26\3\2\0\3\3\1\0\4\3\1\u0139\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\u011a\26\3\2\0"+
    "\3\3\1\0\5\3\24\0\7\3\1\u013a\17\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\106\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\u0108\6\3\1\u013b\17\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\u013c\22\3"+
    "\2\0\3\3\1\0\2\3\1\107\2\3\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\16\3\1\106\10\3"+
    "\2\0\3\3\1\0\4\3\1\u0110\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\3\3\1\106\1\u0112\22\3"+
    "\2\0\3\3\1\0\5\3\24\0\5\3\1\267\21\3"+
    "\2\0\3\3\1\0\2\3\1\205\2\3\24\0\1\3"+
    "\1\u013d\25\3\2\0\3\3\1\0\2\3\1\u013e\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u013f\12\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u0140\12\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u011c\21\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u0141\11\3\1\137\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\4\3\1\u0142\22\3\2\0\3\3\1\0\4\3"+
    "\1\u0143\24\0\5\3\1\u0144\21\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u0145\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\344\12\3\4\0\1\u0146\2\0"+
    "\1\u0146\3\0\1\u0147\1\0\1\u0147\52\0\3\3\1\0"+
    "\4\3\1\u0148\24\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u0149\24\3\2\0\3\3\1\0\3\3"+
    "\1\u014a\1\3\24\0\14\3\1\u014b\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u014c\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\106\5\3\1\u014d\16\3"+
    "\2\0\3\3\1\0\5\3\24\0\12\3\1\u014e\14\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\152\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\344\16\3"+
    "\1\u014f\2\0\3\3\1\0\2\3\1\u0150\2\3\24\0"+
    "\27\3\2\0\3\3\1\0\5\3\24\0\1\u0140\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u011a\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\17\3\1\107\7\3"+
    "\2\0\3\3\1\0\5\3\24\0\5\3\1\106\21\3"+
    "\2\0\3\3\1\0\2\3\1\113\2\3\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\17\3\1\u0151\7\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\3\1\u0119\25\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u0110\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\3\1\106\25\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\u0110\26\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\u0152\24\3\34\0"+
    "\1\300\1\0\1\300\33\0\1\u0153\2\0\1\u0153\3\0"+
    "\1\u0153\1\0\1\u0153\51\0\15\302\1\303\1\u0154\47\302"+
    "\1\0\3\3\1\0\5\3\24\0\12\3\1\u0155\14\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\u0156\17\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\u0157\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\u0158\17\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u0159\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\u015a\1\3\1\106"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u015b"+
    "\24\3\2\0\3\3\1\0\4\3\1\u015c\24\0\27\3"+
    "\2\0\3\3\1\0\4\3\1\u015d\24\0\14\3\1\u015e"+
    "\12\3\2\0\3\3\1\0\5\3\24\0\1\u015f\1\3"+
    "\1\u0160\24\3\2\0\3\3\1\0\5\3\24\0\10\3"+
    "\1\u0161\16\3\2\0\3\3\1\0\5\3\24\0\13\3"+
    "\1\137\13\3\2\0\3\3\1\0\5\3\24\0\1\252"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\10\3\1\106"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\17\3\1\u0162"+
    "\7\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u0163"+
    "\3\3\1\u0164\10\3\1\106\5\3\2\0\3\3\1\0"+
    "\5\3\1\u0165\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\u013e\16\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u0166\2\3\1\u0167\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u0168\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\106\10\3\1\u0169\11\3"+
    "\2\0\3\3\1\0\4\3\1\u016a\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\u016b\26\3\2\0\3\3"+
    "\1\0\4\3\1\u016c\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\4\3\1\u016d\22\3\2\0\3\3\1\0"+
    "\5\3\24\0\6\3\1\u016e\20\3\2\0\3\3\1\0"+
    "\2\3\1\u0156\2\3\24\0\2\3\1\106\24\3\2\0"+
    "\3\3\1\0\2\3\1\u016f\2\3\24\0\14\3\1\u0170"+
    "\12\3\2\0\3\3\1\0\5\3\24\0\17\3\1\u0171"+
    "\2\3\1\106\4\3\2\0\1\3\1\u0172\1\3\1\0"+
    "\5\3\24\0\27\3\2\0\3\3\1\0\2\3\1\106"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\u0173\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\26\3\1\u0174\2\0\3\3\1\0\5\3\24\0\15\3"+
    "\1\u0175\11\3\2\0\3\3\1\0\5\3\24\0\1\u0176"+
    "\26\3\2\0\3\3\1\0\4\3\1\106\24\0\1\3"+
    "\1\u0177\25\3\2\0\3\3\1\0\3\3\1\u0178\1\3"+
    "\24\0\27\3\2\0\3\3\1\0\4\3\1\u0179\24\0"+
    "\27\3\2\0\3\3\1\0\5\3\24\0\7\3\1\u017a"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u017b"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u017c"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u017d"+
    "\4\3\1\u017e\17\3\2\0\3\3\1\0\4\3\1\u017f"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\10\3"+
    "\1\u0180\4\3\1\106\1\3\1\u0181\7\3\2\0\3\3"+
    "\1\0\5\3\24\0\12\3\1\231\14\3\2\0\3\3"+
    "\1\0\4\3\1\u0182\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\4\3\1\u0183\22\3\2\0\3\3\1\0"+
    "\5\3\24\0\10\3\1\276\16\3\2\0\3\3\1\0"+
    "\5\3\24\0\10\3\1\u0184\16\3\2\0\3\3\1\0"+
    "\5\3\24\0\6\3\1\u015d\1\3\1\u0185\4\3\1\u0186"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\10\3\1\u0187"+
    "\16\3\2\0\3\3\1\0\2\3\1\231\2\3\24\0"+
    "\7\3\1\u011a\12\3\1\u0188\1\3\1\u0189\2\3\2\0"+
    "\3\3\1\0\5\3\24\0\14\3\1\110\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\7\3\1\231\17\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\u011a\3\3\1\u0125"+
    "\20\3\2\0\3\3\1\0\2\3\1\u018a\2\3\24\0"+
    "\27\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u018b"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\15\3\1\u018c"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u018d"+
    "\21\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u018e"+
    "\7\3\1\u018f\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u0190\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\u0191\26\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\106\1\3\1\106\3\3\1\u0192\16\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\u015b\26\3\2\0\3\3\1\0"+
    "\5\3\24\0\15\3\1\u014c\11\3\2\0\3\3\1\0"+
    "\2\3\1\u0193\2\3\24\0\4\3\1\u0194\10\3\1\u0195"+
    "\6\3\1\u0196\2\3\2\0\3\3\1\0\2\3\1\231"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\3\3\1\u0197"+
    "\1\u0198\24\0\27\3\2\0\3\3\1\0\4\3\1\u0199"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u019a\21\3\2\0\3\3\1\0\5\3\24\0\6\3"+
    "\1\u019b\13\3\1\u019c\4\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\u019d\21\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\u019e\16\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\110\16\3\2\0\3\3\1\0\4\3"+
    "\1\106\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\231\26\3\2\0\3\3\1\0\5\3\24\0\10\3"+
    "\1\u0121\16\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u019f\24\3\2\0\3\3\1\0\5\3\24\0\22\3"+
    "\1\106\4\3\2\0\3\3\1\0\2\3\1\275\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u01a0\1\3\1\u01a1\22\3\2\0\3\3\1\0\4\3"+
    "\1\u01a2\24\0\2\3\1\106\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\15\3\1\231\11\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\271\12\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\3\1\u01a3\25\3\2\0\3\3\1\0"+
    "\5\3\24\0\21\3\1\106\5\3\2\0\3\3\1\0"+
    "\5\3\24\0\21\3\1\u013b\5\3\2\0\3\3\1\0"+
    "\5\3\24\0\23\3\1\u01a4\3\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\u011c\26\3\2\0\3\3\1\0\5\3"+
    "\24\0\23\3\1\124\3\3\2\0\3\3\1\0\5\3"+
    "\24\0\12\3\1\106\14\3\2\0\1\3\1\u01a5\1\3"+
    "\1\0\5\3\24\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u01a6\11\3\1\u01a7\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u01a8\4\3\1\106\17\3"+
    "\2\0\3\3\1\0\3\3\1\231\1\3\24\0\27\3"+
    "\2\0\3\3\1\0\4\3\1\u01a9\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\u01aa\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\u01ab\24\3\2\0"+
    "\3\3\1\0\2\3\1\u01ac\2\3\24\0\27\3\2\0"+
    "\3\3\1\0\4\3\1\u01ad\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u01ae\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\15\3\1\u01af\11\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u01b0\24\3\2\0\3\3"+
    "\1\0\3\3\1\u01b1\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\3\3\1\u01b2\1\3\24\0\4\3\1\307\2\3"+
    "\1\u0115\17\3\2\0\3\3\1\0\5\3\24\0\15\3"+
    "\1\u01b3\11\3\2\0\3\3\1\0\5\3\24\0\1\u01b4"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u01b5"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\10\3\1\107"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\7\3\1\236"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u01b6"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u01b7"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u01b8"+
    "\22\3\2\0\3\3\1\0\4\3\1\u01b9\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u01ba\5\3"+
    "\1\u01bb\4\3\1\u01bc\5\3\1\u01bd\3\3\2\0\3\3"+
    "\1\0\5\3\24\0\13\3\1\276\13\3\2\0\3\3"+
    "\1\0\3\3\1\312\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\7\3\1\106\17\3\2\0\3\3"+
    "\1\0\3\3\1\137\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\3\3\1\u015b\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u01be\22\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u01bf\22\3\2\0\3\3"+
    "\1\0\2\3\1\u01c0\2\3\24\0\5\3\1\107\21\3"+
    "\2\0\3\3\1\0\5\3\24\0\12\3\1\u01c1\14\3"+
    "\2\0\3\3\1\0\3\3\1\u01c2\1\3\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\10\3\1\61\5\3"+
    "\1\u0119\10\3\2\0\3\3\1\0\5\3\24\0\23\3"+
    "\1\106\3\3\4\0\1\u0146\2\0\1\u0146\60\0\3\3"+
    "\1\0\5\3\24\0\14\3\1\u01c3\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\u0182\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\276\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\7\3\1\u01c4\17\3\2\0\3\3"+
    "\1\0\5\3\24\0\15\3\1\106\11\3\2\0\3\3"+
    "\1\0\4\3\1\u01c5\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u01c6\24\3\2\0\3\3\1\0"+
    "\3\3\1\107\1\3\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\7\3\1\u01c7\17\3\2\0\3\3\1\0"+
    "\3\3\1\u01c8\1\3\24\0\27\3\2\0\3\3\1\0"+
    "\2\3\1\u013c\2\3\24\0\27\3\4\0\1\u0153\2\0"+
    "\1\u0153\60\0\3\3\1\0\5\3\24\0\7\3\1\u01c9"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\10\3\1\u0105"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\7\3\1\344"+
    "\17\3\2\0\3\3\1\0\4\3\1\u019b\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\5\3\1\110\21\3"+
    "\2\0\3\3\1\0\5\3\24\0\13\3\1\u01ca\13\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\107\22\3"+
    "\2\0\3\3\1\0\4\3\1\u01cb\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\u01cc\26\3\2\0\3\3"+
    "\1\0\5\3\24\0\22\3\1\276\4\3\2\0\3\3"+
    "\1\0\3\3\1\u01cd\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\u01ce\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\u01cf\21\3\2\0\3\3"+
    "\1\0\2\3\1\u01d0\2\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\u01d1\6\3\1\u01d2\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\u01d3\17\3"+
    "\41\0\1\u01d4\26\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u01c4\21\3\2\0\3\3\1\0\5\3\24\0\1\u01b0"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\6\3\1\u01d5"+
    "\20\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u014c"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\24\3\1\u0110"+
    "\2\3\2\0\3\3\1\0\5\3\24\0\6\3\1\107"+
    "\20\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u01d6"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\15\3\1\u01d7"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\7\3\1\u01d8"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\15\3\1\u01d9"+
    "\11\3\2\0\3\3\1\0\4\3\1\u0119\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\17\3\1\266\7\3"+
    "\2\0\3\3\1\0\5\3\24\0\10\3\1\u01da\16\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u01db\2\3"+
    "\1\u01dc\6\3\2\0\3\3\1\0\3\3\1\276\1\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u01ba\24\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u01dd\22\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u01de\22\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\344\21\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u01df\12\3\2\0\3\3\1\0\2\3\1\u01e0\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u01e1\21\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u01e2\1\3\1\u01cc\17\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\231\21\3\2\0\3\3\1\0\5\3"+
    "\24\0\21\3\1\107\5\3\2\0\3\3\1\0\5\3"+
    "\24\0\13\3\1\u01e3\13\3\2\0\3\3\1\0\5\3"+
    "\24\0\7\3\1\u01e4\17\3\2\0\3\3\1\0\3\3"+
    "\1\u01e5\1\3\24\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\14\3\1\323\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\14\3\1\276\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u0108\24\3\2\0\3\3\1\0\5\3"+
    "\24\0\14\3\1\u01e6\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u01e7\24\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u01e8\24\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\u01e9\26\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u01ea\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\3\1\u01eb\1\3\1\u01ec\1\3\1\u01ed\20\3\1\u01ee"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\u01ef\22\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u0169\24\3"+
    "\2\0\3\3\1\0\4\3\1\u01f0\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\u01f1\24\3\2\0"+
    "\3\3\1\0\5\3\24\0\7\3\1\u011a\17\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\u01f2\22\3\2\0"+
    "\3\3\1\0\4\3\1\u01f3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\u01f4\26\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u01f5\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\u01f6\13\3\1\u01f7\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u01f8\22\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u017d\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\22\3\1\344\4\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\u01f9\26\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u01fa\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u01fb\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\231\12\3\2\0\1\3\1\u01a5"+
    "\1\3\1\0\5\3\24\0\1\u01fc\26\3\2\0\3\3"+
    "\1\0\5\3\24\0\21\3\1\u01fd\5\3\2\0\3\3"+
    "\1\0\5\3\24\0\4\3\1\u01fe\22\3\2\0\3\3"+
    "\1\0\5\3\24\0\14\3\1\u01ff\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\145\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\11\3\1\u0200\15\3\2\0\3\3"+
    "\1\0\4\3\1\u0201\24\0\27\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\134\24\3\2\0\3\3\1\0"+
    "\4\3\1\u0202\24\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\3\3\1\106\23\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\u0203\16\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\u0204\11\3\1\266\7\3\2\0\3\3"+
    "\1\0\3\3\1\u0205\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\14\3\1\u0206\12\3\2\0\3\3"+
    "\1\0\2\3\1\u0207\2\3\24\0\5\3\1\231\21\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\u0208\22\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\110\26\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\3\1\u0209\25\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\u020a\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\10\3\1\231\16\3\2\0"+
    "\3\3\1\0\5\3\24\0\15\3\1\266\11\3\2\0"+
    "\3\3\1\0\5\3\24\0\5\3\1\u020b\21\3\2\0"+
    "\3\3\1\0\5\3\24\0\14\3\1\u020c\12\3\2\0"+
    "\3\3\1\0\2\3\1\u020d\2\3\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\14\3\1\u020e\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\22\3\1\u020f\4\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\3\1\u0150\25\3\2\0"+
    "\3\3\1\0\5\3\24\0\2\3\1\u0210\24\3\2\0"+
    "\3\3\1\0\4\3\1\u0211\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\5\3\1\u0212\21\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\106\6\3\1\u0205\17\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\u0105\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\u0213\26\3\2\0\3\3"+
    "\1\0\5\3\24\0\11\3\1\u018f\15\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u0177\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u0214\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\14\3\1\u0215\12\3\2\0\3\3"+
    "\1\0\5\3\24\0\2\3\1\u0216\24\3\2\0\3\3"+
    "\1\0\5\3\24\0\11\3\1\106\15\3\2\0\3\3"+
    "\1\0\2\3\1\276\2\3\24\0\27\3\2\0\3\3"+
    "\1\0\3\3\1\u0102\1\3\24\0\27\3\2\0\3\3"+
    "\1\0\5\3\24\0\10\3\1\u011c\16\3\2\0\3\3"+
    "\1\0\5\3\24\0\23\3\1\344\3\3\2\0\3\3"+
    "\1\0\5\3\24\0\1\267\26\3\2\0\3\3\1\0"+
    "\5\3\24\0\5\3\1\u0217\21\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\124\26\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\107\21\3\2\0\3\3\1\0\4\3"+
    "\1\231\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\5\3\1\u0218\21\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u0219\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\7\3\1\u020e\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u021a\12\3\2\0\3\3\1\0\2\3\1\u01b0"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\2\3\1\u021b"+
    "\2\3\24\0\27\3\42\0\1\u021c\25\0\3\3\1\0"+
    "\5\3\24\0\4\3\1\u021d\22\3\2\0\3\3\1\0"+
    "\5\3\24\0\15\3\1\u021e\11\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\223\12\3\2\0\3\3\1\0"+
    "\5\3\24\0\5\3\1\u0188\21\3\2\0\3\3\1\0"+
    "\4\3\1\u0198\24\0\1\u010f\26\3\2\0\3\3\1\0"+
    "\5\3\24\0\7\3\1\u021f\17\3\2\0\3\3\1\0"+
    "\5\3\24\0\4\3\1\u0220\22\3\2\0\3\3\1\0"+
    "\5\3\24\0\7\3\1\u0221\17\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\214\12\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\57\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\10\3\1\u01ad\16\3\2\0\3\3\1\0"+
    "\5\3\24\0\11\3\1\u0222\15\3\2\0\3\3\1\0"+
    "\5\3\24\0\2\3\1\u0223\24\3\2\0\3\3\1\0"+
    "\5\3\24\0\14\3\1\u01b0\12\3\2\0\3\3\1\0"+
    "\5\3\24\0\1\u01c6\26\3\2\0\3\3\1\0\3\3"+
    "\1\u0108\1\3\24\0\27\3\2\0\3\3\1\0\5\3"+
    "\24\0\14\3\1\u0224\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\15\3\1\307\11\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\214\21\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\3\1\u0225\25\3\2\0\3\3\1\0\5\3"+
    "\24\0\5\3\1\235\21\3\2\0\3\3\1\0\4\3"+
    "\1\u0226\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\u0227\26\3\2\0\3\3\1\0\5\3\24\0\22\3"+
    "\1\u0110\4\3\2\0\3\3\1\0\5\3\24\0\7\3"+
    "\1\u0228\17\3\2\0\3\3\1\0\3\3\1\u0229\1\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\1\u022a"+
    "\26\3\2\0\3\3\1\0\2\3\1\u022b\2\3\24\0"+
    "\27\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u022c"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\7\3\1\113"+
    "\17\3\2\0\3\3\1\0\5\3\24\0\1\3\1\u022d"+
    "\25\3\2\0\3\3\1\0\5\3\24\0\10\3\1\u01d5"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\14\3\1\u022e"+
    "\12\3\2\0\3\3\1\0\2\3\1\u014f\2\3\24\0"+
    "\27\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u022f"+
    "\21\3\2\0\3\3\1\0\5\3\24\0\4\3\1\u0230"+
    "\22\3\2\0\3\3\1\0\5\3\24\0\15\3\1\u0133"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\15\3\1\u0231"+
    "\11\3\2\0\3\3\1\0\5\3\24\0\10\3\1\u0232"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\6\3\1\u0233"+
    "\20\3\2\0\3\3\1\0\5\3\24\0\2\3\1\u0234"+
    "\24\3\2\0\3\3\1\0\5\3\24\0\17\3\1\344"+
    "\7\3\2\0\3\3\1\0\5\3\24\0\1\u0235\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\u01c6\17\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u0236\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\u0237\26\3\2\0"+
    "\3\3\1\0\5\3\24\0\15\3\1\u012d\6\3\1\276"+
    "\2\3\2\0\3\3\1\0\5\3\24\0\1\3\1\107"+
    "\25\3\2\0\3\3\1\0\5\3\24\0\1\u0238\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u0239\11\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\u023a\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\u0105\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\5\3\1\u0119\21\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\u023b\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\7\3\1\u023c\17\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\u023d\22\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u023e\11\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\106\26\3\2\0"+
    "\3\3\1\0\5\3\24\0\22\3\1\u023f\4\3\2\0"+
    "\3\3\1\0\5\3\24\0\14\3\1\u0108\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\5\3\1\u018f\21\3\2\0"+
    "\3\3\1\0\5\3\24\0\5\3\1\u0240\21\3\2\0"+
    "\3\3\1\0\5\3\24\0\24\3\1\266\2\3\2\0"+
    "\3\3\1\0\2\3\1\u0241\2\3\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\14\3\1\u0242\12\3\2\0"+
    "\3\3\1\0\5\3\24\0\1\321\1\3\1\275\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\6\3\1\u0237\4\3"+
    "\1\107\13\3\2\0\3\3\1\0\5\3\24\0\13\3"+
    "\1\u0243\13\3\2\0\3\3\1\0\2\3\1\u012d\2\3"+
    "\24\0\27\3\41\0\1\u0244\26\0\3\3\1\0\5\3"+
    "\24\0\1\u0245\26\3\2\0\3\3\1\0\2\3\1\u0246"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\114\26\3\2\0\3\3\1\0\2\3\1\u0247\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u0248\12\3\2\0\3\3\1\0\2\3\1\u0249\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\1\3"+
    "\1\u024a\25\3\2\0\3\3\1\0\3\3\1\u01cc\1\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u024b\24\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u024c\22\3\2\0\3\3\1\0\5\3\24\0\23\3"+
    "\1\u024d\3\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u01e9\24\3\2\0\3\3\1\0\5\3\24\0\6\3"+
    "\1\u014c\20\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u024e\22\3\2\0\3\3\1\0\5\3\24\0\5\3"+
    "\1\u024f\21\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u0250\24\3\2\0\3\3\1\0\2\3\1\u0251\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\1\u0252"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\2\3\1\106"+
    "\11\3\1\u0157\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\6\3\1\u0253\20\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u0254\22\3\2\0\3\3\1\0\5\3\24\0"+
    "\7\3\1\u0211\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\3\3\1\u0255\23\3\2\0\3\3\1\0\5\3\24\0"+
    "\10\3\1\u0237\16\3\2\0\3\3\1\0\2\3\1\u0256"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u018f\22\3\2\0\3\3\1\0\4\3\1\u0257"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u0176\12\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u0258\22\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u0259\22\3\2\0\3\3\1\0\2\3\1\u025a\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\14\3"+
    "\1\u025b\12\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u025c\22\3\2\0\1\3\1\u025d\1\3\1\0\5\3"+
    "\24\0\27\3\2\0\3\3\1\0\2\3\1\u0119\2\3"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\17\3"+
    "\1\u025e\7\3\2\0\3\3\1\0\5\3\24\0\20\3"+
    "\1\u01ad\6\3\2\0\3\3\1\0\3\3\1\u025f\1\3"+
    "\24\0\27\3\47\0\1\u0260\20\0\3\3\1\0\5\3"+
    "\24\0\22\3\1\u0261\4\3\2\0\3\3\1\0\5\3"+
    "\24\0\24\3\1\u0196\2\3\2\0\3\3\1\0\5\3"+
    "\24\0\2\3\1\u0262\24\3\2\0\3\3\1\0\5\3"+
    "\24\0\17\3\1\u0225\7\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\257\16\3\2\0\3\3\1\0\5\3"+
    "\24\0\10\3\1\u0263\16\3\2\0\3\3\1\0\5\3"+
    "\24\0\17\3\1\257\7\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\u0264\26\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u0265\11\3\2\0\1\3\1\u0266\1\3\1\0"+
    "\5\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\275\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u0267\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u0268\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\7\3\1\u0269\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\u026a\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u0267\22\3\2\0\3\3\1\0\5\3\24\0"+
    "\17\3\1\205\7\3\2\0\3\3\1\0\5\3\24\0"+
    "\16\3\1\u026b\10\3\2\0\3\3\1\0\5\3\24\0"+
    "\16\3\1\u026c\10\3\2\0\3\3\1\0\5\3\24\0"+
    "\10\3\1\u026d\16\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u026e\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\5\3\1\u026f\21\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u024f\22\3\2\0\3\3\1\0\5\3\24\0"+
    "\6\3\1\137\20\3\2\0\1\3\1\u0270\1\3\1\0"+
    "\5\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\7\3\1\u0110\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u0271\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\231\24\3\2\0\3\3\1\0\3\3\1\u01b1"+
    "\1\3\24\0\1\3\1\u0105\2\3\1\u0272\22\3\2\0"+
    "\3\3\1\0\5\3\24\0\4\3\1\u0273\22\3\2\0"+
    "\3\3\1\0\2\3\1\u0274\2\3\24\0\27\3\2\0"+
    "\3\3\1\0\2\3\1\273\2\3\24\0\27\3\2\0"+
    "\3\3\1\0\5\3\24\0\5\3\1\u0122\21\3\2\0"+
    "\1\3\1\u0275\1\3\1\0\5\3\24\0\10\3\1\u0263"+
    "\16\3\2\0\3\3\1\0\5\3\24\0\1\u0276\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u0277\3\3"+
    "\1\u0278\5\3\2\0\3\3\1\0\5\3\24\0\10\3"+
    "\1\u014c\16\3\2\0\3\3\1\0\5\3\24\0\7\3"+
    "\1\u013b\17\3\2\0\3\3\1\0\5\3\24\0\12\3"+
    "\1\u0279\7\3\1\u027a\4\3\2\0\3\3\1\0\5\3"+
    "\24\0\7\3\1\u027b\17\3\2\0\3\3\1\0\5\3"+
    "\24\0\14\3\1\u027c\12\3\2\0\3\3\1\0\5\3"+
    "\24\0\1\321\26\3\2\0\3\3\1\0\5\3\24\0"+
    "\4\3\1\u0216\22\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u027d\12\3\2\0\3\3\1\0\3\3\1\u027e"+
    "\1\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u027f\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\u0280\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\7\3\1\u0281\17\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u0282\12\3\2\0\3\3\1\0\3\3\1\u0283"+
    "\1\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\22\3\1\u0284\4\3\2\0\3\3\1\0\2\3\1\u0285"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\1\3\1\u019c\25\3\2\0\3\3\1\0\5\3\24\0"+
    "\22\3\1\u0286\4\3\2\0\3\3\1\0\5\3\24\0"+
    "\16\3\1\u0287\10\3\2\0\3\3\1\0\3\3\1\u011a"+
    "\1\3\24\0\27\3\2\0\3\3\1\0\2\3\1\u019b"+
    "\2\3\24\0\27\3\2\0\3\3\1\0\5\3\24\0"+
    "\5\3\1\u0133\21\3\2\0\3\3\1\0\5\3\24\0"+
    "\2\3\1\u0288\24\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u0196\11\3\2\0\3\3\1\0\5\3\24\0"+
    "\14\3\1\u0289\12\3\2\0\3\3\1\0\5\3\24\0"+
    "\6\3\1\u028a\20\3\2\0\3\3\1\0\5\3\24\0"+
    "\15\3\1\u01db\11\3\2\0\3\3\1\0\4\3\1\u028b"+
    "\24\0\27\3\2\0\3\3\1\0\5\3\24\0\12\3"+
    "\1\u028c\14\3\2\0\3\3\1\0\5\3\24\0\1\u028d"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u028e"+
    "\21\3\2\0\3\3\1\0\5\3\24\0\5\3\1\u028f"+
    "\21\3\2\0\3\3\1\0\5\3\24\0\1\u0290\26\3"+
    "\2\0\3\3\1\0\5\3\24\0\14\3\1\u0291\12\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u0292\11\3"+
    "\2\0\3\3\1\0\5\3\24\0\4\3\1\u0293\22\3"+
    "\2\0\3\3\1\0\5\3\24\0\2\3\1\u0294\24\3"+
    "\2\0\3\3\1\0\5\3\24\0\16\3\1\u0295\10\3"+
    "\2\0\3\3\1\0\5\3\24\0\1\3\1\u0296\2\3"+
    "\1\u0273\22\3\2\0\3\3\1\0\5\3\24\0\2\3"+
    "\1\u0297\24\3\2\0\3\3\1\0\5\3\24\0\4\3"+
    "\1\u0298\22\3\2\0\3\3\1\0\5\3\24\0\1\u0299"+
    "\26\3\2\0\3\3\1\0\5\3\24\0\14\3\1\u029a"+
    "\12\3\2\0\3\3\1\0\4\3\1\u029b\24\0\27\3"+
    "\2\0\3\3\1\0\5\3\24\0\15\3\1\u0294\11\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\53\1\1\0\1\1\1\0"+
    "\2\1\2\0\202\1\3\0\217\1\1\11\20\1\1\0"+
    "\156\1\1\0\107\1\1\0\47\1\1\0\33\1\1\11"+
    "\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[667];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 15: break;
          case 2: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn +1 ; UltimaColumna=yycolumn+yylength(); return Identificador;
            } 
            // fall through
          case 16: break;
          case 3: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Int;
            } 
            // fall through
          case 17: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 18: break;
          case 5: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Bit;
            } 
            // fall through
          case 19: break;
          case 6: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Simbolo;
            } 
            // fall through
          case 20: break;
          case 7: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Float;
            } 
            // fall through
          case 21: break;
          case 8: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn +1; UltimaColumna=yycolumn+yylength(); return Palabra_Reservada;
            } 
            // fall through
          case 22: break;
          case 9: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioSimple;
            } 
            // fall through
          case 23: break;
          case 10: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return FloatError;
            } 
            // fall through
          case 24: break;
          case 11: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioMultilineaError;
            } 
            // fall through
          case 25: break;
          case 12: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return String;
            } 
            // fall through
          case 26: break;
          case 13: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return StringError;
            } 
            // fall through
          case 27: break;
          case 14: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioMultilinea;
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
