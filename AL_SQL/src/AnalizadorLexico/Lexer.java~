/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import static AnalizadorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/Compiladores/AL-xicoDeSQL/AL_SQL/src/AnalizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\40\1\40\1\3\22\0\1\3\13\0\1\3"+
    "\1\37\2\0\12\2\7\0\1\4\1\22\1\16\1\5\1\6\1\20"+
    "\1\26\1\21\1\23\1\35\1\30\1\13\1\31\1\12\1\15\1\14"+
    "\1\36\1\11\1\24\1\10\1\17\1\33\1\32\1\7\1\25\1\27"+
    "\4\0\1\34\1\0\4\1\1\1\25\1\12\0\1\40\u1fa2\0\1\40"+
    "\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\31\2\1\4\6\2\1\4"+
    "\20\2\1\4\12\2\1\4\15\2\2\4\3\2\1\4"+
    "\32\2\2\4\21\2\1\4\20\2\1\4\7\2\1\4"+
    "\15\2\1\4\57\2\1\4\24\2\1\4\5\2\1\4"+
    "\16\2\1\4\2\2\1\4\6\2\1\4\14\2\1\4"+
    "\4\2\1\4\23\2\1\4\10\2\1\0\4\2\1\4"+
    "\3\2\1\4\2\2\1\4\20\2\1\4\7\2\1\4"+
    "\3\2\1\4\2\2\1\4\17\2\1\4\44\2\2\4"+
    "\16\2\1\0\1\4\52\2\1\4\31\2\1\4\5\2"+
    "\1\4\1\0\46\2\1\0\11\2\1\4\4\2\1\4"+
    "\6\2\1\4\5\2\1\4\6\2\1\4\3\2\1\4"+
    "\34\2\1\4\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\102\0\u03bd\0\u03de"+
    "\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6"+
    "\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee"+
    "\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6"+
    "\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe"+
    "\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906"+
    "\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e"+
    "\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16"+
    "\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e"+
    "\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26"+
    "\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e"+
    "\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36"+
    "\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e"+
    "\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146"+
    "\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e"+
    "\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356"+
    "\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u06b4\0\u141c\0\u143d"+
    "\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u14e2\0\u1503\0\u1524\0\u1545"+
    "\0\u1566\0\u1587\0\u15a8\0\u15c9\0\u15ea\0\u160b\0\u162c\0\u164d"+
    "\0\u166e\0\u168f\0\u16b0\0\u16d1\0\u16f2\0\u1713\0\u1734\0\u1755"+
    "\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa\0\u181b\0\u183c\0\u185d"+
    "\0\u187e\0\u189f\0\u18c0\0\u18e1\0\u1902\0\u1923\0\u1944\0\u1965"+
    "\0\u1986\0\u19a7\0\u19c8\0\u19e9\0\u1a0a\0\u1a2b\0\u1a4c\0\u1a6d"+
    "\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1\0\u1b12\0\u1b33\0\u1b54\0\u1b75"+
    "\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9\0\u1c1a\0\u1c3b\0\u1c5c\0\u1c7d"+
    "\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01\0\u1d22\0\u1d43\0\u1d64\0\u1d85"+
    "\0\u1da6\0\u1dc7\0\u1de8\0\u1e09\0\u1e2a\0\u1e4b\0\u1e6c\0\u1e8d"+
    "\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11\0\u1f32\0\u1f53\0\u1f74\0\u1f95"+
    "\0\u1fb6\0\u1fd7\0\u1ff8\0\u1e4b\0\u2019\0\u203a\0\u205b\0\u207c"+
    "\0\u209d\0\u20be\0\u20df\0\u2100\0\u2121\0\u2142\0\u2163\0\u2184"+
    "\0\u21a5\0\u21c6\0\u21e7\0\u2208\0\u2229\0\u224a\0\u226b\0\u228c"+
    "\0\u22ad\0\u22ce\0\u22ef\0\u2310\0\u2331\0\u2352\0\u2373\0\u2394"+
    "\0\u23b5\0\u23d6\0\u23f7\0\u2418\0\u2439\0\u245a\0\u247b\0\u249c"+
    "\0\u24bd\0\u24de\0\u24ff\0\u2520\0\u2541\0\u2562\0\u2583\0\u25a4"+
    "\0\u25c5\0\u25e6\0\u2607\0\u2628\0\u2649\0\u266a\0\u268b\0\u26ac"+
    "\0\u26cd\0\u26ee\0\u270f\0\u2730\0\u2751\0\u2772\0\u2793\0\u27b4"+
    "\0\u27d5\0\u27f6\0\u2817\0\u2838\0\u2859\0\u287a\0\u289b\0\u28bc"+
    "\0\u28dd\0\u28fe\0\u291f\0\u2940\0\u2961\0\u2982\0\u29a3\0\u29c4"+
    "\0\u29e5\0\u2a06\0\u2a27\0\u2a48\0\u2a69\0\u2a8a\0\u2aab\0\u2acc"+
    "\0\u2aed\0\u2b0e\0\u2b2f\0\u2b50\0\u2b71\0\u2b92\0\u2bb3\0\u2bd4"+
    "\0\u2bf5\0\u2c16\0\u2c37\0\u2c58\0\u2c79\0\u2c9a\0\u2cbb\0\u2cdc"+
    "\0\u2cfd\0\u2d1e\0\u2d3f\0\u2d60\0\u2d81\0\u2da2\0\u2dc3\0\u2de4"+
    "\0\u2e05\0\u2e26\0\u2e47\0\u2e68\0\u2e89\0\u2eaa\0\u2ecb\0\u2eec"+
    "\0\u2f0d\0\u2f2e\0\u2f4f\0\u247b\0\u2f70\0\u2f91\0\u2fb2\0\u2fd3"+
    "\0\u2ff4\0\u3015\0\u3036\0\u3057\0\u3078\0\u3099\0\u30ba\0\u30db"+
    "\0\u30fc\0\u311d\0\u313e\0\u315f\0\u3180\0\u31a1\0\u31c2\0\u31e3"+
    "\0\u3204\0\u3225\0\u3246\0\u3267\0\u3288\0\u32a9\0\u32ca\0\u32eb"+
    "\0\u330c\0\u332d\0\u334e\0\u336f\0\u3390\0\u33b1\0\u33d2\0\u33f3"+
    "\0\u3414\0\u3435\0\u3456\0\u3477\0\u3498\0\u34b9\0\u34da\0\u34fb"+
    "\0\u351c\0\u12b1\0\u353d\0\u355e\0\u357f\0\u35a0\0\u35c1\0\u35e2"+
    "\0\u3603\0\u3624\0\u3645\0\u3666\0\u3687\0\u36a8\0\u36c9\0\u36ea"+
    "\0\u370b\0\u372c\0\u374d\0\u376e\0\u378f\0\u37b0\0\u37d1\0\u37f2"+
    "\0\u3813\0\u3834\0\u3855\0\u3876\0\u3897\0\u38b8\0\u38d9\0\u38fa"+
    "\0\u391b\0\u393c\0\u395d\0\u397e\0\u399f\0\u39c0\0\u39e1\0\u3a02"+
    "\0\u3a23\0\u3a44\0\u20df\0\u3a65\0\u3a86\0\u3aa7\0\u3ac8\0\u3ae9"+
    "\0\u3b0a\0\u3b2b\0\u3b4c\0\u3b6d\0\u3b8e\0\u3baf\0\u3bd0\0\u3bf1"+
    "\0\u3c12\0\u3c33\0\u3c54\0\u3c75\0\u3c96\0\u3cb7\0\u3cd8\0\u3cf9"+
    "\0\u3d1a\0\u3d3b\0\u3d5c\0\u3d7d\0\u3d9e\0\u3dbf\0\u3de0\0\u3e01"+
    "\0\u3e22\0\u3e43\0\u3e64\0\u3e85\0\u3ea6\0\u3ec7\0\u3ee8\0\u3f09"+
    "\0\u3f2a\0\u3f4b\0\u2b92\0\u3f6c\0\u3f8d\0\u3fae\0\u3fcf\0\u3ff0"+
    "\0\u12d2\0\u4011\0\u4032\0\u4053\0\u4074\0\u4095\0\u40b6\0\u40d7"+
    "\0\u40f8\0\u4119\0\u413a\0\u415b\0\u417c\0\u419d\0\u41be\0\u41df"+
    "\0\u4200\0\u4221\0\u4242\0\u4263\0\u4284\0\u42a5\0\u42c6\0\u42e7"+
    "\0\u4308\0\u4329\0\u434a\0\u436b\0\u438c\0\u43ad\0\u43ce\0\u43ef"+
    "\0\u4410\0\u4431\0\u4452\0\u4473\0\u4494\0\u44b5\0\u44d6\0\u44f7"+
    "\0\u4518\0\u4539\0\u455a\0\u457b\0\u459c\0\u45bd\0\u45de\0\u45ff"+
    "\0\u4620\0\u4641\0\u19a7\0\u4662\0\u4683\0\u46a4\0\u46c5\0\u46e6"+
    "\0\u4707\0\u4728\0\u4749\0\u476a\0\u0a0e\0\u478b\0\u4473\0\u47ac"+
    "\0\u47cd\0\u2229\0\u47ee\0\u480f\0\41\0\u4830\0\u4851\0\u4872"+
    "\0\u4893\0\u48b4\0\u48d5\0\u48f6\0\u4917\0\u4938\0\u4959\0\u497a"+
    "\0\u499b\0\u49bc\0\u49dd\0\u49fe\0\u4a1f\0\u4a40\0\u4a61\0\u4a82"+
    "\0\u4aa3\0\u4ac4\0\u4ae5\0\u4b06\0\u4b27\0\u4b48\0\u4b69\0\u4b8a"+
    "\0\u4bab\0\u4bcc\0\u4bed\0\u4c0e\0\u4c2f\0\u4c50\0\u4c71\0\u4c92"+
    "\0\u4cb3\0\u4cd4\0\u4cf5\0\u4d16\0\u4d37\0\u4d58\0\u4d79\0\u4d9a"+
    "\0\u4dbb\0\u4ddc\0\u4dfd\0\u4e1e\0\u4e3f\0\u4e60\0\u4e81\0\u4ea2"+
    "\0\u48f6\0\u4ec3\0\u4ee4\0\u4f05\0\u4f26\0\u4f47\0\u4f68\0\u4f89";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\3\1\34\1\3\1\2"+
    "\43\0\2\3\1\0\33\3\5\0\1\4\36\0\2\3"+
    "\1\0\1\3\1\35\2\3\1\36\1\37\1\40\1\41"+
    "\2\3\1\42\1\43\2\3\1\44\1\3\1\45\6\3"+
    "\1\46\3\3\3\0\2\3\1\0\1\47\1\3\1\50"+
    "\2\3\1\51\3\3\1\52\1\3\1\53\2\3\1\54"+
    "\1\55\13\3\3\0\2\3\1\0\3\3\1\56\1\3"+
    "\1\57\1\60\1\61\10\3\1\62\12\3\3\0\2\3"+
    "\1\0\1\63\1\3\1\64\2\3\1\65\3\3\1\66"+
    "\3\3\1\67\1\3\1\70\1\71\12\3\3\0\2\3"+
    "\1\0\1\72\1\3\1\73\6\3\1\74\1\3\1\75"+
    "\3\3\1\76\13\3\3\0\2\3\1\0\1\77\1\3"+
    "\1\100\6\3\1\101\1\102\1\103\17\3\3\0\2\3"+
    "\1\0\1\104\1\3\1\105\6\3\1\106\5\3\1\107"+
    "\13\3\3\0\2\3\1\0\1\110\1\3\1\111\2\3"+
    "\1\112\1\3\1\113\1\3\1\114\1\3\1\115\3\3"+
    "\1\116\13\3\3\0\2\3\1\0\5\3\1\117\1\120"+
    "\1\3\1\121\1\3\1\122\1\123\1\124\12\3\1\125"+
    "\3\3\3\0\2\3\1\0\1\126\4\3\1\127\1\3"+
    "\1\130\1\3\1\131\1\3\1\132\1\3\1\133\15\3"+
    "\3\0\2\3\1\0\6\3\1\134\1\3\1\135\7\3"+
    "\1\136\12\3\3\0\2\3\1\0\1\137\1\3\1\140"+
    "\2\3\1\141\1\3\1\142\1\3\1\143\1\3\1\144"+
    "\3\3\1\145\13\3\3\0\2\3\1\0\1\146\10\3"+
    "\1\147\21\3\3\0\2\3\1\0\1\150\1\3\1\151"+
    "\2\3\1\152\3\3\1\153\1\3\1\154\3\3\1\155"+
    "\1\3\1\36\11\3\3\0\2\3\1\0\1\3\1\156"+
    "\4\3\1\157\5\3\1\36\3\3\1\160\4\3\1\161"+
    "\5\3\3\0\2\3\1\0\1\162\1\3\1\163\1\3"+
    "\1\164\3\3\1\165\1\166\1\167\1\170\1\3\1\171"+
    "\1\3\1\172\1\3\1\173\3\3\1\174\4\3\1\175"+
    "\3\0\2\3\1\0\2\3\1\176\30\3\3\0\2\3"+
    "\1\0\2\3\1\177\2\3\1\200\1\3\1\201\1\3"+
    "\1\202\21\3\3\0\2\3\1\0\11\3\1\203\21\3"+
    "\3\0\2\3\1\0\2\3\1\204\14\3\1\205\13\3"+
    "\3\0\2\3\1\0\1\206\1\3\1\207\6\3\1\210"+
    "\5\3\1\211\13\3\3\0\2\3\1\0\1\212\4\3"+
    "\1\213\3\3\1\214\3\3\1\215\1\3\1\216\13\3"+
    "\3\0\2\3\1\0\1\217\16\3\1\220\13\3\3\0"+
    "\2\3\1\0\11\3\1\221\21\3\3\0\2\3\1\0"+
    "\2\36\31\3\3\0\2\3\1\0\2\3\1\36\30\3"+
    "\3\0\2\3\1\0\1\3\1\36\17\3\1\36\11\3"+
    "\3\0\2\3\1\0\4\3\1\222\2\3\1\223\23\3"+
    "\3\0\2\3\1\0\4\3\1\224\26\3\3\0\2\3"+
    "\1\0\4\3\1\225\26\3\3\0\2\3\1\0\20\3"+
    "\1\226\12\3\3\0\2\3\1\0\12\3\1\36\5\3"+
    "\1\227\12\3\3\0\2\3\1\0\22\3\1\36\10\3"+
    "\3\0\2\3\1\0\4\3\1\230\14\3\1\36\11\3"+
    "\3\0\2\3\1\0\1\231\5\3\1\204\1\232\2\3"+
    "\1\233\1\3\1\234\3\3\1\235\12\3\3\0\2\3"+
    "\1\0\11\3\1\236\21\3\3\0\2\3\1\0\13\3"+
    "\1\237\11\3\1\240\5\3\3\0\2\3\1\0\25\3"+
    "\1\236\5\3\3\0\2\3\1\0\12\3\1\241\20\3"+
    "\3\0\2\3\1\0\1\242\17\3\1\243\12\3\3\0"+
    "\2\3\1\0\2\3\1\244\1\3\1\245\5\3\1\246"+
    "\4\3\1\247\13\3\3\0\2\3\1\0\5\3\1\250"+
    "\25\3\3\0\2\3\1\0\1\3\1\251\31\3\3\0"+
    "\2\3\1\0\20\3\1\37\12\3\3\0\2\3\1\0"+
    "\12\3\1\252\20\3\3\0\2\3\1\0\16\3\1\253"+
    "\14\3\3\0\2\3\1\0\3\3\1\254\21\3\1\255"+
    "\5\3\3\0\2\3\1\0\1\256\12\3\1\257\3\3"+
    "\1\260\1\3\1\261\11\3\3\0\2\3\1\0\10\3"+
    "\1\36\22\3\3\0\2\3\1\0\2\3\1\262\30\3"+
    "\3\0\2\3\1\0\25\3\1\263\5\3\3\0\2\3"+
    "\1\0\2\3\1\264\30\3\3\0\2\3\1\0\17\3"+
    "\1\265\13\3\3\0\2\3\1\0\1\266\3\3\1\267"+
    "\2\3\1\270\1\271\1\3\1\272\1\3\1\273\3\3"+
    "\1\274\6\3\1\275\3\3\3\0\2\3\1\0\7\3"+
    "\1\276\16\3\1\277\4\3\3\0\2\3\1\0\7\3"+
    "\1\37\23\3\3\0\2\3\1\0\22\3\1\300\10\3"+
    "\3\0\2\3\1\0\4\3\1\301\20\3\1\302\5\3"+
    "\3\0\2\3\1\0\3\3\1\177\27\3\3\0\2\3"+
    "\1\0\4\3\1\36\1\3\1\303\3\3\1\304\20\3"+
    "\3\0\2\3\1\0\15\3\1\176\15\3\3\0\2\3"+
    "\1\0\7\3\1\305\15\3\1\306\5\3\3\0\2\3"+
    "\1\0\6\3\1\307\11\3\1\177\12\3\3\0\2\3"+
    "\1\0\1\310\13\3\1\177\12\3\1\311\3\3\3\0"+
    "\2\3\1\0\1\312\11\3\1\313\13\3\1\222\4\3"+
    "\3\0\2\3\1\0\6\3\1\314\15\3\1\37\6\3"+
    "\3\0\2\3\1\0\1\3\1\36\3\3\1\315\12\3"+
    "\1\316\12\3\3\0\2\3\1\0\5\3\1\317\25\3"+
    "\3\0\2\3\1\0\2\3\1\320\6\3\1\321\5\3"+
    "\1\322\13\3\3\0\2\3\1\0\1\262\32\3\3\0"+
    "\2\3\1\0\20\3\1\323\12\3\3\0\2\3\1\0"+
    "\16\3\1\324\14\3\3\0\2\3\1\0\27\3\1\325"+
    "\3\3\3\0\2\3\1\0\1\3\1\222\31\3\3\0"+
    "\2\3\1\0\7\3\1\204\23\3\3\0\2\3\1\0"+
    "\2\3\1\326\1\3\1\224\26\3\3\0\2\3\1\0"+
    "\4\3\1\327\26\3\3\0\2\3\1\0\4\3\1\330"+
    "\26\3\3\0\2\3\1\0\14\3\1\331\16\3\3\0"+
    "\2\3\1\0\2\3\1\332\30\3\3\0\2\3\1\0"+
    "\4\3\1\333\13\3\1\334\12\3\3\0\2\3\1\0"+
    "\2\3\1\335\6\3\1\336\21\3\3\0\2\3\1\0"+
    "\11\3\1\61\1\3\1\337\17\3\3\0\2\3\1\0"+
    "\1\340\4\3\1\341\1\342\1\343\3\3\1\344\11\3"+
    "\1\345\5\3\3\0\2\3\1\0\5\3\1\346\25\3"+
    "\3\0\2\3\1\0\1\347\1\3\1\350\30\3\3\0"+
    "\2\3\1\0\10\3\1\351\6\3\1\352\4\3\1\353"+
    "\6\3\3\0\2\3\1\0\1\3\1\354\6\3\1\222"+
    "\22\3\3\0\2\3\1\0\1\355\1\3\1\356\14\3"+
    "\1\357\13\3\3\0\2\3\1\0\7\3\1\61\23\3"+
    "\3\0\2\3\1\0\4\3\1\360\26\3\3\0\2\3"+
    "\1\0\2\3\1\361\6\3\1\362\21\3\3\0\2\3"+
    "\1\0\11\3\1\363\21\3\3\0\2\3\1\0\5\3"+
    "\1\364\5\3\1\365\17\3\3\0\2\3\1\0\6\3"+
    "\1\366\1\367\23\3\3\0\2\3\1\0\5\3\1\370"+
    "\1\3\1\371\23\3\3\0\2\3\1\0\27\3\1\372"+
    "\3\3\3\0\2\3\1\0\7\3\1\373\3\3\1\374"+
    "\17\3\3\0\2\3\1\0\12\3\1\375\20\3\3\0"+
    "\2\3\1\0\4\3\1\376\15\3\1\221\10\3\3\0"+
    "\2\3\1\0\2\3\1\377\6\3\1\u0100\21\3\3\0"+
    "\2\3\1\0\4\3\1\u0101\26\3\3\0\2\3\1\0"+
    "\7\3\1\u0102\23\3\3\0\2\3\1\0\4\3\1\u0103"+
    "\26\3\3\0\2\3\1\0\2\3\1\u0104\30\3\3\0"+
    "\2\3\1\0\1\3\1\u0105\2\3\1\u0106\1\3\1\222"+
    "\1\3\1\u0107\1\3\1\u0108\4\3\1\u0109\1\u010a\12\3"+
    "\3\0\2\3\1\0\11\3\1\u010b\21\3\3\0\2\3"+
    "\1\0\25\3\1\u010c\5\3\3\0\2\3\1\0\27\3"+
    "\1\37\3\3\3\0\2\3\1\0\4\3\1\u010d\2\3"+
    "\1\u010e\2\3\1\u010f\5\3\1\u0110\4\3\1\u0111\5\3"+
    "\3\0\2\3\1\0\1\u0112\32\3\3\0\2\3\1\0"+
    "\1\u0113\32\3\3\0\2\3\1\0\25\3\1\37\5\3"+
    "\3\0\2\3\1\0\5\3\1\u0114\7\3\1\u0115\15\3"+
    "\3\0\2\3\1\0\16\3\1\u0116\6\3\1\36\5\3"+
    "\3\0\2\3\1\0\13\3\1\u0117\17\3\3\0\2\3"+
    "\1\0\23\3\1\37\7\3\3\0\2\3\1\0\20\3"+
    "\1\u0118\12\3\3\0\2\3\1\0\1\u0119\32\3\3\0"+
    "\2\3\1\0\7\3\1\u011a\23\3\3\0\2\3\1\0"+
    "\1\374\32\3\3\0\2\3\1\0\4\3\1\36\26\3"+
    "\3\0\2\3\1\0\1\344\10\3\1\u011b\21\3\3\0"+
    "\2\3\1\0\11\3\1\u011c\21\3\3\0\2\3\1\0"+
    "\4\3\1\u011d\26\3\3\0\2\3\1\0\6\3\1\37"+
    "\24\3\3\0\2\3\1\0\21\3\1\36\11\3\3\0"+
    "\2\3\1\0\7\3\1\367\23\3\3\0\2\3\1\0"+
    "\3\3\1\36\1\360\26\3\3\0\2\3\1\0\5\3"+
    "\1\355\25\3\3\0\2\3\1\0\1\3\1\u011e\4\3"+
    "\1\153\24\3\3\0\2\3\1\0\6\3\1\u011f\24\3"+
    "\3\0\2\3\1\0\17\3\1\u0120\13\3\3\0\2\3"+
    "\1\0\17\3\1\u0121\13\3\3\0\2\3\1\0\5\3"+
    "\1\u0102\25\3\3\0\2\3\1\0\2\3\1\u0122\14\3"+
    "\1\75\13\3\3\0\2\3\1\0\4\3\1\u0123\26\3"+
    "\3\0\2\3\1\0\5\3\1\u0124\1\3\1\u0125\23\3"+
    "\3\0\2\3\1\0\2\3\1\u0126\30\3\3\0\2\3"+
    "\1\0\17\3\1\262\13\3\3\0\2\3\1\0\2\3"+
    "\1\374\30\3\3\0\2\3\1\0\11\3\1\u0127\21\3"+
    "\3\0\2\3\1\0\17\3\1\u0128\13\3\3\0\2\3"+
    "\1\0\15\3\1\u0129\15\3\3\0\2\3\1\0\11\3"+
    "\1\u012a\21\3\3\0\2\3\1\0\2\3\1\u012b\30\3"+
    "\3\0\2\3\1\0\1\u012c\1\3\1\36\30\3\3\0"+
    "\2\3\1\0\7\3\1\u012d\23\3\3\0\2\3\1\0"+
    "\2\3\1\u012e\30\3\3\0\2\3\1\0\7\3\1\u012f"+
    "\7\3\1\u0130\13\3\3\0\2\3\1\0\1\u0131\1\3"+
    "\1\u0132\30\3\3\0\2\3\1\0\12\3\1\u0133\20\3"+
    "\3\0\2\3\1\0\16\3\1\75\14\3\3\0\2\3"+
    "\1\0\1\221\32\3\3\0\2\3\1\0\12\3\1\36"+
    "\20\3\3\0\2\3\1\0\22\3\1\u0134\10\3\3\0"+
    "\2\3\1\0\4\3\1\u0135\5\3\1\u0136\11\3\1\36"+
    "\6\3\3\0\2\3\1\0\12\3\1\u011f\20\3\3\0"+
    "\2\3\1\0\2\3\1\u0137\2\3\1\u0138\25\3\3\0"+
    "\2\3\1\0\2\3\1\u0139\30\3\3\0\2\3\1\0"+
    "\4\3\1\36\13\3\1\u013a\12\3\3\0\2\3\1\0"+
    "\7\3\1\u013b\23\3\3\0\2\3\1\0\33\3\1\u013c"+
    "\2\0\2\3\1\0\1\u013d\32\3\3\0\2\3\1\0"+
    "\7\3\1\u013e\23\3\3\0\2\3\1\0\4\3\1\u013f"+
    "\26\3\3\0\2\3\1\0\10\3\1\u0140\22\3\3\0"+
    "\2\3\1\0\6\3\1\u0141\10\3\1\u0142\13\3\3\0"+
    "\2\3\1\0\2\3\1\36\3\3\1\u0127\24\3\3\0"+
    "\2\3\1\0\22\3\1\u0143\2\3\1\36\5\3\3\0"+
    "\2\3\1\0\30\3\1\u0144\2\3\3\0\2\3\1\0"+
    "\6\3\1\36\24\3\3\0\2\3\1\0\2\3\1\u0145"+
    "\30\3\3\0\2\3\1\0\32\3\1\u0146\3\0\2\3"+
    "\1\0\20\3\1\u0147\12\3\3\0\2\3\1\0\1\3"+
    "\1\u0148\5\3\1\36\23\3\3\0\2\3\1\0\13\3"+
    "\1\u0149\17\3\3\0\2\3\1\0\1\u014a\32\3\3\0"+
    "\2\3\1\0\7\3\1\u014b\23\3\3\0\2\3\1\0"+
    "\11\3\1\u014c\21\3\3\0\2\3\1\0\2\3\1\u014d"+
    "\30\3\3\0\2\3\1\0\4\3\1\u014e\26\3\3\0"+
    "\2\3\1\0\2\3\1\u014f\6\3\1\u0150\21\3\3\0"+
    "\2\3\1\0\7\3\1\u0151\23\3\3\0\2\3\1\0"+
    "\12\3\1\u0152\5\3\1\36\1\3\1\u0153\10\3\3\0"+
    "\2\3\1\0\15\3\1\177\15\3\3\0\2\3\1\0"+
    "\13\3\1\u0154\3\3\1\u0155\13\3\3\0\2\3\1\0"+
    "\2\3\1\u0156\30\3\3\0\2\3\1\0\2\3\1\36"+
    "\7\3\1\u0157\20\3\3\0\2\3\1\0\15\3\1\u0158"+
    "\15\3\3\0\2\3\1\0\7\3\1\u0159\23\3\3\0"+
    "\2\3\1\0\2\3\1\u015a\30\3\3\0\2\3\1\0"+
    "\22\3\1\u015b\10\3\3\0\2\3\1\0\1\3\1\372"+
    "\31\3\3\0\2\3\1\0\2\3\1\367\30\3\3\0"+
    "\2\3\1\0\1\3\1\36\31\3\3\0\2\3\1\0"+
    "\1\367\32\3\3\0\2\3\1\0\2\3\1\u015c\30\3"+
    "\3\0\2\3\1\0\4\3\1\u015d\26\3\3\0\2\3"+
    "\1\0\12\3\1\313\20\3\3\0\2\3\1\0\12\3"+
    "\1\u015e\20\3\3\0\2\3\1\0\10\3\1\u012f\1\3"+
    "\1\u015f\5\3\1\u0160\12\3\3\0\2\3\1\0\12\3"+
    "\1\u0161\20\3\3\0\2\3\1\0\6\3\1\177\2\3"+
    "\1\374\13\3\1\u0162\1\3\1\u0163\3\3\3\0\2\3"+
    "\1\0\17\3\1\42\13\3\3\0\2\3\1\0\7\3"+
    "\1\u0164\23\3\3\0\2\3\1\0\11\3\1\177\21\3"+
    "\3\0\2\3\1\0\6\3\1\u0165\24\3\3\0\2\3"+
    "\1\0\2\3\1\u0166\30\3\3\0\2\3\1\0\2\3"+
    "\1\374\5\3\1\u0107\22\3\3\0\2\3\1\0\20\3"+
    "\1\u0167\12\3\3\0\2\3\1\0\5\3\1\u0168\25\3"+
    "\3\0\2\3\1\0\1\u0169\32\3\3\0\2\3\1\0"+
    "\2\3\1\36\1\3\1\36\5\3\1\u016a\20\3\3\0"+
    "\2\3\1\0\1\u012e\32\3\3\0\2\3\1\0\20\3"+
    "\1\u0156\12\3\3\0\2\3\1\0\20\3\1\u016b\12\3"+
    "\3\0\2\3\1\0\7\3\1\u016c\23\3\3\0\2\3"+
    "\1\0\5\3\1\u016d\25\3\3\0\2\3\1\0\4\3"+
    "\1\u016e\1\3\1\u016f\11\3\1\u0170\6\3\1\u0171\3\3"+
    "\3\0\2\3\1\0\7\3\1\u0172\3\3\1\u0173\17\3"+
    "\3\0\2\3\1\0\6\3\1\177\24\3\3\0\2\3"+
    "\1\0\10\3\1\u0174\14\3\1\u0175\5\3\3\0\2\3"+
    "\1\0\5\3\1\u0176\12\3\1\u0177\12\3\3\0\2\3"+
    "\1\0\5\3\1\u0178\25\3\3\0\2\3\1\0\12\3"+
    "\1\u0179\20\3\3\0\2\3\1\0\17\3\1\116\13\3"+
    "\3\0\2\3\1\0\11\3\1\262\20\3\1\u017a\3\0"+
    "\2\3\1\0\6\3\1\u017b\24\3\3\0\2\3\1\0"+
    "\1\u0121\32\3\3\0\2\3\1\0\22\3\1\37\10\3"+
    "\3\0\2\3\1\0\5\3\1\36\25\3\3\0\2\3"+
    "\1\0\6\3\1\46\24\3\3\0\2\3\1\0\12\3"+
    "\1\u0101\20\3\3\0\2\3\1\0\2\3\1\u017c\30\3"+
    "\3\0\2\3\1\0\25\3\1\36\5\3\3\0\2\3"+
    "\1\0\1\177\32\3\3\0\2\3\1\0\2\3\1\u017d"+
    "\1\3\1\u017e\26\3\3\0\2\3\1\0\6\3\1\312"+
    "\24\3\3\0\2\3\1\0\12\3\1\42\20\3\3\0"+
    "\2\3\1\0\7\3\1\36\23\3\3\0\2\3\1\0"+
    "\20\3\1\177\12\3\3\0\2\3\1\0\2\3\1\36"+
    "\4\3\1\u017f\23\3\3\0\2\3\1\0\17\3\1\357"+
    "\13\3\3\0\2\3\1\0\1\3\1\u0180\31\3\3\0"+
    "\2\3\1\0\24\3\1\u011b\6\3\3\0\2\3\1\0"+
    "\26\3\1\u0181\4\3\3\0\2\3\1\0\1\u0102\32\3"+
    "\3\0\2\3\1\0\26\3\1\61\4\3\3\0\2\3"+
    "\1\0\15\3\1\36\15\3\3\0\2\3\1\0\24\3"+
    "\1\36\6\3\3\0\2\3\1\0\30\3\1\u0182\2\3"+
    "\3\0\2\3\1\0\6\3\1\u0183\24\3\3\0\2\3"+
    "\1\0\2\3\1\u0184\14\3\1\u0185\13\3\3\0\2\3"+
    "\1\0\2\3\1\u0186\6\3\1\36\21\3\3\0\2\3"+
    "\1\0\13\3\1\177\17\3\3\0\2\3\1\0\7\3"+
    "\1\u0187\23\3\3\0\2\3\1\0\4\3\1\u0188\26\3"+
    "\3\0\2\3\1\0\2\3\1\u0189\30\3\3\0\2\3"+
    "\1\0\7\3\1\u018a\23\3\3\0\2\3\1\0\2\3"+
    "\1\u018b\30\3\3\0\2\3\1\0\13\3\1\u018c\17\3"+
    "\3\0\2\3\1\0\2\3\1\u018d\30\3\3\0\2\3"+
    "\1\0\4\3\1\224\4\3\1\365\1\3\1\u018e\17\3"+
    "\3\0\2\3\1\0\20\3\1\u018f\12\3\3\0\2\3"+
    "\1\0\1\u0190\32\3\3\0\2\3\1\0\4\3\1\u0191"+
    "\26\3\3\0\2\3\1\0\12\3\1\37\20\3\3\0"+
    "\2\3\1\0\11\3\1\205\21\3\3\0\2\3\1\0"+
    "\2\3\1\u0192\30\3\3\0\2\3\1\0\20\3\1\u0193"+
    "\12\3\3\0\2\3\1\0\4\3\1\u0194\26\3\3\0"+
    "\2\3\1\0\4\3\1\u0195\26\3\3\0\2\3\1\0"+
    "\7\3\1\u0196\23\3\3\0\2\3\1\0\2\3\1\u0197"+
    "\7\3\1\u0198\5\3\1\u0199\5\3\1\u019a\4\3\3\0"+
    "\2\3\1\0\13\3\1\236\17\3\3\0\2\3\1\0"+
    "\16\3\1\313\14\3\3\0\2\3\1\0\11\3\1\36"+
    "\21\3\3\0\2\3\1\0\13\3\1\75\17\3\3\0"+
    "\2\3\1\0\13\3\1\u012e\17\3\3\0\2\3\1\0"+
    "\4\3\1\u019b\26\3\3\0\2\3\1\0\4\3\1\u019c"+
    "\26\3\3\0\2\3\1\0\5\3\1\37\1\u019d\24\3"+
    "\3\0\2\3\1\0\15\3\1\u019e\15\3\3\0\2\3"+
    "\1\0\12\3\1\102\6\3\1\372\11\3\3\0\2\3"+
    "\1\0\13\3\1\u019f\17\3\3\0\2\3\1\0\26\3"+
    "\1\36\4\3\3\0\2\3\1\0\12\3\1\335\20\3"+
    "\3\0\2\3\1\0\11\3\1\262\21\3\3\0\2\3"+
    "\1\0\11\3\1\u01a0\21\3\3\0\2\3\1\0\7\3"+
    "\1\u0174\23\3\3\0\2\3\1\0\5\3\1\42\25\3"+
    "\3\0\2\3\1\0\16\3\1\u01a1\14\3\3\0\2\3"+
    "\1\0\7\3\1\u01a2\23\3\3\0\2\3\1\0\4\3"+
    "\1\37\26\3\3\0\2\3\1\0\1\u01a3\32\3\3\0"+
    "\2\3\1\0\25\3\1\313\5\3\3\0\2\3\1\0"+
    "\13\3\1\u01a4\17\3\3\0\2\3\1\0\5\3\1\u01a5"+
    "\25\3\3\0\2\3\1\0\5\3\1\u01a6\25\3\3\0"+
    "\2\3\1\0\6\3\1\u01a7\24\3\3\0\2\3\1\0"+
    "\5\3\1\u01a8\11\3\1\u01a9\13\3\3\0\2\3\1\0"+
    "\11\3\1\u01aa\21\3\3\0\2\3\1\0\5\3\1\u01ab"+
    "\25\3\3\0\2\3\1\0\1\u018d\32\3\3\0\2\3"+
    "\1\0\10\3\1\u01ac\22\3\3\0\2\3\1\0\4\3"+
    "\1\u0156\26\3\3\0\2\3\1\0\27\3\1\367\3\3"+
    "\10\0\1\u01ad\33\0\2\3\1\0\10\3\1\37\22\3"+
    "\3\0\2\3\1\0\2\3\1\u01ae\30\3\3\0\2\3"+
    "\1\0\20\3\1\u01af\12\3\3\0\2\3\1\0\11\3"+
    "\1\u01b0\21\3\3\0\2\3\1\0\20\3\1\u01b1\12\3"+
    "\3\0\2\3\1\0\7\3\1\372\23\3\3\0\2\3"+
    "\1\0\22\3\1\222\10\3\3\0\2\3\1\0\12\3"+
    "\1\u01b2\20\3\3\0\2\3\1\0\20\3\1\u01b3\2\3"+
    "\1\u01b4\7\3\3\0\2\3\1\0\13\3\1\313\17\3"+
    "\3\0\2\3\1\0\2\3\1\u0197\30\3\3\0\2\3"+
    "\1\0\4\3\1\u01b5\26\3\3\0\2\3\1\0\5\3"+
    "\1\262\25\3\3\0\2\3\1\0\4\3\1\u01b6\26\3"+
    "\3\0\2\3\1\0\17\3\1\u01b7\13\3\3\0\2\3"+
    "\1\0\6\3\1\u01b8\24\3\3\0\2\3\1\0\5\3"+
    "\1\u01b9\25\3\3\0\2\3\1\0\5\3\1\u01ba\3\3"+
    "\1\u01a3\21\3\3\0\2\3\1\0\5\3\1\177\25\3"+
    "\3\0\2\3\1\0\24\3\1\37\6\3\3\0\2\3"+
    "\1\0\16\3\1\u01bb\14\3\3\0\2\3\1\0\11\3"+
    "\1\u01bc\21\3\3\0\2\3\1\0\13\3\1\u01bd\17\3"+
    "\3\0\2\3\1\0\5\3\1\313\25\3\3\0\2\3"+
    "\1\0\11\3\1\u01ab\21\3\3\0\2\3\1\0\20\3"+
    "\1\36\12\3\3\0\2\3\1\0\7\3\1\u01be\23\3"+
    "\3\0\2\3\1\0\2\3\1\u01bf\30\3\3\0\2\3"+
    "\1\0\17\3\1\u01c0\13\3\3\0\2\3\1\0\5\3"+
    "\1\u0164\25\3\3\0\2\3\1\0\13\3\1\u01c1\17\3"+
    "\3\0\2\3\1\0\6\3\1\u011d\24\3\3\0\2\3"+
    "\1\0\17\3\1\313\13\3\3\0\2\3\1\0\2\3"+
    "\1\344\30\3\3\0\2\3\1\0\17\3\1\u01c2\13\3"+
    "\3\0\2\3\1\0\2\3\1\u01c3\30\3\3\0\2\3"+
    "\1\0\2\3\1\u01c4\30\3\3\0\2\3\1\0\1\u01c5"+
    "\32\3\3\0\2\3\1\0\17\3\1\u01c6\13\3\3\0"+
    "\2\3\1\0\17\3\1\241\13\3\3\0\2\3\1\0"+
    "\1\3\1\u01c7\1\3\1\u01c8\1\3\1\u01c9\24\3\1\u01ca"+
    "\3\0\2\3\1\0\4\3\1\u01cb\26\3\3\0\2\3"+
    "\1\0\2\3\1\u013a\30\3\3\0\2\3\1\0\7\3"+
    "\1\u01cc\23\3\3\0\2\3\1\0\7\3\1\u01cd\23\3"+
    "\3\0\2\3\1\0\1\u01ce\32\3\3\0\2\3\1\0"+
    "\4\3\1\u01cf\26\3\3\0\2\3\1\0\2\3\1\u01d0"+
    "\30\3\3\0\2\3\1\0\2\3\1\u01d1\30\3\3\0"+
    "\2\3\1\0\1\u01d2\16\3\1\u01d3\13\3\3\0\2\3"+
    "\1\0\2\3\1\u01d4\30\3\3\0\2\3\1\0\4\3"+
    "\1\u01d5\26\3\3\0\2\3\1\0\2\3\1\u014f\30\3"+
    "\3\0\2\3\1\0\1\u01d6\32\3\3\0\2\3\1\0"+
    "\25\3\1\262\5\3\3\0\2\3\1\0\17\3\1\177"+
    "\13\3\3\0\2\3\1\0\2\3\1\u01d7\30\3\3\0"+
    "\2\3\1\0\11\3\1\374\21\3\3\0\2\3\1\0"+
    "\1\u01d8\27\3\1\u0182\2\3\3\0\2\3\1\0\24\3"+
    "\1\u01d9\6\3\3\0\2\3\1\0\13\3\1\37\17\3"+
    "\3\0\2\3\1\0\11\3\1\u01da\21\3\3\0\2\3"+
    "\1\0\4\3\1\u01db\26\3\3\0\2\3\1\0\17\3"+
    "\1\u01dc\13\3\3\0\2\3\1\0\5\3\1\113\25\3"+
    "\3\0\2\3\1\0\14\3\1\u01dd\16\3\3\0\2\3"+
    "\1\0\7\3\1\u01de\23\3\3\0\2\3\1\0\2\3"+
    "\1\67\30\3\3\0\2\3\1\0\7\3\1\u01df\23\3"+
    "\3\0\2\3\1\0\4\3\1\u01e0\26\3\3\0\2\3"+
    "\1\0\3\3\1\36\27\3\3\0\2\3\1\0\12\3"+
    "\1\u01e1\20\3\3\0\2\3\1\0\5\3\1\u01e2\14\3"+
    "\1\222\10\3\3\0\2\3\1\0\13\3\1\u01e3\17\3"+
    "\3\0\2\3\1\0\17\3\1\u01e4\13\3\3\0\2\3"+
    "\1\0\5\3\1\177\1\u01e5\24\3\3\0\2\3\1\0"+
    "\1\42\32\3\3\0\2\3\1\0\1\3\1\u01e6\31\3"+
    "\3\0\2\3\1\0\20\3\1\222\12\3\3\0\2\3"+
    "\1\0\12\3\1\177\20\3\3\0\2\3\1\0\5\3"+
    "\1\u01e7\25\3\3\0\2\3\1\0\17\3\1\u01e8\13\3"+
    "\3\0\2\3\1\0\6\3\1\u01e9\24\3\3\0\2\3"+
    "\1\0\17\3\1\u01ea\13\3\3\0\2\3\1\0\25\3"+
    "\1\u01eb\5\3\3\0\2\3\1\0\4\3\1\u01ec\26\3"+
    "\3\0\2\3\1\0\1\3\1\u017b\31\3\3\0\2\3"+
    "\1\0\2\3\1\u01ed\30\3\3\0\2\3\1\0\7\3"+
    "\1\u01ee\23\3\3\0\2\3\1\0\5\3\1\u01ef\25\3"+
    "\3\0\2\3\1\0\1\36\10\3\1\u01e3\21\3\3\0"+
    "\2\3\1\0\4\3\1\335\26\3\3\0\2\3\1\0"+
    "\1\u01f0\32\3\3\0\2\3\1\0\14\3\1\u0177\16\3"+
    "\3\0\2\3\1\0\2\3\1\u0148\30\3\3\0\2\3"+
    "\1\0\2\3\1\u01f1\30\3\3\0\2\3\1\0\17\3"+
    "\1\u01f2\13\3\3\0\2\3\1\0\2\3\1\u01f3\30\3"+
    "\3\0\2\3\1\0\5\3\1\u01f4\25\3\3\0\2\3"+
    "\1\0\1\61\32\3\3\0\2\3\1\0\5\3\1\37"+
    "\25\3\3\0\2\3\1\0\7\3\1\177\23\3\3\0"+
    "\2\3\1\0\5\3\1\u01f5\25\3\3\0\2\3\1\0"+
    "\17\3\1\u01f6\13\3\3\0\2\3\1\0\11\3\1\u01ea"+
    "\21\3\3\0\2\3\1\0\17\3\1\u01f7\13\3\3\0"+
    "\2\3\1\0\6\3\1\u018d\24\3\3\0\2\3\1\0"+
    "\6\3\1\u01f8\24\3\3\0\2\3\1\0\6\3\1\313"+
    "\24\3\3\0\2\3\1\0\4\3\1\u01f9\26\3\11\0"+
    "\1\u01fa\32\0\2\3\1\0\20\3\1\u01fb\12\3\3\0"+
    "\2\3\1\0\17\3\1\172\13\3\3\0\2\3\1\0"+
    "\5\3\1\u0162\25\3\3\0\2\3\1\0\1\366\6\3"+
    "\1\u0172\23\3\3\0\2\3\1\0\11\3\1\u01fc\21\3"+
    "\3\0\2\3\1\0\4\3\1\u01fd\26\3\3\0\2\3"+
    "\1\0\11\3\1\u01fe\21\3\3\0\2\3\1\0\2\3"+
    "\1\100\30\3\3\0\2\3\1\0\17\3\1\162\13\3"+
    "\3\0\2\3\1\0\12\3\1\u018a\20\3\3\0\2\3"+
    "\1\0\14\3\1\u01ff\16\3\3\0\2\3\1\0\2\3"+
    "\1\u0200\30\3\3\0\2\3\1\0\17\3\1\u018d\13\3"+
    "\3\0\2\3\1\0\1\u01bf\32\3\3\0\2\3\1\0"+
    "\13\3\1\344\17\3\3\0\2\3\1\0\17\3\1\u0201"+
    "\13\3\3\0\2\3\1\0\13\3\1\337\17\3\3\0"+
    "\2\3\1\0\12\3\1\u0102\20\3\3\0\2\3\1\0"+
    "\14\3\1\36\16\3\3\0\2\3\1\0\1\355\32\3"+
    "\3\0\2\3\1\0\20\3\1\224\12\3\3\0\2\3"+
    "\1\0\5\3\1\162\25\3\3\0\2\3\1\0\1\3"+
    "\1\u0202\31\3\3\0\2\3\1\0\5\3\1\204\25\3"+
    "\3\0\2\3\1\0\7\3\1\u0203\23\3\3\0\2\3"+
    "\1\0\1\u0204\32\3\3\0\2\3\1\0\25\3\1\367"+
    "\5\3\3\0\2\3\1\0\11\3\1\u0205\21\3\3\0"+
    "\2\3\1\0\13\3\1\u0206\17\3\3\0\2\3\1\0"+
    "\1\u0207\32\3\3\0\2\3\1\0\11\3\1\46\21\3"+
    "\3\0\2\3\1\0\1\3\1\u0208\31\3\3\0\2\3"+
    "\1\0\2\3\1\u0209\30\3\3\0\2\3\1\0\20\3"+
    "\1\u0113\12\3\3\0\2\3\1\0\20\3\1\u020a\12\3"+
    "\3\0\2\3\1\0\17\3\1\u020b\13\3\3\0\2\3"+
    "\1\0\6\3\1\u017a\24\3\3\0\2\3\1\0\12\3"+
    "\1\u01ac\20\3\3\0\2\3\1\0\5\3\1\u020c\25\3"+
    "\3\0\2\3\1\0\4\3\1\u020d\26\3\3\0\2\3"+
    "\1\0\6\3\1\u020e\24\3\3\0\2\3\1\0\12\3"+
    "\1\u020f\20\3\3\0\2\3\1\0\10\3\1\u0210\22\3"+
    "\3\0\2\3\1\0\26\3\1\262\4\3\3\0\2\3"+
    "\1\0\2\3\1\u0211\30\3\3\0\2\3\1\0\22\3"+
    "\1\262\10\3\3\0\2\3\1\0\1\u0212\32\3\3\0"+
    "\2\3\1\0\11\3\1\u01bf\21\3\3\0\2\3\1\0"+
    "\2\3\1\u0213\30\3\3\0\2\3\1\0\17\3\1\u0214"+
    "\13\3\3\0\2\3\1\0\1\u0215\32\3\3\0\2\3"+
    "\1\0\20\3\1\u010e\6\3\1\313\3\3\3\0\2\3"+
    "\1\0\1\3\1\37\31\3\3\0\2\3\1\0\1\u0216"+
    "\32\3\3\0\2\3\1\0\20\3\1\u0217\12\3\3\0"+
    "\2\3\1\0\17\3\1\335\13\3\3\0\2\3\1\0"+
    "\17\3\1\u0218\13\3\3\0\2\3\1\0\11\3\1\u0219"+
    "\21\3\3\0\2\3\1\0\4\3\1\u021a\26\3\3\0"+
    "\2\3\1\0\20\3\1\u021b\12\3\3\0\2\3\1\0"+
    "\1\36\32\3\3\0\2\3\1\0\5\3\1\372\25\3"+
    "\3\0\2\3\1\0\25\3\1\u021c\5\3\3\0\2\3"+
    "\1\0\17\3\1\344\13\3\3\0\2\3\1\0\5\3"+
    "\1\u0177\25\3\3\0\2\3\1\0\5\3\1\u021d\25\3"+
    "\3\0\2\3\1\0\27\3\1\222\3\3\3\0\2\3"+
    "\1\0\6\3\1\u021e\24\3\3\0\2\3\1\0\17\3"+
    "\1\u021f\13\3\3\0\2\3\1\0\1\237\1\3\1\312"+
    "\30\3\3\0\2\3\1\0\10\3\1\u0215\5\3\1\37"+
    "\14\3\3\0\2\3\1\0\16\3\1\u0220\14\3\3\0"+
    "\2\3\1\0\6\3\1\u010e\24\3\10\0\1\u0221\33\0"+
    "\2\3\1\0\1\u0222\32\3\3\0\2\3\1\0\6\3"+
    "\1\u0223\24\3\3\0\2\3\1\0\1\53\32\3\3\0"+
    "\2\3\1\0\6\3\1\u0224\24\3\3\0\2\3\1\0"+
    "\17\3\1\u0225\13\3\3\0\2\3\1\0\6\3\1\u0226"+
    "\24\3\3\0\2\3\1\0\1\3\1\u0227\31\3\3\0"+
    "\2\3\1\0\13\3\1\u01a3\17\3\3\0\2\3\1\0"+
    "\2\3\1\u0228\30\3\3\0\2\3\1\0\4\3\1\u0229"+
    "\26\3\3\0\2\3\1\0\26\3\1\u022a\4\3\3\0"+
    "\2\3\1\0\2\3\1\u01c5\30\3\3\0\2\3\1\0"+
    "\10\3\1\u0156\22\3\3\0\2\3\1\0\2\3\1\u022b"+
    "\30\3\3\0\2\3\1\0\5\3\1\u022c\25\3\3\0"+
    "\2\3\1\0\10\3\1\u022d\22\3\3\0\2\3\1\0"+
    "\6\3\1\u022e\24\3\3\0\2\3\1\0\1\u022f\32\3"+
    "\3\0\2\3\1\0\2\3\1\36\14\3\1\u0128\13\3"+
    "\3\0\2\3\1\0\4\3\1\u0230\26\3\3\0\2\3"+
    "\1\0\4\3\1\u0231\26\3\3\0\2\3\1\0\11\3"+
    "\1\u01ee\21\3\3\0\2\3\1\0\3\3\1\u0232\27\3"+
    "\3\0\2\3\1\0\12\3\1\u0215\20\3\3\0\2\3"+
    "\1\0\6\3\1\u0233\24\3\3\0\2\3\1\0\4\3"+
    "\1\u0234\26\3\3\0\2\3\1\0\4\3\1\u0177\26\3"+
    "\3\0\2\3\1\0\7\3\1\u0235\23\3\3\0\2\3"+
    "\1\0\17\3\1\u014a\13\3\3\0\2\3\1\0\4\3"+
    "\1\u0236\26\3\3\0\2\3\1\0\6\3\1\u0237\24\3"+
    "\3\0\2\3\1\0\17\3\1\u0238\13\3\3\0\2\3"+
    "\1\0\4\3\1\u0239\26\3\3\0\2\3\1\0\30\3"+
    "\1\u023a\2\3\3\0\2\3\1\0\6\3\1\372\24\3"+
    "\3\0\2\3\1\0\22\3\1\u023b\10\3\3\0\2\3"+
    "\1\0\23\3\1\u018a\7\3\3\0\2\3\1\0\13\3"+
    "\1\u023c\17\3\20\0\1\u023d\23\0\2\3\1\0\25\3"+
    "\1\u023e\5\3\3\0\2\3\1\0\27\3\1\u0171\3\3"+
    "\3\0\2\3\1\0\2\3\1\u023f\30\3\3\0\2\3"+
    "\1\0\22\3\1\u0202\10\3\3\0\2\3\1\0\12\3"+
    "\1\302\20\3\3\0\2\3\1\0\12\3\1\u0240\20\3"+
    "\3\0\2\3\1\0\22\3\1\302\10\3\3\0\2\3"+
    "\1\0\1\u0241\32\3\3\0\2\3\1\0\20\3\1\u0242"+
    "\12\3\3\0\2\3\1\0\2\3\1\312\30\3\3\0"+
    "\2\3\1\0\11\3\1\u0243\21\3\3\0\2\3\1\0"+
    "\20\3\1\u0244\12\3\3\0\2\3\1\0\17\3\1\u0245"+
    "\13\3\3\0\2\3\1\0\30\3\1\u0246\2\3\3\0"+
    "\2\3\1\0\2\3\1\u0247\30\3\3\0\2\3\1\0"+
    "\4\3\1\u0244\26\3\3\0\2\3\1\0\22\3\1\153"+
    "\10\3\3\0\2\3\1\0\21\3\1\u0248\11\3\3\0"+
    "\2\3\1\0\21\3\1\u0249\11\3\3\0\2\3\1\0"+
    "\12\3\1\u024a\20\3\3\0\2\3\1\0\17\3\1\u024b"+
    "\13\3\3\0\2\3\1\0\5\3\1\u024c\25\3\3\0"+
    "\2\3\1\0\4\3\1\u022c\26\3\3\0\2\3\1\0"+
    "\10\3\1\75\22\3\3\0\2\3\1\0\30\3\1\u024d"+
    "\2\3\3\0\2\3\1\0\11\3\1\367\21\3\3\0"+
    "\2\3\1\0\20\3\1\u024e\12\3\3\0\2\3\1\0"+
    "\2\3\1\177\30\3\3\0\2\3\1\0\6\3\1\310"+
    "\24\3\3\0\2\3\1\0\4\3\1\u024f\26\3\3\0"+
    "\2\3\1\0\6\3\1\u0250\24\3\3\0\2\3\1\0"+
    "\1\3\1\335\2\3\1\u0251\6\3\1\u018c\17\3\3\0"+
    "\2\3\1\0\5\3\1\u0103\25\3\3\0\2\3\1\0"+
    "\12\3\1\u0240\15\3\1\u0252\2\3\3\0\2\3\1\0"+
    "\1\u0253\32\3\3\0\2\3\1\0\20\3\1\u0254\3\3"+
    "\1\u0255\6\3\3\0\2\3\1\0\12\3\1\u0156\20\3"+
    "\3\0\2\3\1\0\11\3\1\u011b\21\3\3\0\2\3"+
    "\1\0\15\3\1\u0256\7\3\1\u0257\5\3\3\0\2\3"+
    "\1\0\11\3\1\u0258\21\3\3\0\2\3\1\0\1\237"+
    "\32\3\3\0\2\3\1\0\4\3\1\u01f3\26\3\3\0"+
    "\2\3\1\0\17\3\1\u0259\13\3\3\0\2\3\1\0"+
    "\17\3\1\u025a\13\3\3\0\2\3\1\0\13\3\1\u025b"+
    "\17\3\3\0\2\3\1\0\17\3\1\u025c\13\3\3\0"+
    "\2\3\1\0\2\3\1\u025d\30\3\3\0\2\3\1\0"+
    "\11\3\1\u025e\21\3\3\0\2\3\1\0\17\3\1\u025f"+
    "\13\3\3\0\2\3\1\0\13\3\1\u0260\17\3\3\0"+
    "\2\3\1\0\25\3\1\u0261\5\3\3\0\2\3\1\0"+
    "\6\3\1\u0262\24\3\3\0\2\3\1\0\1\3\1\u0175"+
    "\31\3\3\0\2\3\1\0\25\3\1\u0263\5\3\3\0"+
    "\2\3\1\0\21\3\1\u0264\11\3\3\0\2\3\1\0"+
    "\13\3\1\374\17\3\3\0\2\3\1\0\6\3\1\u0174"+
    "\24\3\3\0\2\3\1\0\5\3\1\u0113\25\3\3\0"+
    "\2\3\1\0\2\3\1\u0265\30\3\3\0\2\3\1\0"+
    "\20\3\1\u0171\12\3\3\0\2\3\1\0\17\3\1\u0266"+
    "\13\3\3\0\2\3\1\0\10\3\1\u0267\22\3\3\0"+
    "\2\3\1\0\20\3\1\u01b3\12\3\3\0\2\3\1\0"+
    "\7\3\1\u0268\23\3\3\0\2\3\1\0\15\3\1\u0269"+
    "\15\3\3\0\2\3\1\0\1\u026a\32\3\3\0\2\3"+
    "\1\0\5\3\1\u026b\25\3\3\0\2\3\1\0\5\3"+
    "\1\u026c\25\3\3\0\2\3\1\0\1\u026d\32\3\3\0"+
    "\2\3\1\0\17\3\1\u026e\13\3\3\0\2\3\1\0"+
    "\20\3\1\u026f\12\3\3\0\2\3\1\0\4\3\1\u0270"+
    "\26\3\3\0\2\3\1\0\2\3\1\u0271\30\3\3\0"+
    "\2\3\1\0\21\3\1\u0272\11\3\3\0\2\3\1\0"+
    "\1\3\1\u0273\2\3\1\u024f\26\3\3\0\2\3\1\0"+
    "\2\3\1\u0274\30\3\3\0\2\3\1\0\4\3\1\u0275"+
    "\26\3\3\0\2\3\1\0\1\u0276\32\3\3\0\2\3"+
    "\1\0\17\3\1\u0277\13\3\3\0\2\3\1\0\7\3"+
    "\1\u0278\23\3\3\0\2\3\1\0\20\3\1\u0271\12\3"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\u0139\1\1\0\160\1\1\0\114\1\1\0"+
    "\46\1\1\0\33\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 5: break;
          case 2: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Identificador;
            } 
            // fall through
          case 6: break;
          case 3: 
            { /*Ignore*/
            } 
            // fall through
          case 7: break;
          case 4: 
            { lexeme=yytext(); linea=yyline; columna=yycolumn; return Palabra_Reservada;
            } 
            // fall through
          case 8: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
