/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import static AnalizadorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/Compiladores/AL-xicoDeSQL/AL_SQL/src/AnalizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\44\1\44\1\4\22\0\1\4\12\0\1\12"+
    "\1\4\1\43\1\13\1\0\2\6\10\3\7\0\1\14\1\27\1\24"+
    "\1\15\1\16\1\25\1\33\1\26\1\30\1\41\1\35\1\11\1\36"+
    "\1\7\1\23\1\22\1\42\1\21\1\31\1\20\1\10\1\40\1\37"+
    "\1\17\1\32\1\34\4\0\1\2\1\0\4\1\1\5\25\1\12\0"+
    "\1\44\u1fa2\0\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\2\2\1"+
    "\25\2\1\6\3\2\1\7\10\2\2\0\1\10\4\2"+
    "\1\7\3\2\1\7\20\2\1\7\17\2\1\7\1\2"+
    "\1\7\2\2\1\7\26\2\1\7\1\2\1\7\21\2"+
    "\1\7\17\2\1\0\14\2\1\7\7\2\1\0\1\2"+
    "\1\7\7\2\1\7\7\2\1\7\50\2\1\7\26\2"+
    "\1\7\13\2\1\7\1\2\1\7\11\2\1\7\12\2"+
    "\1\7\4\2\1\7\7\2\1\6\1\0\1\7\12\2"+
    "\1\10\1\0\14\2\1\7\3\2\1\0\11\2\1\7"+
    "\3\2\1\7\3\2\1\7\17\2\1\7\2\2\1\7"+
    "\2\2\1\7\17\2\1\7\42\2\2\7\22\2\1\0"+
    "\1\2\1\7\46\2\1\7\30\2\1\7\5\2\1\0"+
    "\1\7\46\2\1\0\11\2\1\7\1\2\1\7\11\2"+
    "\1\7\5\2\1\7\6\2\1\7\3\2\1\7\34\2"+
    "\1\7\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\157\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e"+
    "\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u014d\0\u0681"+
    "\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\112\0\u073a\0\u075f\0\u0784"+
    "\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24"+
    "\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74"+
    "\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4"+
    "\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec"+
    "\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314"+
    "\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c"+
    "\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564"+
    "\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c"+
    "\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4"+
    "\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc"+
    "\0\u1901\0\u1926\0\u194b\0\u1970\0\u0a1e\0\u1995\0\u19ba\0\u19df"+
    "\0\u1a04\0\u1a29\0\u1a4e\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1b07"+
    "\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f"+
    "\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32\0\u1d57"+
    "\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10\0\u1e35\0\u1e5a\0\u1e7f"+
    "\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\u1f38\0\u1f5d\0\u1f82\0\u1fa7"+
    "\0\u1fcc\0\u1ff1\0\u2016\0\u203b\0\u2060\0\u2085\0\u20aa\0\u20cf"+
    "\0\u20f4\0\u2119\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2\0\u21f7"+
    "\0\u221c\0\u2241\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa\0\u231f"+
    "\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8\0\u23fd\0\u2422\0\u2447"+
    "\0\u246c\0\u2491\0\u24b6\0\u24db\0\u178f\0\u2500\0\u2525\0\u254a"+
    "\0\u256f\0\u2594\0\u25b9\0\u25de\0\u2603\0\u2628\0\u264d\0\u2672"+
    "\0\u2697\0\u26bc\0\u26e1\0\u2706\0\u272b\0\u2750\0\u2775\0\u279a"+
    "\0\u27bf\0\u27e4\0\u2809\0\u282e\0\u2853\0\u2878\0\u289d\0\u28c2"+
    "\0\u28e7\0\u290c\0\u2931\0\u2956\0\u297b\0\u29a0\0\u29c5\0\u29ea"+
    "\0\u2a0f\0\u2a34\0\u2a59\0\u2a7e\0\u2aa3\0\u2ac8\0\u2aed\0\u2b12"+
    "\0\u2b37\0\u2b37\0\u2b5c\0\u2b81\0\u2ba6\0\u2bcb\0\u2bf0\0\u2c15"+
    "\0\u2c3a\0\u2c5f\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2cf3\0\u2d18"+
    "\0\u2d3d\0\u2d62\0\u2d87\0\u2dac\0\u2dd1\0\u2df6\0\u2e1b\0\u2e40"+
    "\0\u2e65\0\u2e8a\0\u2eaf\0\u2ed4\0\u2ef9\0\u2f1e\0\u2f43\0\u2f68"+
    "\0\u2f8d\0\u2fb2\0\u2fd7\0\u2ffc\0\u3021\0\u3046\0\u306b\0\u3090"+
    "\0\u30b5\0\u30da\0\u30ff\0\u3124\0\u3149\0\u316e\0\u3193\0\u31b8"+
    "\0\u31dd\0\u3202\0\u3227\0\u324c\0\u3271\0\u3296\0\u32bb\0\u32e0"+
    "\0\u3305\0\u332a\0\u334f\0\u3374\0\u3399\0\u33be\0\u33e3\0\u3408"+
    "\0\u342d\0\u3452\0\u3477\0\u349c\0\u34c1\0\u34e6\0\u350b\0\u3530"+
    "\0\u3555\0\u357a\0\u359f\0\u35c4\0\u35e9\0\u360e\0\u3633\0\u3658"+
    "\0\u367d\0\u36a2\0\u36c7\0\u36ec\0\u3711\0\u2a0f\0\u3736\0\u375b"+
    "\0\u3780\0\u37a5\0\u37ca\0\u37ef\0\u3814\0\u3839\0\u385e\0\u3883"+
    "\0\u38a8\0\u38cd\0\u38f2\0\u3917\0\u393c\0\u3961\0\u3986\0\u39ab"+
    "\0\u39d0\0\u39f5\0\u3a1a\0\u3a3f\0\u3a64\0\u3a89\0\u3aae\0\u3ad3"+
    "\0\u3af8\0\u3b1d\0\u3b42\0\u3b67\0\u3b8c\0\u3bb1\0\u3bd6\0\u3bfb"+
    "\0\u3c20\0\u3c45\0\u3c6a\0\u3c8f\0\u3cb4\0\u3cd9\0\u3cfe\0\u3d23"+
    "\0\u3d48\0\u3d6d\0\u3d92\0\u3db7\0\u3ddc\0\u1901\0\u3e01\0\u3e26"+
    "\0\u3e4b\0\u3e70\0\u3e95\0\u3eba\0\u3edf\0\u3f04\0\u3f29\0\u3f4e"+
    "\0\u3f73\0\u3f98\0\u3fbd\0\u3fe2\0\u4007\0\u402c\0\u4051\0\u4076"+
    "\0\u409b\0\u40c0\0\u40e5\0\u410a\0\u412f\0\u4154\0\u4179\0\u419e"+
    "\0\u41c3\0\u41e8\0\u420d\0\u4232\0\u4257\0\u427c\0\u42a1\0\u42c6"+
    "\0\u42eb\0\u2603\0\u4310\0\u4335\0\u435a\0\u437f\0\u43a4\0\u43c9"+
    "\0\u43ee\0\u4413\0\u4438\0\u445d\0\u4482\0\u44a7\0\u44cc\0\u44f1"+
    "\0\u4516\0\u453b\0\u4560\0\u4585\0\u45aa\0\u45cf\0\u45f4\0\u4619"+
    "\0\u463e\0\u4663\0\u4688\0\u46ad\0\u46d2\0\u46f7\0\u471c\0\u4741"+
    "\0\u4766\0\u478b\0\u47b0\0\u47d5\0\u47fa\0\u481f\0\u4844\0\u4869"+
    "\0\u2bf0\0\u488e\0\u48b3\0\u48d8\0\u48fd\0\u4922\0\u4947\0\u1926"+
    "\0\u496c\0\u4991\0\u49b6\0\u49db\0\u4a00\0\u4a25\0\u4a4a\0\u4a6f"+
    "\0\u4a94\0\u4ab9\0\u4ade\0\u4b03\0\u4b28\0\u4b4d\0\u4b72\0\u4b97"+
    "\0\u4bbc\0\u4be1\0\u4c06\0\u4c2b\0\u4c50\0\u4c75\0\u4c9a\0\u4cbf"+
    "\0\u4ce4\0\u4d09\0\u4d2e\0\u4d53\0\u4d78\0\u4d9d\0\u4dc2\0\u4de7"+
    "\0\u4e0c\0\u4e31\0\u4e56\0\u4e7b\0\u4ea0\0\u4ec5\0\u4eea\0\u4f0f"+
    "\0\u4f34\0\u4f59\0\u4f7e\0\u4fa3\0\u4fc8\0\u4fed\0\u5012\0\u5037"+
    "\0\u505c\0\u5081\0\u1848\0\u50a6\0\u50cb\0\u50f0\0\u5115\0\u513a"+
    "\0\u515f\0\u0c6e\0\u5184\0\u51a9\0\u4e31\0\u51ce\0\u51f3\0\u27bf"+
    "\0\u5218\0\u523d\0\45\0\u5262\0\u5287\0\u52ac\0\u52d1\0\u52f6"+
    "\0\u531b\0\u5340\0\u5365\0\u538a\0\u53af\0\u53d4\0\u53f9\0\u541e"+
    "\0\u5443\0\u5468\0\u548d\0\u54b2\0\u54d7\0\u54fc\0\u5521\0\u5546"+
    "\0\u556b\0\u5590\0\u55b5\0\u55da\0\u55ff\0\u5624\0\u5649\0\u566e"+
    "\0\u5693\0\u56b8\0\u56dd\0\u5702\0\u5727\0\u574c\0\u5771\0\u5796"+
    "\0\u57bb\0\u57e0\0\u5805\0\u582a\0\u584f\0\u5874\0\u5899\0\u58be"+
    "\0\u58e3\0\u5908\0\u592d\0\u5952\0\u5977\0\u599c\0\u5340\0\u59c1"+
    "\0\u59e6\0\u5a0b\0\u5a30\0\u5a55\0\u5a7a\0\u5a9f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\3\1\12\47\0\3\3\1\0\5\3"+
    "\2\0\27\3\5\0\1\4\2\0\1\4\4\0\1\41"+
    "\35\0\1\5\41\0\3\3\1\0\3\3\1\42\1\3"+
    "\2\0\1\43\1\3\1\44\4\3\1\45\1\46\16\3"+
    "\3\0\3\3\1\0\2\3\1\47\2\3\2\0\6\3"+
    "\1\50\6\3\1\51\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\52\1\3\1\53\4\3\1\54\4\3\1\55"+
    "\12\3\5\0\1\56\2\0\1\56\4\0\1\57\34\0"+
    "\1\60\2\0\1\60\37\0\3\3\1\0\2\3\1\61"+
    "\1\62\1\63\2\0\1\3\1\64\2\3\1\65\1\66"+
    "\2\3\1\67\2\3\1\70\1\3\1\71\6\3\1\72"+
    "\2\3\3\0\3\3\1\0\3\3\1\73\1\3\2\0"+
    "\1\74\1\3\1\75\2\3\1\76\1\3\1\77\3\3"+
    "\1\100\1\101\12\3\3\0\3\3\1\0\2\3\1\102"+
    "\1\3\1\103\2\0\3\3\1\104\1\3\1\105\7\3"+
    "\1\106\11\3\3\0\3\3\1\0\5\3\2\0\1\107"+
    "\1\3\1\110\2\3\1\111\1\3\1\112\2\3\1\113"+
    "\1\3\1\114\1\115\11\3\3\0\3\3\1\0\3\3"+
    "\1\116\1\3\2\0\1\117\1\3\1\120\4\3\1\121"+
    "\4\3\1\122\12\3\3\0\3\3\1\0\3\3\1\123"+
    "\1\124\2\0\1\125\1\3\1\126\2\3\1\127\1\3"+
    "\1\130\4\3\1\131\12\3\3\0\3\3\1\0\2\3"+
    "\1\132\1\133\1\3\2\0\5\3\1\134\1\135\1\3"+
    "\1\136\1\137\12\3\1\140\2\3\3\0\3\3\1\0"+
    "\3\3\1\141\1\142\2\0\1\143\4\3\1\144\1\3"+
    "\1\145\2\3\1\146\14\3\3\0\3\3\1\0\3\3"+
    "\1\147\1\150\2\0\1\151\1\3\1\152\2\3\1\153"+
    "\1\3\1\154\4\3\1\155\12\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\156\6\3\1\157\17\3\3\0\3\3"+
    "\1\0\3\3\1\160\1\3\2\0\1\161\1\3\1\162"+
    "\2\3\1\163\1\3\1\164\4\3\1\165\1\3\1\65"+
    "\10\3\3\0\3\3\1\0\2\3\1\166\2\3\2\0"+
    "\1\3\1\167\7\3\1\65\3\3\1\170\4\3\1\171"+
    "\4\3\3\0\3\3\1\0\3\3\1\172\1\3\2\0"+
    "\1\173\1\3\1\174\1\3\1\175\1\3\1\176\1\177"+
    "\1\200\1\3\1\201\1\3\1\202\1\3\1\203\3\3"+
    "\1\204\3\3\1\205\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\206\24\3\3\0\3\3\1\0\4\3\1\207"+
    "\2\0\2\3\1\210\2\3\1\211\1\3\1\212\17\3"+
    "\3\0\3\3\1\0\5\3\2\0\7\3\1\213\17\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\214\11\3"+
    "\1\215\12\3\3\0\3\3\1\0\5\3\2\0\1\216"+
    "\1\3\1\217\4\3\1\220\4\3\1\221\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\1\222\4\3\1\223\1\3"+
    "\1\224\2\3\1\225\1\3\1\226\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\227\13\3\1\230\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\7\3\1\231\17\3\5\0"+
    "\1\41\1\0\1\232\1\41\7\0\1\232\27\0\3\3"+
    "\1\0\4\3\1\233\2\0\22\3\1\234\4\3\3\0"+
    "\3\3\1\0\5\3\2\0\4\3\1\235\15\3\1\236"+
    "\4\3\3\0\3\3\1\0\5\3\2\0\3\3\1\210"+
    "\23\3\3\0\3\3\1\0\2\3\1\237\2\3\2\0"+
    "\4\3\1\65\3\3\1\240\16\3\3\0\3\3\1\0"+
    "\5\3\2\0\12\3\1\206\14\3\3\0\3\3\1\0"+
    "\5\3\2\0\6\3\1\241\5\3\1\242\4\3\1\243"+
    "\5\3\3\0\3\3\1\0\5\3\2\0\1\3\1\244"+
    "\4\3\1\245\20\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\246\1\3\1\247\11\3\1\250\12\3\3\0\3\3"+
    "\1\0\2\3\1\251\2\3\2\0\15\3\1\210\11\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\252\10\3\1\210"+
    "\12\3\1\253\2\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\254\7\3\1\255\12\3\1\245\3\3\3\0\3\3"+
    "\1\0\2\3\1\256\2\3\2\0\21\3\1\66\5\3"+
    "\5\0\1\56\2\0\1\56\4\0\1\41\34\0\1\60"+
    "\1\0\1\257\1\60\7\0\1\257\27\0\3\3\1\0"+
    "\5\3\2\0\1\3\1\65\14\3\1\65\10\3\3\0"+
    "\3\3\1\0\5\3\2\0\4\3\1\260\22\3\3\0"+
    "\3\3\1\0\4\3\1\261\2\0\4\3\1\245\22\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\65\25\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\65\24\3\3\0"+
    "\3\3\1\0\5\3\2\0\4\3\1\262\22\3\3\0"+
    "\3\3\1\0\5\3\2\0\15\3\1\263\11\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\65\4\3\1\264"+
    "\11\3\3\0\3\3\1\0\5\3\2\0\17\3\1\65"+
    "\7\3\3\0\3\3\1\0\5\3\2\0\22\3\1\265"+
    "\4\3\3\0\3\3\1\0\5\3\2\0\4\3\1\266"+
    "\11\3\1\65\10\3\3\0\3\3\1\0\2\3\1\214"+
    "\1\3\1\267\2\0\1\270\7\3\1\271\1\272\3\3"+
    "\1\273\11\3\3\0\3\3\1\0\5\3\2\0\7\3"+
    "\1\265\17\3\3\0\3\3\1\0\3\3\1\274\1\3"+
    "\2\0\22\3\1\275\4\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\276\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\277\14\3\1\300\11\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\3\1\301\25\3\3\0\3\3\1\0"+
    "\5\3\2\0\15\3\1\66\11\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\302\1\3\1\303\3\3\1\304"+
    "\3\3\1\305\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\5\3\1\306\21\3\3\0\3\3\1\0\5\3\2\0"+
    "\10\3\1\307\16\3\3\0\3\3\1\0\5\3\2\0"+
    "\13\3\1\310\13\3\3\0\3\3\1\0\5\3\2\0"+
    "\3\3\1\311\16\3\1\312\4\3\3\0\3\3\1\0"+
    "\3\3\1\313\1\3\2\0\1\314\13\3\1\315\1\3"+
    "\1\316\10\3\3\0\3\3\1\0\5\3\2\0\6\3"+
    "\1\65\20\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\317\24\3\3\0\3\3\1\0\5\3\2\0\22\3"+
    "\1\320\4\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\321\24\3\3\0\3\3\1\0\4\3\1\66\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\14\3\1\322"+
    "\12\3\3\0\3\3\1\0\4\3\1\323\2\0\1\324"+
    "\3\3\1\325\1\3\1\326\1\3\1\327\1\330\3\3"+
    "\1\331\6\3\1\332\2\3\3\0\3\3\1\0\4\3"+
    "\1\333\2\0\23\3\1\334\3\3\3\0\3\3\1\0"+
    "\5\3\2\0\17\3\1\335\7\3\3\0\3\3\1\0"+
    "\5\3\2\0\13\3\1\336\13\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\317\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\3\1\65\3\3\1\337\7\3\1\340\11\3"+
    "\3\0\3\3\1\0\5\3\2\0\5\3\1\341\21\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\342\4\3"+
    "\1\343\4\3\1\344\12\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\345\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\24\3\1\346\2\3\3\0\3\3\1\0\4\3"+
    "\1\214\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\347\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\3\1\245\25\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\350\1\3\1\262\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\351\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\11\3\1\352\15\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\353\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\354\21\3\3\0\3\3\1\0"+
    "\3\3\1\355\1\3\2\0\7\3\1\103\17\3\3\0"+
    "\3\3\1\0\5\3\2\0\4\3\1\356\10\3\1\357"+
    "\11\3\3\0\3\3\1\0\5\3\2\0\2\3\1\360"+
    "\4\3\1\361\17\3\3\0\3\3\1\0\2\3\1\362"+
    "\1\363\1\364\2\0\1\365\4\3\1\366\14\3\1\367"+
    "\4\3\3\0\3\3\1\0\5\3\2\0\1\370\1\3"+
    "\1\371\24\3\3\0\3\3\1\0\2\3\1\372\1\3"+
    "\1\373\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\374\17\3\3\0\3\3\1\0\4\3\1\103"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\375\22\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\376\4\3\1\377\17\3\3\0\3\3\1\0\3\3"+
    "\1\u0100\1\3\2\0\5\3\1\u0101\21\3\3\0\3\3"+
    "\1\0\4\3\1\u0102\2\0\5\3\1\u0103\21\3\3\0"+
    "\3\3\1\0\5\3\2\0\24\3\1\u0104\2\3\3\0"+
    "\3\3\1\0\3\3\1\u0105\1\u0106\2\0\27\3\3\0"+
    "\3\3\1\0\4\3\1\u0107\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\10\3\1\u0108\16\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u0109\12\3\1\231\7\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u010a\4\3"+
    "\1\u010b\17\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u010c\22\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u010d\22\3\3\0\3\3\1\0\2\3\1\245\2\3"+
    "\2\0\1\3\1\u010e\2\3\1\u010f\1\3\1\u0110\1\3"+
    "\1\u0111\3\3\1\u0112\1\u0113\11\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u0114\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\7\3\1\u0115\17\3\3\0\3\3\1\0"+
    "\5\3\2\0\22\3\1\u0116\4\3\3\0\3\3\1\0"+
    "\5\3\2\0\13\3\1\u0117\6\3\1\65\4\3\3\0"+
    "\3\3\1\0\5\3\2\0\24\3\1\66\2\3\3\0"+
    "\3\3\1\0\4\3\1\u0118\2\0\4\3\1\u0119\3\3"+
    "\1\u011a\4\3\1\u011b\4\3\1\u011c\4\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\u011d\26\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u011e\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\22\3\1\66\4\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u011f\4\3\1\u0120\14\3\3\0\3\3"+
    "\1\0\3\3\1\u0121\1\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\20\3\1\66\6\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u0122\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\u0123\26\3\3\0\3\3\1\0"+
    "\4\3\1\u0124\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u0105\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u0125\17\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\65\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\363\6\3\1\u0126\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u0127\22\3\3\0\3\3\1\0\2\3"+
    "\1\66\2\3\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\16\3\1\65\10\3\3\0\3\3\1\0\4\3"+
    "\1\373\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\3\3\1\65\1\375\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\246\21\3\3\0\3\3\1\0\2\3"+
    "\1\164\2\3\2\0\1\3\1\u0128\25\3\3\0\3\3"+
    "\1\0\2\3\1\u0129\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u012a\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u012b\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\5\3\1\u0107\21\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\u012c\11\3\1\116\12\3"+
    "\3\0\3\3\1\0\5\3\2\0\4\3\1\u012d\22\3"+
    "\3\0\3\3\1\0\4\3\1\u012e\2\0\5\3\1\u012f"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0130"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\14\3\1\317"+
    "\12\3\5\0\1\u0131\2\0\1\u0131\3\0\1\u0132\30\0"+
    "\1\u0132\2\0\3\3\1\0\4\3\1\u0133\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u0134\24\3"+
    "\3\0\3\3\1\0\3\3\1\u0135\1\3\2\0\14\3"+
    "\1\u0136\12\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\u0137\24\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\65\5\3\1\u0138\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\12\3\1\u0139\14\3\3\0\3\3\1\0\5\3"+
    "\2\0\14\3\1\131\12\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\317\16\3\1\u013a\3\0\3\3\1\0"+
    "\2\3\1\u013b\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u012b\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0105\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\17\3\1\66\7\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\65\21\3\3\0\3\3\1\0\2\3"+
    "\1\72\2\3\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\17\3\1\u013c\7\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\3\1\u0104\25\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\373\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\3\1\65\25\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\373\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u013d\24\3\5\0\1\u013e\2\0\1\u013e\3\0"+
    "\1\u013f\30\0\1\u013f\2\0\3\3\1\0\5\3\2\0"+
    "\12\3\1\u0140\14\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u0141\17\3\3\0\3\3\1\0\5\3\2\0"+
    "\14\3\1\u0142\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u0143\17\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u0144\24\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\u0145\1\3\1\65\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0146\24\3\3\0\3\3\1\0\4\3"+
    "\1\u0147\2\0\27\3\3\0\3\3\1\0\4\3\1\u0148"+
    "\2\0\14\3\1\u0149\12\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u014a\1\3\1\u014b\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\10\3\1\u014c\16\3\3\0\3\3\1\0"+
    "\5\3\2\0\13\3\1\116\13\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\231\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\65\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\17\3\1\u014d\7\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u014e\3\3\1\u014f\10\3\1\65\5\3"+
    "\3\0\3\3\1\0\5\3\2\0\27\3\1\u0150\2\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\u0129\16\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\u0151\2\3\1\u0152"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0153"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\4\3\1\65"+
    "\10\3\1\u0154\11\3\3\0\3\3\1\0\4\3\1\u0155"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\1\u0156"+
    "\26\3\3\0\3\3\1\0\4\3\1\u0157\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\4\3\1\u0158\22\3"+
    "\3\0\3\3\1\0\5\3\2\0\6\3\1\u0159\20\3"+
    "\3\0\3\3\1\0\2\3\1\u0141\2\3\2\0\2\3"+
    "\1\65\24\3\3\0\3\3\1\0\2\3\1\u015a\2\3"+
    "\2\0\14\3\1\u015b\12\3\3\0\3\3\1\0\5\3"+
    "\2\0\17\3\1\u015c\2\3\1\65\4\3\3\0\1\3"+
    "\1\u015d\1\3\1\0\5\3\2\0\27\3\3\0\3\3"+
    "\1\0\2\3\1\65\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\u015e\24\3\3\0\3\3"+
    "\1\0\5\3\2\0\26\3\1\u015f\3\0\3\3\1\0"+
    "\5\3\2\0\15\3\1\u0160\11\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u0161\26\3\3\0\3\3\1\0\4\3"+
    "\1\65\2\0\1\3\1\u0162\25\3\3\0\3\3\1\0"+
    "\3\3\1\u0163\1\3\2\0\27\3\3\0\3\3\1\0"+
    "\4\3\1\u0164\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\u0165\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0166\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u0167\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0168\4\3\1\u0169\17\3\3\0\3\3"+
    "\1\0\4\3\1\u016a\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\10\3\1\u016b\4\3\1\65\1\3\1\u016c"+
    "\7\3\3\0\3\3\1\0\5\3\2\0\12\3\1\210"+
    "\14\3\3\0\3\3\1\0\4\3\1\u016d\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\4\3\1\u016e\22\3"+
    "\3\0\3\3\1\0\5\3\2\0\10\3\1\255\16\3"+
    "\3\0\3\3\1\0\5\3\2\0\10\3\1\u016f\16\3"+
    "\3\0\3\3\1\0\5\3\2\0\6\3\1\u0148\1\3"+
    "\1\u0170\4\3\1\u0171\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\u0172\16\3\3\0\3\3\1\0\2\3"+
    "\1\210\2\3\2\0\7\3\1\u0105\12\3\1\u0173\1\3"+
    "\1\u0174\2\3\3\0\3\3\1\0\5\3\2\0\14\3"+
    "\1\67\12\3\3\0\3\3\1\0\5\3\2\0\7\3"+
    "\1\210\17\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\u0105\3\3\1\u0110\20\3\3\0\3\3\1\0\2\3"+
    "\1\u0175\2\3\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0176\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\u0177\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u0178\21\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u0179\7\3\1\u017a\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u017b\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\u017c\26\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\65\1\3\1\65\3\3\1\u017d"+
    "\16\3\3\0\3\3\1\0\5\3\2\0\1\u0146\26\3"+
    "\3\0\3\3\1\0\5\3\2\0\15\3\1\u0137\11\3"+
    "\3\0\3\3\1\0\2\3\1\u017e\2\3\2\0\4\3"+
    "\1\u017f\10\3\1\u0180\6\3\1\u0181\2\3\3\0\3\3"+
    "\1\0\2\3\1\210\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\3\3\1\u0182\1\u0183\2\0\27\3\3\0\3\3"+
    "\1\0\4\3\1\u0184\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\u0185\21\3\3\0\3\3\1\0"+
    "\5\3\2\0\6\3\1\u0186\13\3\1\u0187\4\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\u0188\21\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\u0189\16\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\67\16\3\3\0"+
    "\3\3\1\0\4\3\1\65\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\210\26\3\3\0\3\3\1\0"+
    "\5\3\2\0\10\3\1\u010c\16\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u018a\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\22\3\1\65\4\3\3\0\3\3\1\0"+
    "\2\3\1\254\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u018b\1\3\1\u018c\22\3\3\0"+
    "\3\3\1\0\4\3\1\u018d\2\0\2\3\1\65\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\15\3\1\210\11\3"+
    "\3\0\3\3\1\0\5\3\2\0\14\3\1\250\12\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\3\1\u018e\25\3"+
    "\3\0\3\3\1\0\5\3\2\0\21\3\1\65\5\3"+
    "\3\0\3\3\1\0\5\3\2\0\21\3\1\u0126\5\3"+
    "\3\0\3\3\1\0\5\3\2\0\23\3\1\u018f\3\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\u0107\26\3\3\0"+
    "\3\3\1\0\5\3\2\0\23\3\1\103\3\3\3\0"+
    "\3\3\1\0\5\3\2\0\12\3\1\65\14\3\3\0"+
    "\1\3\1\u0190\1\3\1\0\5\3\2\0\27\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\u0191\11\3\1\u0192"+
    "\12\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0193"+
    "\4\3\1\65\17\3\3\0\3\3\1\0\3\3\1\210"+
    "\1\3\2\0\27\3\3\0\3\3\1\0\4\3\1\u0194"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u0195\22\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\u0196\24\3\3\0\3\3\1\0\2\3\1\u0197\2\3"+
    "\2\0\27\3\3\0\3\3\1\0\4\3\1\u0198\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0199"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\15\3\1\u019a"+
    "\11\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u019b"+
    "\24\3\3\0\3\3\1\0\3\3\1\u019c\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\3\3\1\u019d\1\3\2\0"+
    "\4\3\1\262\2\3\1\u0100\17\3\3\0\3\3\1\0"+
    "\5\3\2\0\15\3\1\u019e\11\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u019f\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u01a0\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\66\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\215\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u01a1\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u01a2\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u01a3\22\3\3\0\3\3\1\0\4\3"+
    "\1\u01a4\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u01a5\5\3\1\u01a6\4\3\1\u01a7\5\3\1\u01a8"+
    "\3\3\3\0\3\3\1\0\5\3\2\0\13\3\1\255"+
    "\13\3\3\0\3\3\1\0\3\3\1\265\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\7\3\1\65"+
    "\17\3\3\0\3\3\1\0\3\3\1\116\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\3\3\1\u0146\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\4\3\1\u01a9"+
    "\22\3\3\0\3\3\1\0\5\3\2\0\4\3\1\u01aa"+
    "\22\3\3\0\3\3\1\0\2\3\1\u01ab\2\3\2\0"+
    "\5\3\1\66\21\3\3\0\3\3\1\0\5\3\2\0"+
    "\12\3\1\u01ac\14\3\3\0\3\3\1\0\3\3\1\u01ad"+
    "\1\3\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\10\3\1\46\5\3\1\u0104\10\3\3\0\3\3\1\0"+
    "\5\3\2\0\23\3\1\65\3\3\5\0\1\u0131\2\0"+
    "\1\u0131\37\0\3\3\1\0\5\3\2\0\14\3\1\u01ae"+
    "\12\3\3\0\3\3\1\0\5\3\2\0\5\3\1\u016d"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\5\3\1\255"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\7\3\1\u01af"+
    "\17\3\3\0\3\3\1\0\5\3\2\0\15\3\1\65"+
    "\11\3\3\0\3\3\1\0\4\3\1\u01b0\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u01b1\24\3"+
    "\3\0\3\3\1\0\3\3\1\66\1\3\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\7\3\1\u01b2\17\3"+
    "\3\0\3\3\1\0\3\3\1\u01b3\1\3\2\0\27\3"+
    "\3\0\3\3\1\0\2\3\1\u0127\2\3\2\0\27\3"+
    "\5\0\1\u013e\2\0\1\u013e\37\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\u01b4\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\360\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\317\17\3\3\0\3\3\1\0\4\3"+
    "\1\u0186\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\5\3\1\67\21\3\3\0\3\3\1\0\5\3\2\0"+
    "\13\3\1\u01b5\13\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\66\22\3\3\0\3\3\1\0\4\3\1\u01b6"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\1\u01b7"+
    "\26\3\3\0\3\3\1\0\5\3\2\0\22\3\1\255"+
    "\4\3\3\0\3\3\1\0\3\3\1\u01b8\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\5\3\1\u01b9"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\5\3\1\u01ba"+
    "\21\3\3\0\3\3\1\0\2\3\1\u01bb\2\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\5\3\1\u01bc"+
    "\6\3\1\u01bd\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u01be\17\3\20\0\1\u01bf\27\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\u01af\21\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u019b\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\6\3\1\u01c0\20\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u0137\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\24\3\1\373\2\3\3\0\3\3\1\0\5\3"+
    "\2\0\6\3\1\66\20\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u01c1\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\u01c2\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\u01c3\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\u01c4\11\3\3\0\3\3\1\0\4\3"+
    "\1\u0104\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\17\3\1\245\7\3\3\0\3\3\1\0\5\3\2\0"+
    "\10\3\1\u01c5\16\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u01c6\2\3\1\u01c7\6\3\3\0\3\3\1\0"+
    "\3\3\1\255\1\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u01a5\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u01c8\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u01c9\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\317\21\3\3\0\3\3\1\0"+
    "\5\3\2\0\14\3\1\u01ca\12\3\3\0\3\3\1\0"+
    "\2\3\1\u01cb\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\u01cc\21\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\u01cd\1\3\1\u01b7\17\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\210\21\3\3\0"+
    "\3\3\1\0\5\3\2\0\21\3\1\66\5\3\3\0"+
    "\3\3\1\0\5\3\2\0\13\3\1\u01ce\13\3\3\0"+
    "\3\3\1\0\5\3\2\0\7\3\1\u01cf\17\3\3\0"+
    "\3\3\1\0\3\3\1\u01d0\1\3\2\0\27\3\3\0"+
    "\3\3\1\0\5\3\2\0\14\3\1\276\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\14\3\1\255\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\363\24\3\3\0"+
    "\3\3\1\0\5\3\2\0\14\3\1\u01d1\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\u01d2\24\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\u01d3\24\3\3\0"+
    "\3\3\1\0\5\3\2\0\1\u01d4\26\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u01d5\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\3\1\u01d6\1\3\1\u01d7\1\3"+
    "\1\u01d8\20\3\1\u01d9\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\u01da\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u0154\24\3\3\0\3\3\1\0\4\3\1\u01db"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\u01dc\24\3\3\0\3\3\1\0\5\3\2\0\7\3"+
    "\1\u0105\17\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u01dd\22\3\3\0\3\3\1\0\4\3\1\u01de\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\1\u01df\26\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u01e0\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\u01e1\13\3\1\u01e2"+
    "\12\3\3\0\3\3\1\0\5\3\2\0\4\3\1\u01e3"+
    "\22\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0168"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\22\3\1\317"+
    "\4\3\3\0\3\3\1\0\5\3\2\0\1\u01e4\26\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u01e5\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u01e6\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\14\3\1\210\12\3"+
    "\3\0\1\3\1\u0190\1\3\1\0\5\3\2\0\1\u01e7"+
    "\26\3\3\0\3\3\1\0\5\3\2\0\21\3\1\u01e8"+
    "\5\3\3\0\3\3\1\0\5\3\2\0\4\3\1\u01e9"+
    "\22\3\3\0\3\3\1\0\5\3\2\0\14\3\1\u01ea"+
    "\12\3\3\0\3\3\1\0\5\3\2\0\5\3\1\124"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\11\3\1\u01eb"+
    "\15\3\3\0\3\3\1\0\4\3\1\u01ec\2\0\27\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\113\24\3"+
    "\3\0\3\3\1\0\4\3\1\u01ed\2\0\27\3\3\0"+
    "\3\3\1\0\5\3\2\0\3\3\1\65\23\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\u01ee\16\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\u01ef\11\3\1\245"+
    "\7\3\3\0\3\3\1\0\3\3\1\u01f0\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\14\3\1\u01f1"+
    "\12\3\3\0\3\3\1\0\2\3\1\u01f2\2\3\2\0"+
    "\5\3\1\210\21\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\u01f3\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\67\26\3\3\0\3\3\1\0\5\3\2\0\1\3"+
    "\1\u01f4\25\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u01f5\22\3\3\0\3\3\1\0\5\3\2\0\10\3"+
    "\1\210\16\3\3\0\3\3\1\0\5\3\2\0\15\3"+
    "\1\245\11\3\3\0\3\3\1\0\5\3\2\0\5\3"+
    "\1\u01f6\21\3\3\0\3\3\1\0\5\3\2\0\14\3"+
    "\1\u01f7\12\3\3\0\3\3\1\0\2\3\1\u01f8\2\3"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\14\3"+
    "\1\u01f9\12\3\3\0\3\3\1\0\5\3\2\0\22\3"+
    "\1\u01fa\4\3\3\0\3\3\1\0\5\3\2\0\1\3"+
    "\1\u013b\25\3\3\0\3\3\1\0\5\3\2\0\2\3"+
    "\1\u01fb\24\3\3\0\3\3\1\0\4\3\1\u01fc\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\5\3\1\u01fd"+
    "\21\3\3\0\3\3\1\0\5\3\2\0\1\65\6\3"+
    "\1\u01f0\17\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\360\22\3\3\0\3\3\1\0\5\3\2\0\1\u01fe"+
    "\26\3\3\0\3\3\1\0\5\3\2\0\11\3\1\u017a"+
    "\15\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0162"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u01ff"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\14\3\1\u0200"+
    "\12\3\3\0\3\3\1\0\5\3\2\0\2\3\1\u0201"+
    "\24\3\3\0\3\3\1\0\5\3\2\0\11\3\1\65"+
    "\15\3\3\0\3\3\1\0\2\3\1\255\2\3\2\0"+
    "\27\3\3\0\3\3\1\0\3\3\1\355\1\3\2\0"+
    "\27\3\3\0\3\3\1\0\5\3\2\0\10\3\1\u0107"+
    "\16\3\3\0\3\3\1\0\5\3\2\0\23\3\1\317"+
    "\3\3\3\0\3\3\1\0\5\3\2\0\1\246\26\3"+
    "\3\0\3\3\1\0\5\3\2\0\5\3\1\u0202\21\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\103\26\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\66\21\3\3\0"+
    "\3\3\1\0\4\3\1\210\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\5\3\1\u0203\21\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0204\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\7\3\1\u01f9\17\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0205\12\3\3\0\3\3"+
    "\1\0\2\3\1\u019b\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\2\3\1\u0206\2\3\2\0\27\3\21\0\1\u0207"+
    "\26\0\3\3\1\0\5\3\2\0\4\3\1\u0208\22\3"+
    "\3\0\3\3\1\0\5\3\2\0\15\3\1\u0209\11\3"+
    "\3\0\3\3\1\0\5\3\2\0\14\3\1\202\12\3"+
    "\3\0\3\3\1\0\5\3\2\0\5\3\1\u0173\21\3"+
    "\3\0\3\3\1\0\4\3\1\u0183\2\0\1\372\26\3"+
    "\3\0\3\3\1\0\5\3\2\0\7\3\1\u020a\17\3"+
    "\3\0\3\3\1\0\5\3\2\0\4\3\1\u020b\22\3"+
    "\3\0\3\3\1\0\5\3\2\0\7\3\1\u020c\17\3"+
    "\3\0\3\3\1\0\5\3\2\0\14\3\1\173\12\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\44\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\10\3\1\u0198\16\3"+
    "\3\0\3\3\1\0\5\3\2\0\11\3\1\u020d\15\3"+
    "\3\0\3\3\1\0\5\3\2\0\2\3\1\u020e\24\3"+
    "\3\0\3\3\1\0\5\3\2\0\14\3\1\u019b\12\3"+
    "\3\0\3\3\1\0\5\3\2\0\1\u01b1\26\3\3\0"+
    "\3\3\1\0\3\3\1\363\1\3\2\0\27\3\3\0"+
    "\3\3\1\0\5\3\2\0\14\3\1\u020f\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\15\3\1\262\11\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\173\21\3\3\0"+
    "\3\3\1\0\5\3\2\0\1\3\1\u0210\25\3\3\0"+
    "\3\3\1\0\5\3\2\0\5\3\1\214\21\3\3\0"+
    "\3\3\1\0\4\3\1\u0211\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\u0212\26\3\3\0\3\3\1\0"+
    "\5\3\2\0\22\3\1\373\4\3\3\0\3\3\1\0"+
    "\5\3\2\0\7\3\1\u0213\17\3\3\0\3\3\1\0"+
    "\3\3\1\u0214\1\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u0215\26\3\3\0\3\3\1\0\2\3"+
    "\1\u0216\2\3\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u0217\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\7\3\1\72\17\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\3\1\u0218\25\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\u01c0\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\14\3\1\u0219\12\3\3\0\3\3\1\0\2\3"+
    "\1\u013a\2\3\2\0\27\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u021a\21\3\3\0\3\3\1\0\5\3"+
    "\2\0\4\3\1\u021b\22\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\u011e\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\15\3\1\u021c\11\3\3\0\3\3\1\0\5\3"+
    "\2\0\10\3\1\u021d\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\6\3\1\u021e\20\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\u021f\24\3\3\0\3\3\1\0\5\3"+
    "\2\0\17\3\1\317\7\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u0220\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u01b1\17\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u0221\24\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\u0222\26\3\3\0\3\3\1\0\5\3\2\0\15\3"+
    "\1\u0118\6\3\1\255\2\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\3\1\66\25\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u0223\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u0224\11\3\3\0\3\3\1\0\5\3\2\0"+
    "\14\3\1\u0225\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\14\3\1\360\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\5\3\1\u0104\21\3\3\0\3\3\1\0\5\3\2\0"+
    "\14\3\1\u0226\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\7\3\1\u0227\17\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\u0228\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u0229\11\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\65\26\3\3\0\3\3\1\0\5\3\2\0\22\3"+
    "\1\u022a\4\3\3\0\3\3\1\0\5\3\2\0\14\3"+
    "\1\363\12\3\3\0\3\3\1\0\5\3\2\0\5\3"+
    "\1\u017a\21\3\3\0\3\3\1\0\5\3\2\0\5\3"+
    "\1\u022b\21\3\3\0\3\3\1\0\5\3\2\0\24\3"+
    "\1\245\2\3\3\0\3\3\1\0\2\3\1\u022c\2\3"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\14\3"+
    "\1\u022d\12\3\3\0\3\3\1\0\5\3\2\0\1\274"+
    "\1\3\1\254\24\3\3\0\3\3\1\0\5\3\2\0"+
    "\6\3\1\u0222\4\3\1\66\13\3\3\0\3\3\1\0"+
    "\5\3\2\0\13\3\1\u022e\13\3\3\0\3\3\1\0"+
    "\2\3\1\u0118\2\3\2\0\27\3\20\0\1\u022f\27\0"+
    "\3\3\1\0\5\3\2\0\1\u0230\26\3\3\0\3\3"+
    "\1\0\2\3\1\u0231\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\73\26\3\3\0\3\3\1\0"+
    "\2\3\1\u0232\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\14\3\1\u0233\12\3\3\0\3\3\1\0"+
    "\2\3\1\u0234\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\3\1\u0235\25\3\3\0\3\3\1\0"+
    "\3\3\1\u01b7\1\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u0236\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0237\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\23\3\1\u0238\3\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u01d4\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\6\3\1\u0137\20\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0239\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\5\3\1\u023a\21\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u023b\24\3\3\0\3\3\1\0"+
    "\2\3\1\u023c\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u023d\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\2\3\1\65\11\3\1\u0142\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\6\3\1\u023e\20\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u023f\22\3\3\0\3\3"+
    "\1\0\5\3\2\0\7\3\1\u01fc\17\3\3\0\3\3"+
    "\1\0\5\3\2\0\3\3\1\u0240\23\3\3\0\3\3"+
    "\1\0\5\3\2\0\10\3\1\u0222\16\3\3\0\3\3"+
    "\1\0\2\3\1\u0241\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u017a\22\3\3\0\3\3"+
    "\1\0\4\3\1\u0242\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\14\3\1\u0161\12\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0243\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0244\22\3\3\0\3\3\1\0"+
    "\2\3\1\u0245\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\14\3\1\u0246\12\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0247\22\3\3\0\1\3\1\u0248"+
    "\1\3\1\0\5\3\2\0\27\3\3\0\3\3\1\0"+
    "\2\3\1\u0104\2\3\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\17\3\1\u0249\7\3\3\0\3\3\1\0"+
    "\5\3\2\0\20\3\1\u0198\6\3\3\0\3\3\1\0"+
    "\3\3\1\u024a\1\3\2\0\27\3\26\0\1\u024b\21\0"+
    "\3\3\1\0\5\3\2\0\22\3\1\u024c\4\3\3\0"+
    "\3\3\1\0\5\3\2\0\24\3\1\u0181\2\3\3\0"+
    "\3\3\1\0\5\3\2\0\2\3\1\u024d\24\3\3\0"+
    "\3\3\1\0\5\3\2\0\17\3\1\u0210\7\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\236\16\3\3\0"+
    "\3\3\1\0\5\3\2\0\10\3\1\u024e\16\3\3\0"+
    "\3\3\1\0\5\3\2\0\17\3\1\236\7\3\3\0"+
    "\3\3\1\0\5\3\2\0\1\u024f\26\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u0250\11\3\3\0\1\3"+
    "\1\u0251\1\3\1\0\5\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\254\24\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u0252\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0253\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\7\3\1\u0254\17\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\u0255\24\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u0252\22\3\3\0\3\3"+
    "\1\0\5\3\2\0\17\3\1\164\7\3\3\0\3\3"+
    "\1\0\5\3\2\0\16\3\1\u0256\10\3\3\0\3\3"+
    "\1\0\5\3\2\0\16\3\1\u0257\10\3\3\0\3\3"+
    "\1\0\5\3\2\0\10\3\1\u0258\16\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0259\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\5\3\1\u025a\21\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u023a\22\3\3\0\3\3"+
    "\1\0\5\3\2\0\6\3\1\116\20\3\3\0\1\3"+
    "\1\u025b\1\3\1\0\5\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\7\3\1\373\17\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u025c\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\210\24\3\3\0\3\3"+
    "\1\0\3\3\1\u019c\1\3\2\0\1\3\1\360\2\3"+
    "\1\u025d\22\3\3\0\3\3\1\0\5\3\2\0\4\3"+
    "\1\u025e\22\3\3\0\3\3\1\0\2\3\1\u025f\2\3"+
    "\2\0\27\3\3\0\3\3\1\0\2\3\1\252\2\3"+
    "\2\0\27\3\3\0\3\3\1\0\5\3\2\0\5\3"+
    "\1\u010d\21\3\3\0\1\3\1\u0260\1\3\1\0\5\3"+
    "\2\0\10\3\1\u024e\16\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u0261\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u0262\3\3\1\u0263\5\3\3\0\3\3\1\0"+
    "\5\3\2\0\10\3\1\u0137\16\3\3\0\3\3\1\0"+
    "\5\3\2\0\7\3\1\u0126\17\3\3\0\3\3\1\0"+
    "\5\3\2\0\12\3\1\u0264\7\3\1\u0265\4\3\3\0"+
    "\3\3\1\0\5\3\2\0\7\3\1\u0266\17\3\3\0"+
    "\3\3\1\0\5\3\2\0\14\3\1\u0267\12\3\3\0"+
    "\3\3\1\0\5\3\2\0\1\274\26\3\3\0\3\3"+
    "\1\0\5\3\2\0\4\3\1\u0201\22\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0268\12\3\3\0\3\3"+
    "\1\0\3\3\1\u0269\1\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u026a\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\u026b\24\3\3\0\3\3"+
    "\1\0\5\3\2\0\7\3\1\u026c\17\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u026d\12\3\3\0\3\3"+
    "\1\0\3\3\1\u026e\1\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\22\3\1\u026f\4\3\3\0\3\3"+
    "\1\0\2\3\1\u0270\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\1\3\1\u0187\25\3\3\0\3\3"+
    "\1\0\5\3\2\0\22\3\1\u0271\4\3\3\0\3\3"+
    "\1\0\5\3\2\0\16\3\1\u0272\10\3\3\0\3\3"+
    "\1\0\3\3\1\u0105\1\3\2\0\27\3\3\0\3\3"+
    "\1\0\2\3\1\u0186\2\3\2\0\27\3\3\0\3\3"+
    "\1\0\5\3\2\0\5\3\1\u011e\21\3\3\0\3\3"+
    "\1\0\5\3\2\0\2\3\1\u0273\24\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u0181\11\3\3\0\3\3"+
    "\1\0\5\3\2\0\14\3\1\u0274\12\3\3\0\3\3"+
    "\1\0\5\3\2\0\6\3\1\u0275\20\3\3\0\3\3"+
    "\1\0\5\3\2\0\15\3\1\u01c6\11\3\3\0\3\3"+
    "\1\0\4\3\1\u0276\2\0\27\3\3\0\3\3\1\0"+
    "\5\3\2\0\12\3\1\u0277\14\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u0278\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u0279\21\3\3\0\3\3\1\0\5\3"+
    "\2\0\5\3\1\u027a\21\3\3\0\3\3\1\0\5\3"+
    "\2\0\1\u027b\26\3\3\0\3\3\1\0\5\3\2\0"+
    "\14\3\1\u027c\12\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u027d\11\3\3\0\3\3\1\0\5\3\2\0"+
    "\4\3\1\u027e\22\3\3\0\3\3\1\0\5\3\2\0"+
    "\2\3\1\u027f\24\3\3\0\3\3\1\0\5\3\2\0"+
    "\16\3\1\u0280\10\3\3\0\3\3\1\0\5\3\2\0"+
    "\1\3\1\u0281\2\3\1\u025e\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\2\3\1\u0282\24\3\3\0\3\3\1\0"+
    "\5\3\2\0\4\3\1\u0283\22\3\3\0\3\3\1\0"+
    "\5\3\2\0\1\u0284\26\3\3\0\3\3\1\0\5\3"+
    "\2\0\14\3\1\u0285\12\3\3\0\3\3\1\0\4\3"+
    "\1\u0286\2\0\27\3\3\0\3\3\1\0\5\3\2\0"+
    "\15\3\1\u027f\11\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23236];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\53\1\2\0\152\1\1\0\24\1\1\0"+
    "\202\1\1\0\14\1\1\0\20\1\1\0\156\1\1\0"+
    "\107\1\1\0\47\1\1\0\33\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[646];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 9: break;
          case 2: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Identificador;
            } 
            // fall through
          case 10: break;
          case 3: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Int;
            } 
            // fall through
          case 11: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 12: break;
          case 5: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Bit;
            } 
            // fall through
          case 13: break;
          case 6: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Float;
            } 
            // fall through
          case 14: break;
          case 7: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Palabra_Reservada;
            } 
            // fall through
          case 15: break;
          case 8: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return FloatError;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
