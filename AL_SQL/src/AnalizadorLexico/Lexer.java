/* The following code was generated by JFlex 1.7.0 */

package AnalizadorLexico;
import static AnalizadorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/Compiladores/AL-xicoDeSQL/AL_SQL/src/AnalizadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\60\1\60\1\4\22\0\1\4\1\17\1\0"+
    "\1\30\1\0\1\15\1\20\1\0\1\24\1\25\1\15\1\14\1\4"+
    "\1\12\1\13\1\15\2\6\10\3\1\0\1\15\1\17\1\16\1\17"+
    "\1\0\1\15\1\31\1\44\1\41\1\32\1\33\1\42\1\50\1\43"+
    "\1\45\1\56\1\52\1\11\1\53\1\7\1\40\1\37\1\57\1\36"+
    "\1\46\1\35\1\10\1\55\1\54\1\34\1\47\1\51\1\22\1\0"+
    "\1\23\1\0\1\2\1\0\4\1\1\5\25\1\1\26\1\21\1\27"+
    "\7\0\1\60\u1fa2\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\2\4\6"+
    "\2\1\4\6\25\2\1\7\3\2\1\10\10\2\2\0"+
    "\1\11\4\2\1\10\3\2\1\10\20\2\1\10\17\2"+
    "\1\10\1\2\1\10\2\2\1\10\26\2\1\10\1\2"+
    "\1\10\21\2\1\10\17\2\1\11\14\2\1\10\7\2"+
    "\1\11\1\2\1\10\7\2\1\10\7\2\1\10\50\2"+
    "\1\10\26\2\1\10\13\2\1\10\1\2\1\10\11\2"+
    "\1\10\12\2\1\10\4\2\1\10\7\2\1\7\1\11"+
    "\1\10\12\2\1\11\14\2\1\10\3\2\1\0\11\2"+
    "\1\10\3\2\1\10\3\2\1\10\17\2\1\10\2\2"+
    "\1\10\2\2\1\10\17\2\1\10\42\2\2\10\22\2"+
    "\1\0\1\2\1\10\46\2\1\10\30\2\1\10\5\2"+
    "\1\0\1\10\46\2\1\0\11\2\1\10\1\2\1\10"+
    "\11\2\1\10\5\2\1\10\6\2\1\10\3\2\1\10"+
    "\34\2\1\10\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\223\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\61\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u01b9\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\142\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u0ebd\0\u2338\0\u2369\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda"+
    "\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162"+
    "\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u208a\0\u3257\0\u3288\0\u32b9"+
    "\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441"+
    "\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9"+
    "\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751"+
    "\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9"+
    "\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61"+
    "\0\u3a92\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8"+
    "\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40"+
    "\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8"+
    "\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050"+
    "\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8"+
    "\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360"+
    "\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7\0\u44e8"+
    "\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670"+
    "\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796\0\u47c7\0\u47f8"+
    "\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f\0\u4980"+
    "\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u390a\0\u4a75\0\u4aa6\0\u4ad7"+
    "\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f"+
    "\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6\0\u4de7"+
    "\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e\0\u4f6f"+
    "\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095\0\u50c6\0\u50f7"+
    "\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d\0\u524e\0\u527f"+
    "\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u2274\0\u5374\0\u53a5\0\u53d6"+
    "\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d\0\u555e"+
    "\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5\0\u56e6"+
    "\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db\0\u580c\0\u583d\0\u586e"+
    "\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5\0\u59f6"+
    "\0\u33ae\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c\0\u5b4d"+
    "\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u5c73\0\u5ca4\0\u5cd5"+
    "\0\u5d06\0\u5d37\0\u5d68\0\u5d99\0\u5dca\0\u5dfb\0\u5e2c\0\u5e5d"+
    "\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21\0\u5f52\0\u5f83\0\u5fb4\0\u5fe5"+
    "\0\u6016\0\u6047\0\u6078\0\u60a9\0\u60da\0\u610b\0\u613c\0\u3b87"+
    "\0\u616d\0\u619e\0\u61cf\0\u6200\0\u6231\0\u6262\0\u22a5\0\u6293"+
    "\0\u62c4\0\u62f5\0\u6326\0\u6357\0\u6388\0\u63b9\0\u63ea\0\u641b"+
    "\0\u644c\0\u647d\0\u64ae\0\u64df\0\u6510\0\u6541\0\u6572\0\u65a3"+
    "\0\u65d4\0\u6605\0\u6636\0\u6667\0\u6698\0\u66c9\0\u66fa\0\u672b"+
    "\0\u675c\0\u678d\0\u67be\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3"+
    "\0\u68e4\0\u6915\0\u6946\0\u6977\0\u69a8\0\u69d9\0\u6a0a\0\u6a3b"+
    "\0\u6a6c\0\u6a9d\0\u6ace\0\u6aff\0\u6b30\0\u6b61\0\u6b92\0\u6bc3"+
    "\0\u6bf4\0\u217f\0\u6c25\0\u6c56\0\u6c87\0\u6cb8\0\u6ce9\0\u6d1a"+
    "\0\u11cd\0\u6d4b\0\u6d7c\0\u68e4\0\u6dad\0\u6dde\0\u35fa\0\u6e0f"+
    "\0\u6e40\0\61\0\u6e71\0\u6ea2\0\u6ed3\0\u6f04\0\u6f35\0\u6f66"+
    "\0\u6f97\0\u6fc8\0\u6ff9\0\u702a\0\u705b\0\u708c\0\u70bd\0\u70ee"+
    "\0\u711f\0\u7150\0\u7181\0\u71b2\0\u71e3\0\u7214\0\u7245\0\u7276"+
    "\0\u72a7\0\u72d8\0\u7309\0\u733a\0\u736b\0\u739c\0\u73cd\0\u73fe"+
    "\0\u742f\0\u7460\0\u7491\0\u74c2\0\u74f3\0\u7524\0\u7555\0\u7586"+
    "\0\u75b7\0\u75e8\0\u7619\0\u764a\0\u767b\0\u76ac\0\u76dd\0\u770e"+
    "\0\u773f\0\u7770\0\u77a1\0\u77d2\0\u7803\0\u6f97\0\u7834\0\u7865"+
    "\0\u7896\0\u78c7\0\u78f8\0\u7929\0\u795a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\12\1\14\2\15\1\16"+
    "\1\17\1\20\1\14\1\21\1\14\1\22\1\14\1\23"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\3\63\0"+
    "\3\3\1\0\5\3\17\0\27\3\4\0\1\4\2\0"+
    "\1\4\4\0\1\51\51\0\1\5\55\0\3\3\1\0"+
    "\3\3\1\52\1\3\17\0\1\53\1\3\1\54\4\3"+
    "\1\55\1\56\16\3\2\0\3\3\1\0\2\3\1\57"+
    "\2\3\17\0\6\3\1\60\6\3\1\61\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\62\1\3\1\63\4\3"+
    "\1\64\4\3\1\65\12\3\4\0\1\66\2\0\1\66"+
    "\4\0\1\67\50\0\1\70\2\0\1\70\70\0\1\14"+
    "\62\0\1\14\61\0\1\14\62\0\1\14\62\0\1\14"+
    "\62\0\1\14\61\0\1\14\31\0\3\3\1\0\2\3"+
    "\1\71\1\72\1\73\17\0\1\3\1\74\2\3\1\75"+
    "\1\76\2\3\1\77\2\3\1\100\1\3\1\101\6\3"+
    "\1\102\2\3\2\0\3\3\1\0\3\3\1\103\1\3"+
    "\17\0\1\104\1\3\1\105\2\3\1\106\1\3\1\107"+
    "\3\3\1\110\1\111\12\3\2\0\3\3\1\0\2\3"+
    "\1\112\1\3\1\113\17\0\3\3\1\114\1\3\1\115"+
    "\7\3\1\116\11\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\117\1\3\1\120\2\3\1\121\1\3\1\122\2\3"+
    "\1\123\1\3\1\124\1\125\11\3\2\0\3\3\1\0"+
    "\3\3\1\126\1\3\17\0\1\127\1\3\1\130\4\3"+
    "\1\131\4\3\1\132\12\3\2\0\3\3\1\0\3\3"+
    "\1\133\1\134\17\0\1\135\1\3\1\136\2\3\1\137"+
    "\1\3\1\140\4\3\1\141\12\3\2\0\3\3\1\0"+
    "\2\3\1\142\1\143\1\3\17\0\5\3\1\144\1\145"+
    "\1\3\1\146\1\147\12\3\1\150\2\3\2\0\3\3"+
    "\1\0\3\3\1\151\1\152\17\0\1\153\4\3\1\154"+
    "\1\3\1\155\2\3\1\156\14\3\2\0\3\3\1\0"+
    "\3\3\1\157\1\160\17\0\1\161\1\3\1\162\2\3"+
    "\1\163\1\3\1\164\4\3\1\165\12\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\166\6\3\1\167\17\3\2\0"+
    "\3\3\1\0\3\3\1\170\1\3\17\0\1\171\1\3"+
    "\1\172\2\3\1\173\1\3\1\174\4\3\1\175\1\3"+
    "\1\75\10\3\2\0\3\3\1\0\2\3\1\176\2\3"+
    "\17\0\1\3\1\177\7\3\1\75\3\3\1\200\4\3"+
    "\1\201\4\3\2\0\3\3\1\0\3\3\1\202\1\3"+
    "\17\0\1\203\1\3\1\204\1\3\1\205\1\3\1\206"+
    "\1\207\1\210\1\3\1\211\1\3\1\212\1\3\1\213"+
    "\3\3\1\214\3\3\1\215\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\216\24\3\2\0\3\3\1\0\4\3"+
    "\1\217\17\0\2\3\1\220\2\3\1\221\1\3\1\222"+
    "\17\3\2\0\3\3\1\0\5\3\17\0\7\3\1\223"+
    "\17\3\2\0\3\3\1\0\5\3\17\0\2\3\1\224"+
    "\11\3\1\225\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\226\1\3\1\227\4\3\1\230\4\3\1\231\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\1\232\4\3\1\233"+
    "\1\3\1\234\2\3\1\235\1\3\1\236\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\237\13\3\1\240\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\7\3\1\241\17\3"+
    "\4\0\1\51\1\0\1\242\1\51\24\0\1\242\26\0"+
    "\3\3\1\0\4\3\1\243\17\0\22\3\1\244\4\3"+
    "\2\0\3\3\1\0\5\3\17\0\4\3\1\245\15\3"+
    "\1\246\4\3\2\0\3\3\1\0\5\3\17\0\3\3"+
    "\1\220\23\3\2\0\3\3\1\0\2\3\1\247\2\3"+
    "\17\0\4\3\1\75\3\3\1\250\16\3\2\0\3\3"+
    "\1\0\5\3\17\0\12\3\1\216\14\3\2\0\3\3"+
    "\1\0\5\3\17\0\6\3\1\251\5\3\1\252\4\3"+
    "\1\253\5\3\2\0\3\3\1\0\5\3\17\0\1\3"+
    "\1\254\4\3\1\255\20\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\256\1\3\1\257\11\3\1\260\12\3\2\0"+
    "\3\3\1\0\2\3\1\261\2\3\17\0\15\3\1\220"+
    "\11\3\2\0\3\3\1\0\5\3\17\0\1\262\10\3"+
    "\1\220\12\3\1\263\2\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\264\7\3\1\265\12\3\1\255\3\3\2\0"+
    "\3\3\1\0\2\3\1\266\2\3\17\0\21\3\1\76"+
    "\5\3\4\0\1\66\2\0\1\66\4\0\1\51\50\0"+
    "\1\70\1\0\1\267\1\70\24\0\1\267\26\0\3\3"+
    "\1\0\5\3\17\0\1\3\1\75\14\3\1\75\10\3"+
    "\2\0\3\3\1\0\5\3\17\0\4\3\1\270\22\3"+
    "\2\0\3\3\1\0\4\3\1\271\17\0\4\3\1\255"+
    "\22\3\2\0\3\3\1\0\5\3\17\0\2\75\25\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\75\24\3"+
    "\2\0\3\3\1\0\5\3\17\0\4\3\1\272\22\3"+
    "\2\0\3\3\1\0\5\3\17\0\15\3\1\273\11\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\75\4\3"+
    "\1\274\11\3\2\0\3\3\1\0\5\3\17\0\17\3"+
    "\1\75\7\3\2\0\3\3\1\0\5\3\17\0\22\3"+
    "\1\275\4\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\276\11\3\1\75\10\3\2\0\3\3\1\0\2\3"+
    "\1\224\1\3\1\277\17\0\1\300\7\3\1\301\1\302"+
    "\3\3\1\303\11\3\2\0\3\3\1\0\5\3\17\0"+
    "\7\3\1\275\17\3\2\0\3\3\1\0\3\3\1\304"+
    "\1\3\17\0\22\3\1\305\4\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\306\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\307\14\3\1\310\11\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\3\1\311\25\3\2\0\3\3"+
    "\1\0\5\3\17\0\15\3\1\76\11\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\312\1\3\1\313\3\3"+
    "\1\314\3\3\1\315\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\5\3\1\316\21\3\2\0\3\3\1\0\5\3"+
    "\17\0\10\3\1\317\16\3\2\0\3\3\1\0\5\3"+
    "\17\0\13\3\1\320\13\3\2\0\3\3\1\0\5\3"+
    "\17\0\3\3\1\321\16\3\1\322\4\3\2\0\3\3"+
    "\1\0\3\3\1\323\1\3\17\0\1\324\13\3\1\325"+
    "\1\3\1\326\10\3\2\0\3\3\1\0\5\3\17\0"+
    "\6\3\1\75\20\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\327\24\3\2\0\3\3\1\0\5\3\17\0"+
    "\22\3\1\330\4\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\331\24\3\2\0\3\3\1\0\4\3\1\76"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\332\12\3\2\0\3\3\1\0\4\3\1\333\17\0"+
    "\1\334\3\3\1\335\1\3\1\336\1\3\1\337\1\340"+
    "\3\3\1\341\6\3\1\342\2\3\2\0\3\3\1\0"+
    "\4\3\1\343\17\0\23\3\1\344\3\3\2\0\3\3"+
    "\1\0\5\3\17\0\17\3\1\345\7\3\2\0\3\3"+
    "\1\0\5\3\17\0\13\3\1\346\13\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\327\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\3\1\75\3\3\1\347\7\3\1\350"+
    "\11\3\2\0\3\3\1\0\5\3\17\0\5\3\1\351"+
    "\21\3\2\0\3\3\1\0\5\3\17\0\2\3\1\352"+
    "\4\3\1\353\4\3\1\354\12\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\355\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\24\3\1\356\2\3\2\0\3\3\1\0"+
    "\4\3\1\224\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\357\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\3\1\255\25\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\360\1\3\1\272\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\361\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\11\3\1\362\15\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\363\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\364\21\3\2\0\3\3"+
    "\1\0\3\3\1\365\1\3\17\0\7\3\1\113\17\3"+
    "\2\0\3\3\1\0\5\3\17\0\4\3\1\366\10\3"+
    "\1\367\11\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\370\4\3\1\371\17\3\2\0\3\3\1\0\2\3"+
    "\1\372\1\373\1\374\17\0\1\375\4\3\1\376\14\3"+
    "\1\377\4\3\2\0\3\3\1\0\5\3\17\0\1\u0100"+
    "\1\3\1\u0101\24\3\2\0\3\3\1\0\2\3\1\u0102"+
    "\1\3\1\u0103\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u0104\17\3\2\0\3\3\1\0\4\3"+
    "\1\113\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u0105\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u0106\4\3\1\u0107\17\3\2\0\3\3\1\0"+
    "\3\3\1\u0108\1\3\17\0\5\3\1\u0109\21\3\2\0"+
    "\3\3\1\0\4\3\1\u010a\17\0\5\3\1\u010b\21\3"+
    "\2\0\3\3\1\0\5\3\17\0\24\3\1\u010c\2\3"+
    "\2\0\3\3\1\0\3\3\1\u010d\1\u010e\17\0\27\3"+
    "\2\0\3\3\1\0\4\3\1\u010f\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\10\3\1\u0110\16\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0111\12\3\1\241"+
    "\7\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u0112"+
    "\4\3\1\u0113\17\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u0114\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u0115\22\3\2\0\3\3\1\0\2\3\1\255"+
    "\2\3\17\0\1\3\1\u0116\2\3\1\u0117\1\3\1\u0118"+
    "\1\3\1\u0119\3\3\1\u011a\1\u011b\11\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u011c\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\7\3\1\u011d\17\3\2\0\3\3"+
    "\1\0\5\3\17\0\22\3\1\u011e\4\3\2\0\3\3"+
    "\1\0\5\3\17\0\13\3\1\u011f\6\3\1\75\4\3"+
    "\2\0\3\3\1\0\5\3\17\0\24\3\1\76\2\3"+
    "\2\0\3\3\1\0\4\3\1\u0120\17\0\4\3\1\u0121"+
    "\3\3\1\u0122\4\3\1\u0123\4\3\1\u0124\4\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\u0125\26\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u0126\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\22\3\1\76\4\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u0127\4\3\1\u0128\14\3\2\0"+
    "\3\3\1\0\3\3\1\u0129\1\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\20\3\1\76\6\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u012a\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\u012b\26\3\2\0\3\3"+
    "\1\0\4\3\1\u012c\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u010d\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u012d\17\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\75\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\373\6\3\1\u012e\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u012f\22\3\2\0\3\3\1\0"+
    "\2\3\1\76\2\3\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\16\3\1\75\10\3\2\0\3\3\1\0"+
    "\4\3\1\u0103\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\3\3\1\75\1\u0105\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\256\21\3\2\0\3\3\1\0"+
    "\2\3\1\174\2\3\17\0\1\3\1\u0130\25\3\2\0"+
    "\3\3\1\0\2\3\1\u0131\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u0132\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u0133\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\5\3\1\u010f\21\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\u0134\11\3\1\126"+
    "\12\3\2\0\3\3\1\0\5\3\17\0\4\3\1\u0135"+
    "\22\3\2\0\3\3\1\0\4\3\1\u0136\17\0\5\3"+
    "\1\u0137\21\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u0138\24\3\2\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\327\12\3\4\0\1\u0139\2\0\1\u0139\3\0\1\u013a"+
    "\1\0\1\u013a\45\0\3\3\1\0\4\3\1\u013b\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u013c"+
    "\24\3\2\0\3\3\1\0\3\3\1\u013d\1\3\17\0"+
    "\14\3\1\u013e\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u013f\24\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\75\5\3\1\u0140\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\12\3\1\u0141\14\3\2\0\3\3\1\0"+
    "\5\3\17\0\14\3\1\141\12\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\327\16\3\1\u0142\2\0\3\3"+
    "\1\0\2\3\1\u0143\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u0133\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u010d\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\17\3\1\76\7\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\75\21\3\2\0\3\3\1\0"+
    "\2\3\1\102\2\3\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\17\3\1\u0144\7\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\3\1\u010c\25\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u0103\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\3\1\75\25\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u0103\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u0145\24\3\4\0\1\u0146\2\0\1\u0146"+
    "\3\0\1\u0146\1\0\1\u0146\45\0\3\3\1\0\5\3"+
    "\17\0\12\3\1\u0147\14\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u0148\17\3\2\0\3\3\1\0\5\3"+
    "\17\0\14\3\1\u0149\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u014a\17\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u014b\24\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\u014c\1\3\1\75\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u014d\24\3\2\0\3\3\1\0"+
    "\4\3\1\u014e\17\0\27\3\2\0\3\3\1\0\4\3"+
    "\1\u014f\17\0\14\3\1\u0150\12\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u0151\1\3\1\u0152\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\10\3\1\u0153\16\3\2\0\3\3"+
    "\1\0\5\3\17\0\13\3\1\126\13\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\241\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\75\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\17\3\1\u0154\7\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u0155\3\3\1\u0156\10\3\1\75"+
    "\5\3\2\0\3\3\1\0\5\3\1\u0157\16\0\27\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\u0131\16\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\u0158\2\3"+
    "\1\u0159\21\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u015a\24\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\75\10\3\1\u015b\11\3\2\0\3\3\1\0\4\3"+
    "\1\u015c\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\u015d\26\3\2\0\3\3\1\0\4\3\1\u015e\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\4\3\1\u015f"+
    "\22\3\2\0\3\3\1\0\5\3\17\0\6\3\1\u0160"+
    "\20\3\2\0\3\3\1\0\2\3\1\u0148\2\3\17\0"+
    "\2\3\1\75\24\3\2\0\3\3\1\0\2\3\1\u0161"+
    "\2\3\17\0\14\3\1\u0162\12\3\2\0\3\3\1\0"+
    "\5\3\17\0\17\3\1\u0163\2\3\1\75\4\3\2\0"+
    "\1\3\1\u0164\1\3\1\0\5\3\17\0\27\3\2\0"+
    "\3\3\1\0\2\3\1\75\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\u0165\24\3\2\0"+
    "\3\3\1\0\5\3\17\0\26\3\1\u0166\2\0\3\3"+
    "\1\0\5\3\17\0\15\3\1\u0167\11\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u0168\26\3\2\0\3\3\1\0"+
    "\4\3\1\75\17\0\1\3\1\u0169\25\3\2\0\3\3"+
    "\1\0\3\3\1\u016a\1\3\17\0\27\3\2\0\3\3"+
    "\1\0\4\3\1\u016b\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\u016c\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u016d\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u016e\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u016f\4\3\1\u0170\17\3\2\0"+
    "\3\3\1\0\4\3\1\u0171\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\10\3\1\u0172\4\3\1\75\1\3"+
    "\1\u0173\7\3\2\0\3\3\1\0\5\3\17\0\12\3"+
    "\1\220\14\3\2\0\3\3\1\0\4\3\1\u0174\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\4\3\1\u0175"+
    "\22\3\2\0\3\3\1\0\5\3\17\0\10\3\1\265"+
    "\16\3\2\0\3\3\1\0\5\3\17\0\10\3\1\u0176"+
    "\16\3\2\0\3\3\1\0\5\3\17\0\6\3\1\u014f"+
    "\1\3\1\u0177\4\3\1\u0178\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\u0179\16\3\2\0\3\3\1\0"+
    "\2\3\1\220\2\3\17\0\7\3\1\u010d\12\3\1\u017a"+
    "\1\3\1\u017b\2\3\2\0\3\3\1\0\5\3\17\0"+
    "\14\3\1\77\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\7\3\1\220\17\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u010d\3\3\1\u0118\20\3\2\0\3\3\1\0"+
    "\2\3\1\u017c\2\3\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u017d\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\u017e\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u017f\21\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u0180\7\3\1\u0181\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u0182\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\u0183\26\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\75\1\3\1\75\3\3"+
    "\1\u0184\16\3\2\0\3\3\1\0\5\3\17\0\1\u014d"+
    "\26\3\2\0\3\3\1\0\5\3\17\0\15\3\1\u013f"+
    "\11\3\2\0\3\3\1\0\2\3\1\u0185\2\3\17\0"+
    "\4\3\1\u0186\10\3\1\u0187\6\3\1\u0188\2\3\2\0"+
    "\3\3\1\0\2\3\1\220\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\3\3\1\u0189\1\u018a\17\0\27\3\2\0"+
    "\3\3\1\0\4\3\1\u018b\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\u018c\21\3\2\0\3\3"+
    "\1\0\5\3\17\0\6\3\1\u018d\13\3\1\u018e\4\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\u018f\21\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\u0190\16\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\77\16\3"+
    "\2\0\3\3\1\0\4\3\1\75\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\220\26\3\2\0\3\3"+
    "\1\0\5\3\17\0\10\3\1\u0114\16\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u0191\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\22\3\1\75\4\3\2\0\3\3"+
    "\1\0\2\3\1\264\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u0192\1\3\1\u0193\22\3"+
    "\2\0\3\3\1\0\4\3\1\u0194\17\0\2\3\1\75"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\15\3\1\220"+
    "\11\3\2\0\3\3\1\0\5\3\17\0\14\3\1\260"+
    "\12\3\2\0\3\3\1\0\5\3\17\0\1\3\1\u0195"+
    "\25\3\2\0\3\3\1\0\5\3\17\0\21\3\1\75"+
    "\5\3\2\0\3\3\1\0\5\3\17\0\21\3\1\u012e"+
    "\5\3\2\0\3\3\1\0\5\3\17\0\23\3\1\u0196"+
    "\3\3\2\0\3\3\1\0\5\3\17\0\1\u010f\26\3"+
    "\2\0\3\3\1\0\5\3\17\0\23\3\1\113\3\3"+
    "\2\0\3\3\1\0\5\3\17\0\12\3\1\75\14\3"+
    "\2\0\1\3\1\u0197\1\3\1\0\5\3\17\0\27\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\u0198\11\3"+
    "\1\u0199\12\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u019a\4\3\1\75\17\3\2\0\3\3\1\0\3\3"+
    "\1\220\1\3\17\0\27\3\2\0\3\3\1\0\4\3"+
    "\1\u019b\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u019c\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u019d\24\3\2\0\3\3\1\0\2\3\1\u019e"+
    "\2\3\17\0\27\3\2\0\3\3\1\0\4\3\1\u019f"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u01a0\24\3\2\0\3\3\1\0\5\3\17\0\15\3"+
    "\1\u01a1\11\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u01a2\24\3\2\0\3\3\1\0\3\3\1\u01a3\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\3\3\1\u01a4\1\3"+
    "\17\0\4\3\1\272\2\3\1\u0108\17\3\2\0\3\3"+
    "\1\0\5\3\17\0\15\3\1\u01a5\11\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u01a6\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u01a7\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\76\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\225\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u01a8\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u01a9\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u01aa\22\3\2\0\3\3\1\0"+
    "\4\3\1\u01ab\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u01ac\5\3\1\u01ad\4\3\1\u01ae\5\3"+
    "\1\u01af\3\3\2\0\3\3\1\0\5\3\17\0\13\3"+
    "\1\265\13\3\2\0\3\3\1\0\3\3\1\275\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\7\3"+
    "\1\75\17\3\2\0\3\3\1\0\3\3\1\126\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\3\3\1\u014d\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\u01b0\22\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\u01b1\22\3\2\0\3\3\1\0\2\3\1\u01b2\2\3"+
    "\17\0\5\3\1\76\21\3\2\0\3\3\1\0\5\3"+
    "\17\0\12\3\1\u01b3\14\3\2\0\3\3\1\0\3\3"+
    "\1\u01b4\1\3\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\10\3\1\56\5\3\1\u010c\10\3\2\0\3\3"+
    "\1\0\5\3\17\0\23\3\1\75\3\3\4\0\1\u0139"+
    "\2\0\1\u0139\53\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\u01b5\12\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\u0174\21\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\265\21\3\2\0\3\3\1\0\5\3\17\0\7\3"+
    "\1\u01b6\17\3\2\0\3\3\1\0\5\3\17\0\15\3"+
    "\1\75\11\3\2\0\3\3\1\0\4\3\1\u01b7\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u01b8"+
    "\24\3\2\0\3\3\1\0\3\3\1\76\1\3\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\7\3\1\u01b9"+
    "\17\3\2\0\3\3\1\0\3\3\1\u01ba\1\3\17\0"+
    "\27\3\2\0\3\3\1\0\2\3\1\u012f\2\3\17\0"+
    "\27\3\4\0\1\u0146\2\0\1\u0146\53\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\u01bb\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\370\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\327\17\3\2\0\3\3\1\0"+
    "\4\3\1\u018d\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\5\3\1\77\21\3\2\0\3\3\1\0\5\3"+
    "\17\0\13\3\1\u01bc\13\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\76\22\3\2\0\3\3\1\0\4\3"+
    "\1\u01bd\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\u01be\26\3\2\0\3\3\1\0\5\3\17\0\22\3"+
    "\1\265\4\3\2\0\3\3\1\0\3\3\1\u01bf\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\u01c0\21\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\u01c1\21\3\2\0\3\3\1\0\2\3\1\u01c2\2\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\u01c3\6\3\1\u01c4\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u01c5\17\3\34\0\1\u01c6\26\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\u01b6\21\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u01a2\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\6\3\1\u01c7\20\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u013f\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\24\3\1\u0103\2\3\2\0\3\3\1\0"+
    "\5\3\17\0\6\3\1\76\20\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u01c8\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\u01c9\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\u01ca\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\u01cb\11\3\2\0\3\3\1\0"+
    "\4\3\1\u010c\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\17\3\1\255\7\3\2\0\3\3\1\0\5\3"+
    "\17\0\10\3\1\u01cc\16\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u01cd\2\3\1\u01ce\6\3\2\0\3\3"+
    "\1\0\3\3\1\265\1\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u01ac\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u01cf\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u01d0\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\327\21\3\2\0\3\3"+
    "\1\0\5\3\17\0\14\3\1\u01d1\12\3\2\0\3\3"+
    "\1\0\2\3\1\u01d2\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\u01d3\21\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\u01d4\1\3\1\u01be\17\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\220\21\3"+
    "\2\0\3\3\1\0\5\3\17\0\21\3\1\76\5\3"+
    "\2\0\3\3\1\0\5\3\17\0\13\3\1\u01d5\13\3"+
    "\2\0\3\3\1\0\5\3\17\0\7\3\1\u01d6\17\3"+
    "\2\0\3\3\1\0\3\3\1\u01d7\1\3\17\0\27\3"+
    "\2\0\3\3\1\0\5\3\17\0\14\3\1\306\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\14\3\1\265\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\373\24\3"+
    "\2\0\3\3\1\0\5\3\17\0\14\3\1\u01d8\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\u01d9\24\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\u01da\24\3"+
    "\2\0\3\3\1\0\5\3\17\0\1\u01db\26\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u01dc\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\3\1\u01dd\1\3\1\u01de"+
    "\1\3\1\u01df\20\3\1\u01e0\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\u01e1\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u015b\24\3\2\0\3\3\1\0\4\3"+
    "\1\u01e2\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u01e3\24\3\2\0\3\3\1\0\5\3\17\0"+
    "\7\3\1\u010d\17\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u01e4\22\3\2\0\3\3\1\0\4\3\1\u01e5"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\1\u01e6"+
    "\26\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u01e7"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\1\u01e8\13\3"+
    "\1\u01e9\12\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\u01ea\22\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u016f\24\3\2\0\3\3\1\0\5\3\17\0\22\3"+
    "\1\327\4\3\2\0\3\3\1\0\5\3\17\0\1\u01eb"+
    "\26\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u01ec"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u01ed"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\14\3\1\220"+
    "\12\3\2\0\1\3\1\u0197\1\3\1\0\5\3\17\0"+
    "\1\u01ee\26\3\2\0\3\3\1\0\5\3\17\0\21\3"+
    "\1\u01ef\5\3\2\0\3\3\1\0\5\3\17\0\4\3"+
    "\1\u01f0\22\3\2\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\u01f1\12\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\134\21\3\2\0\3\3\1\0\5\3\17\0\11\3"+
    "\1\u01f2\15\3\2\0\3\3\1\0\4\3\1\u01f3\17\0"+
    "\27\3\2\0\3\3\1\0\5\3\17\0\2\3\1\123"+
    "\24\3\2\0\3\3\1\0\4\3\1\u01f4\17\0\27\3"+
    "\2\0\3\3\1\0\5\3\17\0\3\3\1\75\23\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\u01f5\16\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\u01f6\11\3"+
    "\1\255\7\3\2\0\3\3\1\0\3\3\1\u01f7\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\u01f8\12\3\2\0\3\3\1\0\2\3\1\u01f9\2\3"+
    "\17\0\5\3\1\220\21\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\u01fa\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\77\26\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\3\1\u01fb\25\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u01fc\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\10\3\1\220\16\3\2\0\3\3\1\0\5\3\17\0"+
    "\15\3\1\255\11\3\2\0\3\3\1\0\5\3\17\0"+
    "\5\3\1\u01fd\21\3\2\0\3\3\1\0\5\3\17\0"+
    "\14\3\1\u01fe\12\3\2\0\3\3\1\0\2\3\1\u01ff"+
    "\2\3\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\14\3\1\u0200\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\22\3\1\u0201\4\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\3\1\u0143\25\3\2\0\3\3\1\0\5\3\17\0"+
    "\2\3\1\u0202\24\3\2\0\3\3\1\0\4\3\1\u0203"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\5\3"+
    "\1\u0204\21\3\2\0\3\3\1\0\5\3\17\0\1\75"+
    "\6\3\1\u01f7\17\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\370\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\u0205\26\3\2\0\3\3\1\0\5\3\17\0\11\3"+
    "\1\u0181\15\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u0169\24\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u0206\24\3\2\0\3\3\1\0\5\3\17\0\14\3"+
    "\1\u0207\12\3\2\0\3\3\1\0\5\3\17\0\2\3"+
    "\1\u0208\24\3\2\0\3\3\1\0\5\3\17\0\11\3"+
    "\1\75\15\3\2\0\3\3\1\0\2\3\1\265\2\3"+
    "\17\0\27\3\2\0\3\3\1\0\3\3\1\365\1\3"+
    "\17\0\27\3\2\0\3\3\1\0\5\3\17\0\10\3"+
    "\1\u010f\16\3\2\0\3\3\1\0\5\3\17\0\23\3"+
    "\1\327\3\3\2\0\3\3\1\0\5\3\17\0\1\256"+
    "\26\3\2\0\3\3\1\0\5\3\17\0\5\3\1\u0209"+
    "\21\3\2\0\3\3\1\0\5\3\17\0\1\113\26\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\76\21\3"+
    "\2\0\3\3\1\0\4\3\1\220\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\5\3\1\u020a\21\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u020b\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\7\3\1\u0200\17\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u020c\12\3\2\0"+
    "\3\3\1\0\2\3\1\u01a2\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\2\3\1\u020d\2\3\17\0\27\3\35\0"+
    "\1\u020e\25\0\3\3\1\0\5\3\17\0\4\3\1\u020f"+
    "\22\3\2\0\3\3\1\0\5\3\17\0\15\3\1\u0210"+
    "\11\3\2\0\3\3\1\0\5\3\17\0\14\3\1\212"+
    "\12\3\2\0\3\3\1\0\5\3\17\0\5\3\1\u017a"+
    "\21\3\2\0\3\3\1\0\4\3\1\u018a\17\0\1\u0102"+
    "\26\3\2\0\3\3\1\0\5\3\17\0\7\3\1\u0211"+
    "\17\3\2\0\3\3\1\0\5\3\17\0\4\3\1\u0212"+
    "\22\3\2\0\3\3\1\0\5\3\17\0\7\3\1\u0213"+
    "\17\3\2\0\3\3\1\0\5\3\17\0\14\3\1\203"+
    "\12\3\2\0\3\3\1\0\5\3\17\0\2\3\1\54"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\10\3\1\u019f"+
    "\16\3\2\0\3\3\1\0\5\3\17\0\11\3\1\u0214"+
    "\15\3\2\0\3\3\1\0\5\3\17\0\2\3\1\u0215"+
    "\24\3\2\0\3\3\1\0\5\3\17\0\14\3\1\u01a2"+
    "\12\3\2\0\3\3\1\0\5\3\17\0\1\u01b8\26\3"+
    "\2\0\3\3\1\0\3\3\1\373\1\3\17\0\27\3"+
    "\2\0\3\3\1\0\5\3\17\0\14\3\1\u0216\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\15\3\1\272\11\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\203\21\3"+
    "\2\0\3\3\1\0\5\3\17\0\1\3\1\u0217\25\3"+
    "\2\0\3\3\1\0\5\3\17\0\5\3\1\224\21\3"+
    "\2\0\3\3\1\0\4\3\1\u0218\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\u0219\26\3\2\0\3\3"+
    "\1\0\5\3\17\0\22\3\1\u0103\4\3\2\0\3\3"+
    "\1\0\5\3\17\0\7\3\1\u021a\17\3\2\0\3\3"+
    "\1\0\3\3\1\u021b\1\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u021c\26\3\2\0\3\3\1\0"+
    "\2\3\1\u021d\2\3\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u021e\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\7\3\1\102\17\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\3\1\u021f\25\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\u01c7\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\14\3\1\u0220\12\3\2\0\3\3\1\0"+
    "\2\3\1\u0142\2\3\17\0\27\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u0221\21\3\2\0\3\3\1\0"+
    "\5\3\17\0\4\3\1\u0222\22\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\u0126\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\15\3\1\u0223\11\3\2\0\3\3\1\0"+
    "\5\3\17\0\10\3\1\u0224\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\6\3\1\u0225\20\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\u0226\24\3\2\0\3\3\1\0"+
    "\5\3\17\0\17\3\1\327\7\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u0227\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u01b8\17\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u0228\24\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\u0229\26\3\2\0\3\3\1\0\5\3\17\0"+
    "\15\3\1\u0120\6\3\1\265\2\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\3\1\76\25\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u022a\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u022b\11\3\2\0\3\3\1\0\5\3"+
    "\17\0\14\3\1\u022c\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\14\3\1\370\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\5\3\1\u010c\21\3\2\0\3\3\1\0\5\3"+
    "\17\0\14\3\1\u022d\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\7\3\1\u022e\17\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\u022f\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u0230\11\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\75\26\3\2\0\3\3\1\0\5\3\17\0"+
    "\22\3\1\u0231\4\3\2\0\3\3\1\0\5\3\17\0"+
    "\14\3\1\373\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\5\3\1\u0181\21\3\2\0\3\3\1\0\5\3\17\0"+
    "\5\3\1\u0232\21\3\2\0\3\3\1\0\5\3\17\0"+
    "\24\3\1\255\2\3\2\0\3\3\1\0\2\3\1\u0233"+
    "\2\3\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\14\3\1\u0234\12\3\2\0\3\3\1\0\5\3\17\0"+
    "\1\304\1\3\1\264\24\3\2\0\3\3\1\0\5\3"+
    "\17\0\6\3\1\u0229\4\3\1\76\13\3\2\0\3\3"+
    "\1\0\5\3\17\0\13\3\1\u0235\13\3\2\0\3\3"+
    "\1\0\2\3\1\u0120\2\3\17\0\27\3\34\0\1\u0236"+
    "\26\0\3\3\1\0\5\3\17\0\1\u0237\26\3\2\0"+
    "\3\3\1\0\2\3\1\u0238\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\103\26\3\2\0\3\3"+
    "\1\0\2\3\1\u0239\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\14\3\1\u023a\12\3\2\0\3\3"+
    "\1\0\2\3\1\u023b\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\3\1\u023c\25\3\2\0\3\3"+
    "\1\0\3\3\1\u01be\1\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u023d\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u023e\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\23\3\1\u023f\3\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u01db\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\6\3\1\u013f\20\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u0240\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\5\3\1\u0241\21\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u0242\24\3\2\0\3\3"+
    "\1\0\2\3\1\u0243\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u0244\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\2\3\1\75\11\3\1\u0149\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\6\3\1\u0245\20\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0246\22\3\2\0"+
    "\3\3\1\0\5\3\17\0\7\3\1\u0203\17\3\2\0"+
    "\3\3\1\0\5\3\17\0\3\3\1\u0247\23\3\2\0"+
    "\3\3\1\0\5\3\17\0\10\3\1\u0229\16\3\2\0"+
    "\3\3\1\0\2\3\1\u0248\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0181\22\3\2\0"+
    "\3\3\1\0\4\3\1\u0249\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\14\3\1\u0168\12\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u024a\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u024b\22\3\2\0\3\3"+
    "\1\0\2\3\1\u024c\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\14\3\1\u024d\12\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u024e\22\3\2\0\1\3"+
    "\1\u024f\1\3\1\0\5\3\17\0\27\3\2\0\3\3"+
    "\1\0\2\3\1\u010c\2\3\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\17\3\1\u0250\7\3\2\0\3\3"+
    "\1\0\5\3\17\0\20\3\1\u019f\6\3\2\0\3\3"+
    "\1\0\3\3\1\u0251\1\3\17\0\27\3\42\0\1\u0252"+
    "\20\0\3\3\1\0\5\3\17\0\22\3\1\u0253\4\3"+
    "\2\0\3\3\1\0\5\3\17\0\24\3\1\u0188\2\3"+
    "\2\0\3\3\1\0\5\3\17\0\2\3\1\u0254\24\3"+
    "\2\0\3\3\1\0\5\3\17\0\17\3\1\u0217\7\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\246\16\3"+
    "\2\0\3\3\1\0\5\3\17\0\10\3\1\u0255\16\3"+
    "\2\0\3\3\1\0\5\3\17\0\17\3\1\246\7\3"+
    "\2\0\3\3\1\0\5\3\17\0\1\u0256\26\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u0257\11\3\2\0"+
    "\1\3\1\u0258\1\3\1\0\5\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\264\24\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u0259\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u025a\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\7\3\1\u025b\17\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\u025c\24\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0259\22\3\2\0"+
    "\3\3\1\0\5\3\17\0\17\3\1\174\7\3\2\0"+
    "\3\3\1\0\5\3\17\0\16\3\1\u025d\10\3\2\0"+
    "\3\3\1\0\5\3\17\0\16\3\1\u025e\10\3\2\0"+
    "\3\3\1\0\5\3\17\0\10\3\1\u025f\16\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u0260\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\5\3\1\u0261\21\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0241\22\3\2\0"+
    "\3\3\1\0\5\3\17\0\6\3\1\126\20\3\2\0"+
    "\1\3\1\u0262\1\3\1\0\5\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\7\3\1\u0103\17\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u0263\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\220\24\3\2\0"+
    "\3\3\1\0\3\3\1\u01a3\1\3\17\0\1\3\1\370"+
    "\2\3\1\u0264\22\3\2\0\3\3\1\0\5\3\17\0"+
    "\4\3\1\u0265\22\3\2\0\3\3\1\0\2\3\1\u0266"+
    "\2\3\17\0\27\3\2\0\3\3\1\0\2\3\1\262"+
    "\2\3\17\0\27\3\2\0\3\3\1\0\5\3\17\0"+
    "\5\3\1\u0115\21\3\2\0\1\3\1\u0267\1\3\1\0"+
    "\5\3\17\0\10\3\1\u0255\16\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u0268\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u0269\3\3\1\u026a\5\3\2\0\3\3"+
    "\1\0\5\3\17\0\10\3\1\u013f\16\3\2\0\3\3"+
    "\1\0\5\3\17\0\7\3\1\u012e\17\3\2\0\3\3"+
    "\1\0\5\3\17\0\12\3\1\u026b\7\3\1\u026c\4\3"+
    "\2\0\3\3\1\0\5\3\17\0\7\3\1\u026d\17\3"+
    "\2\0\3\3\1\0\5\3\17\0\14\3\1\u026e\12\3"+
    "\2\0\3\3\1\0\5\3\17\0\1\304\26\3\2\0"+
    "\3\3\1\0\5\3\17\0\4\3\1\u0208\22\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u026f\12\3\2\0"+
    "\3\3\1\0\3\3\1\u0270\1\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u0271\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\u0272\24\3\2\0"+
    "\3\3\1\0\5\3\17\0\7\3\1\u0273\17\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u0274\12\3\2\0"+
    "\3\3\1\0\3\3\1\u0275\1\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\22\3\1\u0276\4\3\2\0"+
    "\3\3\1\0\2\3\1\u0277\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\1\3\1\u018e\25\3\2\0"+
    "\3\3\1\0\5\3\17\0\22\3\1\u0278\4\3\2\0"+
    "\3\3\1\0\5\3\17\0\16\3\1\u0279\10\3\2\0"+
    "\3\3\1\0\3\3\1\u010d\1\3\17\0\27\3\2\0"+
    "\3\3\1\0\2\3\1\u018d\2\3\17\0\27\3\2\0"+
    "\3\3\1\0\5\3\17\0\5\3\1\u0126\21\3\2\0"+
    "\3\3\1\0\5\3\17\0\2\3\1\u027a\24\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u0188\11\3\2\0"+
    "\3\3\1\0\5\3\17\0\14\3\1\u027b\12\3\2\0"+
    "\3\3\1\0\5\3\17\0\6\3\1\u027c\20\3\2\0"+
    "\3\3\1\0\5\3\17\0\15\3\1\u01cd\11\3\2\0"+
    "\3\3\1\0\4\3\1\u027d\17\0\27\3\2\0\3\3"+
    "\1\0\5\3\17\0\12\3\1\u027e\14\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u027f\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u0280\21\3\2\0\3\3\1\0"+
    "\5\3\17\0\5\3\1\u0281\21\3\2\0\3\3\1\0"+
    "\5\3\17\0\1\u0282\26\3\2\0\3\3\1\0\5\3"+
    "\17\0\14\3\1\u0283\12\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u0284\11\3\2\0\3\3\1\0\5\3"+
    "\17\0\4\3\1\u0285\22\3\2\0\3\3\1\0\5\3"+
    "\17\0\2\3\1\u0286\24\3\2\0\3\3\1\0\5\3"+
    "\17\0\16\3\1\u0287\10\3\2\0\3\3\1\0\5\3"+
    "\17\0\1\3\1\u0288\2\3\1\u0265\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\2\3\1\u0289\24\3\2\0\3\3"+
    "\1\0\5\3\17\0\4\3\1\u028a\22\3\2\0\3\3"+
    "\1\0\5\3\17\0\1\u028b\26\3\2\0\3\3\1\0"+
    "\5\3\17\0\14\3\1\u028c\12\3\2\0\3\3\1\0"+
    "\4\3\1\u028d\17\0\27\3\2\0\3\3\1\0\5\3"+
    "\17\0\15\3\1\u0286\11\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31115];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\51\1\2\0\u011f\1\1\0"+
    "\156\1\1\0\107\1\1\0\47\1\1\0\33\1\1\11"+
    "\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            } 
            // fall through
          case 10: break;
          case 2: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Identificador;
            } 
            // fall through
          case 11: break;
          case 3: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Int;
            } 
            // fall through
          case 12: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 13: break;
          case 5: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Bit;
            } 
            // fall through
          case 14: break;
          case 6: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Simbolo;
            } 
            // fall through
          case 15: break;
          case 7: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Float;
            } 
            // fall through
          case 16: break;
          case 8: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return Palabra_Reservada;
            } 
            // fall through
          case 17: break;
          case 9: 
            { lexeme=yytext(); linea=yyline; PrimeraColumna=yycolumn; UltimaColumna=yycolumn+yylength()-1; return FloatError;
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
